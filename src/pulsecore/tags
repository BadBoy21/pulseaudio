!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABSOLUTE_MAX_LATENCY	sink.c	52;"	d	file:
ABSOLUTE_MAX_LATENCY	source.c	46;"	d	file:
ABSOLUTE_MIN_LATENCY	sink.c	51;"	d	file:
ABSOLUTE_MIN_LATENCY	source.c	45;"	d	file:
ASYNCQ_SIZE	asyncq.c	41;"	d	file:
AUTH_TIMEOUT	protocol-esound.c	67;"	d	file:
AUTH_TIMEOUT	protocol-native.c	65;"	d	file:
AUTOSPAWN_LOCK	lock-autospawn.c	51;"	d	file:
AVCODEC_H	ffmpeg/avcodec.h	22;"	d
AVResampleContext	ffmpeg/resample2.c	/^typedef struct AVResampleContext{$/;"	s	file:
AVResampleContext	ffmpeg/resample2.c	/^}AVResampleContext;$/;"	t	typeref:struct:AVResampleContext	file:
AvahiTimeout	avahi-wrap.c	/^struct AvahiTimeout {$/;"	s	file:
AvahiWatch	avahi-wrap.c	/^struct AvahiWatch {$/;"	s	file:
BIAS	g711.c	160;"	d	file:
BUFFER_LIMIT	ioline.c	41;"	d	file:
BY_DATA	idxset.c	59;"	d	file:
BY_HASH	hashmap.c	55;"	d	file:
BY_INDEX	idxset.c	60;"	d	file:
CHANNELS	svolume_arm.c	128;"	d	file:
CHANNELS	svolume_mmx.c	241;"	d	file:
CHANNELS	svolume_sse.c	248;"	d	file:
CHECK_VALIDITY	protocol-esound.c	331;"	d	file:
CHECK_VALIDITY	protocol-native.c	1820;"	d	file:
CHUNK_TO_TEXT	strbuf.c	43;"	d	file:
CLIP	g711.c	161;"	d	file:
COMMENTS	conf-parser.c	40;"	d	file:
CONNECTION	protocol-esound.c	124;"	d	file:
CONNECTION	protocol-simple.c	73;"	d	file:
CONNECTION_MESSAGE_POST_DATA	protocol-esound.c	/^    CONNECTION_MESSAGE_POST_DATA,$/;"	e	enum:__anon14	file:
CONNECTION_MESSAGE_POST_DATA	protocol-simple.c	/^    CONNECTION_MESSAGE_POST_DATA,         \/* data from source output to main loop *\/$/;"	e	enum:__anon10	file:
CONNECTION_MESSAGE_RELEASE	protocol-native.c	/^    CONNECTION_MESSAGE_RELEASE,$/;"	e	enum:__anon47	file:
CONNECTION_MESSAGE_REQUEST_DATA	protocol-esound.c	/^    CONNECTION_MESSAGE_REQUEST_DATA,$/;"	e	enum:__anon14	file:
CONNECTION_MESSAGE_REQUEST_DATA	protocol-simple.c	/^    CONNECTION_MESSAGE_REQUEST_DATA,      \/* data requested from sink input from the main loop *\/$/;"	e	enum:__anon10	file:
CONNECTION_MESSAGE_REVOKE	protocol-native.c	/^    CONNECTION_MESSAGE_REVOKE$/;"	e	enum:__anon47	file:
CONNECTION_MESSAGE_UNLINK_CONNECTION	protocol-esound.c	/^    CONNECTION_MESSAGE_UNLINK_CONNECTION$/;"	e	enum:__anon14	file:
CONNECTION_MESSAGE_UNLINK_CONNECTION	protocol-simple.c	/^    CONNECTION_MESSAGE_UNLINK_CONNECTION    \/* Please drop a aconnection now *\/$/;"	e	enum:__anon10	file:
CONNECT_TIMEOUT	socket-client.c	72;"	d	file:
CONVERT_BUFFER_LENGTH	sink-input.c	45;"	d	file:
COUNTER	aupdate.c	36;"	d	file:
DEFAULT_COOKIE_FILE	protocol-esound.c	69;"	d	file:
DEFAULT_FIXED_LATENCY	sink.c	53;"	d	file:
DEFAULT_FIXED_LATENCY	source.c	47;"	d	file:
DEFAULT_FRAGSIZE_MSEC	protocol-native.c	73;"	d	file:
DEFAULT_PROCESS_MSEC	protocol-native.c	72;"	d	file:
DEFAULT_SINK_LATENCY	protocol-esound.c	77;"	d	file:
DEFAULT_SINK_LATENCY	protocol-simple.c	96;"	d	file:
DEFAULT_SOURCE_LATENCY	protocol-esound.c	78;"	d	file:
DEFAULT_SOURCE_LATENCY	protocol-http.c	75;"	d	file:
DEFAULT_SOURCE_LATENCY	protocol-simple.c	97;"	d	file:
DEFAULT_TLENGTH_MSEC	protocol-native.c	71;"	d	file:
DllMain	dllmain.c	/^BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {$/;"	f
EAFNOSUPPORT	winsock.h	12;"	d
ECONNABORTED	winsock.h	9;"	d
ECONNREFUSED	winsock.h	14;"	d
ECONNRESET	winsock.h	8;"	d
EHOSTUNREACH	winsock.h	15;"	d
EINPROGRESS	winsock.h	11;"	d
ENETRESET	winsock.h	10;"	d
ENV_LOG_BACKTRACE	log.c	62;"	d	file:
ENV_LOG_BACKTRACE_SKIP	log.c	63;"	d	file:
ENV_LOG_COLORS	log.c	57;"	d	file:
ENV_LOG_LEVEL	log.c	56;"	d	file:
ENV_LOG_PRINT_FILE	log.c	59;"	d	file:
ENV_LOG_PRINT_LEVEL	log.c	61;"	d	file:
ENV_LOG_PRINT_META	log.c	60;"	d	file:
ENV_LOG_PRINT_TIME	log.c	58;"	d	file:
ENV_LOG_SYSLOG	log.c	55;"	d	file:
ESD_ADPCM	esound.h	123;"	d
ESD_BITS16	esound.h	112;"	d
ESD_BITS8	esound.h	111;"	d
ESD_BUF_SIZE	esound.h	33;"	d
ESD_CACHING_SAMPLE	esound.h	/^    ESD_CACHING_SAMPLE,         \/* midway through caching a sample *\/$/;"	e	enum:esd_client_state
ESD_CLIENT_STATE_MAX	esound.h	/^    ESD_CLIENT_STATE_MAX        \/* place holder *\/$/;"	e	enum:esd_client_state
ESD_DEFAULT_PORT	esound.h	41;"	d
ESD_DEFAULT_RATE	esound.h	44;"	d
ESD_ENDIAN_KEY	esound.h	50;"	d
ESD_KEY_LEN	esound.h	38;"	d
ESD_LOOP	esound.h	133;"	d
ESD_MASK_BITS	esound.h	110;"	d
ESD_MASK_CHAN	esound.h	115;"	d
ESD_MASK_FUNC	esound.h	126;"	d
ESD_MASK_MODE	esound.h	120;"	d
ESD_MAX_WRITE_SIZE	esound.h	35;"	d
ESD_MONITOR	esound.h	129;"	d
ESD_MONO	esound.h	116;"	d
ESD_NAME_MAX	esound.h	47;"	d
ESD_NEEDS_REQDATA	esound.h	/^    ESD_NEEDS_REQDATA,          \/* more data needed to complere request *\/$/;"	e	enum:esd_client_state
ESD_NEXT_REQUEST	esound.h	/^    ESD_NEXT_REQUEST,           \/* proceed to next request *\/$/;"	e	enum:esd_client_state
ESD_PLAY	esound.h	127;"	d
ESD_PROTO_ALL_INFO	esound.h	/^    ESD_PROTO_ALL_INFO,     \/* get all info (server info, players, samples) *\/$/;"	e	enum:esd_proto
ESD_PROTO_CONNECT	esound.h	/^    ESD_PROTO_CONNECT,      \/* implied on inital client connection *\/$/;"	e	enum:esd_proto
ESD_PROTO_LATENCY	esound.h	/^    ESD_PROTO_LATENCY,      \/* retrieve latency between write()'s and output *\/$/;"	e	enum:esd_proto
ESD_PROTO_LOCK	esound.h	/^    ESD_PROTO_LOCK,         \/* disable "foreign" client connections *\/$/;"	e	enum:esd_proto
ESD_PROTO_MAX	esound.h	/^    ESD_PROTO_MAX           \/* for bounds checking *\/$/;"	e	enum:esd_proto
ESD_PROTO_RESUME	esound.h	/^    ESD_PROTO_RESUME,       \/* reclaim \/dev\/dsp and play sounds again *\/$/;"	e	enum:esd_proto
ESD_PROTO_SAMPLE_CACHE	esound.h	/^    ESD_PROTO_SAMPLE_CACHE, \/* cache a sample in the server *\/$/;"	e	enum:esd_proto
ESD_PROTO_SAMPLE_FREE	esound.h	/^    ESD_PROTO_SAMPLE_FREE,  \/* release a sample in the server *\/$/;"	e	enum:esd_proto
ESD_PROTO_SAMPLE_GETID	esound.h	/^    ESD_PROTO_SAMPLE_GETID, \/* get the ID for an already-cached sample *\/$/;"	e	enum:esd_proto
ESD_PROTO_SAMPLE_KILL	esound.h	/^    ESD_PROTO_SAMPLE_KILL,  \/* stop the looping sample immed. *\/$/;"	e	enum:esd_proto
ESD_PROTO_SAMPLE_LOOP	esound.h	/^    ESD_PROTO_SAMPLE_LOOP,  \/* loop a cached sample, til eoloop *\/$/;"	e	enum:esd_proto
ESD_PROTO_SAMPLE_PAN	esound.h	/^    ESD_PROTO_SAMPLE_PAN,   \/* set default sample panning *\/$/;"	e	enum:esd_proto
ESD_PROTO_SAMPLE_PLAY	esound.h	/^    ESD_PROTO_SAMPLE_PLAY,  \/* play a cached sample *\/$/;"	e	enum:esd_proto
ESD_PROTO_SAMPLE_STOP	esound.h	/^    ESD_PROTO_SAMPLE_STOP,  \/* stop a looping sample when done *\/$/;"	e	enum:esd_proto
ESD_PROTO_SERVER_INFO	esound.h	/^    ESD_PROTO_SERVER_INFO,  \/* get server info (ver, sample rate, format) *\/$/;"	e	enum:esd_proto
ESD_PROTO_STANDBY	esound.h	/^    ESD_PROTO_STANDBY,      \/* release \/dev\/dsp and ignore all data *\/$/;"	e	enum:esd_proto
ESD_PROTO_STANDBY_MODE	esound.h	/^    ESD_PROTO_STANDBY_MODE, \/* see if server is in standby, autostandby, etc *\/$/;"	e	enum:esd_proto
ESD_PROTO_STREAM_FILT	esound.h	/^    ESD_PROTO_STREAM_FILT,  \/* filter mixed buffer output as a stream *\/$/;"	e	enum:esd_proto
ESD_PROTO_STREAM_MON	esound.h	/^    ESD_PROTO_STREAM_MON,   \/* send mixed buffer output as a stream *\/$/;"	e	enum:esd_proto
ESD_PROTO_STREAM_PAN	esound.h	/^    ESD_PROTO_STREAM_PAN,   \/* set stream panning *\/$/;"	e	enum:esd_proto
ESD_PROTO_STREAM_PLAY	esound.h	/^    ESD_PROTO_STREAM_PLAY,  \/* play all following data as a stream *\/$/;"	e	enum:esd_proto
ESD_PROTO_STREAM_REC	esound.h	/^    ESD_PROTO_STREAM_REC,   \/* record data from card as a stream *\/$/;"	e	enum:esd_proto
ESD_PROTO_SUBSCRIBE	esound.h	/^    ESD_PROTO_SUBSCRIBE,    \/* track new and removed players and samples *\/$/;"	e	enum:esd_proto
ESD_PROTO_UNLOCK	esound.h	/^    ESD_PROTO_UNLOCK,       \/* enable "foreign" client connections *\/$/;"	e	enum:esd_proto
ESD_PROTO_UNSUBSCRIBE	esound.h	/^    ESD_PROTO_UNSUBSCRIBE,  \/* stop tracking updates *\/$/;"	e	enum:esd_proto
ESD_RECORD	esound.h	130;"	d
ESD_SAMPLE	esound.h	122;"	d
ESD_STEREO	esound.h	117;"	d
ESD_STOP	esound.h	132;"	d
ESD_STREAM	esound.h	121;"	d
ESD_STREAMING_DATA	esound.h	/^    ESD_STREAMING_DATA,         \/* data from here on is streamed data *\/$/;"	e	enum:esd_client_state
ESD_SWAP_ENDIAN_KEY	esound.h	206;"	d
ESD_UNIX_SOCKET_DIR	esound.h	29;"	d
ESD_UNIX_SOCKET_NAME	esound.h	30;"	d
ESD_VOLUME_BASE	esound.h	52;"	d
ESHUTDOWN	winsock.h	7;"	d
ESM_ERROR	esound.h	/^    ESM_ERROR, ESM_ON_STANDBY, ESM_ON_AUTOSTANDBY, ESM_RUNNING$/;"	e	enum:esd_standby_mode
ESM_ON_AUTOSTANDBY	esound.h	/^    ESM_ERROR, ESM_ON_STANDBY, ESM_ON_AUTOSTANDBY, ESM_RUNNING$/;"	e	enum:esd_standby_mode
ESM_ON_STANDBY	esound.h	/^    ESM_ERROR, ESM_ON_STANDBY, ESM_ON_AUTOSTANDBY, ESM_RUNNING$/;"	e	enum:esd_standby_mode
ESM_RUNNING	esound.h	/^    ESM_ERROR, ESM_ON_STANDBY, ESM_ON_AUTOSTANDBY, ESM_RUNNING$/;"	e	enum:esd_standby_mode
ETIMEDOUT	winsock.h	13;"	d
EWOULDBLOCK	winsock.h	16;"	d
EXTRA_FRAMES	resampler.c	46;"	d	file:
FALSE	macro.h	185;"	d
FELEM	ffmpeg/resample2.c	34;"	d	file:
FELEM	ffmpeg/resample2.c	43;"	d	file:
FELEM	ffmpeg/resample2.c	52;"	d	file:
FELEM2	ffmpeg/resample2.c	35;"	d	file:
FELEM2	ffmpeg/resample2.c	44;"	d	file:
FELEM2	ffmpeg/resample2.c	53;"	d	file:
FELEML	ffmpeg/resample2.c	36;"	d	file:
FELEML	ffmpeg/resample2.c	45;"	d	file:
FELEML	ffmpeg/resample2.c	54;"	d	file:
FELEM_MAX	ffmpeg/resample2.c	37;"	d	file:
FELEM_MAX	ffmpeg/resample2.c	46;"	d	file:
FELEM_MIN	ffmpeg/resample2.c	38;"	d	file:
FELEM_MIN	ffmpeg/resample2.c	47;"	d	file:
FFABS	ffmpeg/avcodec.h	62;"	d
FFMAX	ffmpeg/avcodec.h	65;"	d
FFMIN	ffmpeg/avcodec.h	66;"	d
FFSIGN	ffmpeg/avcodec.h	63;"	d
FILE_STREAM	sound-file-stream.c	68;"	d	file:
FILE_STREAM_MESSAGE_UNLINK	sound-file-stream.c	/^    FILE_STREAM_MESSAGE_UNLINK$/;"	e	enum:__anon17	file:
FILTER_SHIFT	ffmpeg/resample2.c	32;"	d	file:
FILTER_SHIFT	ffmpeg/resample2.c	41;"	d	file:
FILTER_SHIFT	ffmpeg/resample2.c	50;"	d	file:
FLIST_SIZE	flist.c	68;"	d	file:
FRAME_SIZE_MAX_ALLOW	pstream.c	84;"	d	file:
HANDLE_SINGLE_dq	remap_mmx.c	68;"	d	file:
HANDLE_SINGLE_dq	remap_sse.c	68;"	d	file:
HANDLE_SINGLE_wd	remap_mmx.c	75;"	d	file:
HANDLE_SINGLE_wd	remap_sse.c	75;"	d	file:
HAVE_CREDS	creds.h	43;"	d
HAVE_CREDS	creds.h	51;"	d
HAVE_VECTOR	vector.h	28;"	d
HISTORY_MAX	time-smoother.c	35;"	d	file:
HTML_FOOTER	protocol-http.c	70;"	d	file:
HTML_HEADER	protocol-http.c	60;"	d	file:
IFSTATE_FALSE	cli-command.c	/^    IFSTATE_FALSE = 0,$/;"	e	enum:__anon30	file:
IFSTATE_NONE	cli-command.c	/^    IFSTATE_NONE = -1,$/;"	e	enum:__anon30	file:
IFSTATE_TRUE	cli-command.c	/^    IFSTATE_TRUE = 1,$/;"	e	enum:__anon30	file:
INCREASE_BY	dynarray.c	35;"	d	file:
INT16_FROM	sconv-s16be.c	28;"	d	file:
INT16_FROM	sconv-s16le.c	40;"	d	file:
INT16_TO	sconv-s16be.c	29;"	d	file:
INT16_TO	sconv-s16le.c	47;"	d	file:
INT32_FROM	sconv-s16be.c	33;"	d	file:
INT32_FROM	sconv-s16le.c	54;"	d	file:
INT32_TO	sconv-s16be.c	34;"	d	file:
INT32_TO	sconv-s16le.c	61;"	d	file:
ITEM_TO_TEXT	strlist.c	40;"	d	file:
LOAD_SAMPLES	remap_mmx.c	36;"	d	file:
LOAD_SAMPLES	remap_sse.c	36;"	d	file:
LOG_FUNC	log.h	120;"	d
MADV_REMOVE	shm.c	60;"	d	file:
MAKE_GDBM_FILE	database-gdbm.c	35;"	d	file:
MAKE_TDB_CONTEXT	database-tdb.c	40;"	d	file:
MAP_ANONYMOUS	memtrap.c	31;"	d	file:
MAP_ANONYMOUS	shm.c	44;"	d	file:
MAX_BUFFER	cpu-arm.c	39;"	d	file:
MAX_CACHE_SAMPLE_SIZE	protocol-esound.c	75;"	d	file:
MAX_CONNECTIONS	protocol-cli.c	38;"	d	file:
MAX_CONNECTIONS	protocol-esound.c	64;"	d	file:
MAX_CONNECTIONS	protocol-http.c	48;"	d	file:
MAX_CONNECTIONS	protocol-native.c	68;"	d	file:
MAX_CONNECTIONS	protocol-simple.c	50;"	d	file:
MAX_MEMBLOCKQ_LENGTH	protocol-native.c	70;"	d	file:
MAX_MIX_CHANNELS	sink.c	49;"	d	file:
MAX_SHM_SIZE	shm.c	64;"	d	file:
MAX_TAG_SIZE	tagstruct.c	43;"	d	file:
MEMBLOCKQ_MAXLENGTH	sink-input.c	44;"	d	file:
MEMBLOCKQ_MAXLENGTH	sound-file-stream.c	48;"	d	file:
MEMBLOCKQ_MAXLENGTH	source-output.c	42;"	d	file:
MEMBLOCKQ_STREAM	play-memblockq.c	51;"	d	file:
MEMBLOCKQ_STREAM_MESSAGE_UNLINK	play-memblockq.c	/^    MEMBLOCKQ_STREAM_MESSAGE_UNLINK,$/;"	e	enum:__anon1	file:
META_ELSE	cli-command.c	70;"	d	file:
META_ENDIF	cli-command.c	71;"	d	file:
META_FAIL	cli-command.c	67;"	d	file:
META_IFEXISTS	cli-command.c	69;"	d	file:
META_INCLUDE	cli-command.c	66;"	d	file:
META_NOFAIL	cli-command.c	68;"	d	file:
MIME_CSS	protocol-http.c	58;"	d	file:
MIME_HTML	protocol-http.c	56;"	d	file:
MIME_TEXT	protocol-http.c	57;"	d	file:
MIX_BUFFER_LENGTH	sink.c	50;"	d	file:
MOD_ADD	svolume_mmx.c	72;"	d	file:
MOD_ADD	svolume_sse.c	53;"	d	file:
MOD_INC	svolume_arm.c	40;"	d	file:
MONO_TO_STEREO	remap_mmx.c	83;"	d	file:
MONO_TO_STEREO	remap_sse.c	83;"	d	file:
MSB	aupdate.c	34;"	d	file:
MSG_NOSIGNAL	core-util.c	126;"	d	file:
NBUCKETS	hashmap.c	37;"	d	file:
NBUCKETS	idxset.c	38;"	d	file:
NSEGS	g711.c	48;"	d	file:
N_EXTRA_SCAN	flist.c	69;"	d	file:
ON_FRONT	resampler.c	/^    ON_FRONT,$/;"	e	enum:__anon42	file:
ON_OTHER	resampler.c	/^    ON_OTHER$/;"	e	enum:__anon42	file:
ON_REAR	resampler.c	/^    ON_REAR,$/;"	e	enum:__anon42	file:
ON_SIDE	resampler.c	/^    ON_SIDE,$/;"	e	enum:__anon42	file:
OUTPUT_STREAM	protocol-native.c	108;"	d	file:
O_BINARY	authkey.c	70;"	d	file:
O_NOCTTY	authkey.c	74;"	d	file:
PADDING	svolume_arm.c	131;"	d	file:
PADDING	svolume_mmx.c	244;"	d	file:
PADDING	svolume_sse.c	251;"	d	file:
PA_ALIGN	macro.h	/^static inline size_t PA_ALIGN(size_t l) {$/;"	f
PA_ALIGN_PTR	macro.h	/^static inline void* PA_ALIGN_PTR(const void *p) {$/;"	f
PA_ASYNCQ_CELLS	asyncq.c	72;"	d	file:
PA_ATOMIC_INIT	atomic.h	120;"	d
PA_ATOMIC_INIT	atomic.h	193;"	d
PA_ATOMIC_INIT	atomic.h	269;"	d
PA_ATOMIC_INIT	atomic.h	415;"	d
PA_ATOMIC_INIT	atomic.h	498;"	d
PA_ATOMIC_INIT	atomic.h	53;"	d
PA_ATOMIC_PTR_INIT	atomic.h	166;"	d
PA_ATOMIC_PTR_INIT	atomic.h	239;"	d
PA_ATOMIC_PTR_INIT	atomic.h	355;"	d
PA_ATOMIC_PTR_INIT	atomic.h	468;"	d
PA_ATOMIC_PTR_INIT	atomic.h	532;"	d
PA_ATOMIC_PTR_INIT	atomic.h	94;"	d
PA_BITSET_ELEMENTS	bitset.h	28;"	d
PA_BITSET_SIZE	bitset.h	29;"	d
PA_CARD_PROFILE_DATA	card.h	48;"	d
PA_CHANNEL_POSITION_MASK_ALL	sample-util.h	151;"	d
PA_CHANNEL_POSITION_MASK_CENTER	sample-util.h	112;"	d
PA_CHANNEL_POSITION_MASK_FRONT	sample-util.h	119;"	d
PA_CHANNEL_POSITION_MASK_LEFT	sample-util.h	96;"	d
PA_CHANNEL_POSITION_MASK_REAR	sample-util.h	129;"	d
PA_CHANNEL_POSITION_MASK_RIGHT	sample-util.h	104;"	d
PA_CHANNEL_POSITION_MASK_SIDE_OR_TOP_CENTER	sample-util.h	137;"	d
PA_CHANNEL_POSITION_MASK_TOP	sample-util.h	142;"	d
PA_CLAMP	macro.h	117;"	d
PA_CLAMP	macro.h	125;"	d
PA_CLAMP_UNLIKELY	macro.h	129;"	d
PA_CLAMP_UNLIKELY	macro.h	137;"	d
PA_CLIP_SUB	macro.h	167;"	d
PA_CLIP_SUB	macro.h	174;"	d
PA_COMMAND_ADD_AUTOLOAD___OBSOLETE	native-common.h	/^    PA_COMMAND_ADD_AUTOLOAD___OBSOLETE,$/;"	e	enum:__anon29
PA_COMMAND_AUTH	native-common.h	/^    PA_COMMAND_AUTH,$/;"	e	enum:__anon29
PA_COMMAND_CLIENT_EVENT	native-common.h	/^    PA_COMMAND_CLIENT_EVENT,$/;"	e	enum:__anon29
PA_COMMAND_CORK_PLAYBACK_STREAM	native-common.h	/^    PA_COMMAND_CORK_PLAYBACK_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_CORK_RECORD_STREAM	native-common.h	/^    PA_COMMAND_CORK_RECORD_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_CREATE_PLAYBACK_STREAM	native-common.h	/^    PA_COMMAND_CREATE_PLAYBACK_STREAM,        \/* Payload changed in v9, v12 (0.9.0, 0.9.8) *\/$/;"	e	enum:__anon29
PA_COMMAND_CREATE_RECORD_STREAM	native-common.h	/^    PA_COMMAND_CREATE_RECORD_STREAM,          \/* Payload changed in v9, v12 (0.9.0, 0.9.8) *\/$/;"	e	enum:__anon29
PA_COMMAND_CREATE_UPLOAD_STREAM	native-common.h	/^    PA_COMMAND_CREATE_UPLOAD_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_DELETE_PLAYBACK_STREAM	native-common.h	/^    PA_COMMAND_DELETE_PLAYBACK_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_DELETE_RECORD_STREAM	native-common.h	/^    PA_COMMAND_DELETE_RECORD_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_DELETE_UPLOAD_STREAM	native-common.h	/^    PA_COMMAND_DELETE_UPLOAD_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_DRAIN_PLAYBACK_STREAM	native-common.h	/^    PA_COMMAND_DRAIN_PLAYBACK_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_ERROR	native-common.h	/^    PA_COMMAND_ERROR,$/;"	e	enum:__anon29
PA_COMMAND_EXIT	native-common.h	/^    PA_COMMAND_EXIT,$/;"	e	enum:__anon29
PA_COMMAND_EXTENSION	native-common.h	/^    PA_COMMAND_EXTENSION,$/;"	e	enum:__anon29
PA_COMMAND_FINISH_UPLOAD_STREAM	native-common.h	/^    PA_COMMAND_FINISH_UPLOAD_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_FLUSH_PLAYBACK_STREAM	native-common.h	/^    PA_COMMAND_FLUSH_PLAYBACK_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_FLUSH_RECORD_STREAM	native-common.h	/^    PA_COMMAND_FLUSH_RECORD_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_GET_AUTOLOAD_INFO_LIST___OBSOLETE	native-common.h	/^    PA_COMMAND_GET_AUTOLOAD_INFO_LIST___OBSOLETE,$/;"	e	enum:__anon29
PA_COMMAND_GET_AUTOLOAD_INFO___OBSOLETE	native-common.h	/^    PA_COMMAND_GET_AUTOLOAD_INFO___OBSOLETE,$/;"	e	enum:__anon29
PA_COMMAND_GET_CARD_INFO	native-common.h	/^    PA_COMMAND_GET_CARD_INFO,$/;"	e	enum:__anon29
PA_COMMAND_GET_CARD_INFO_LIST	native-common.h	/^    PA_COMMAND_GET_CARD_INFO_LIST,$/;"	e	enum:__anon29
PA_COMMAND_GET_CLIENT_INFO	native-common.h	/^    PA_COMMAND_GET_CLIENT_INFO,$/;"	e	enum:__anon29
PA_COMMAND_GET_CLIENT_INFO_LIST	native-common.h	/^    PA_COMMAND_GET_CLIENT_INFO_LIST,$/;"	e	enum:__anon29
PA_COMMAND_GET_MODULE_INFO	native-common.h	/^    PA_COMMAND_GET_MODULE_INFO,$/;"	e	enum:__anon29
PA_COMMAND_GET_MODULE_INFO_LIST	native-common.h	/^    PA_COMMAND_GET_MODULE_INFO_LIST,$/;"	e	enum:__anon29
PA_COMMAND_GET_PLAYBACK_LATENCY	native-common.h	/^    PA_COMMAND_GET_PLAYBACK_LATENCY,$/;"	e	enum:__anon29
PA_COMMAND_GET_RECORD_LATENCY	native-common.h	/^    PA_COMMAND_GET_RECORD_LATENCY,$/;"	e	enum:__anon29
PA_COMMAND_GET_SAMPLE_INFO	native-common.h	/^    PA_COMMAND_GET_SAMPLE_INFO,$/;"	e	enum:__anon29
PA_COMMAND_GET_SAMPLE_INFO_LIST	native-common.h	/^    PA_COMMAND_GET_SAMPLE_INFO_LIST,$/;"	e	enum:__anon29
PA_COMMAND_GET_SERVER_INFO	native-common.h	/^    PA_COMMAND_GET_SERVER_INFO,$/;"	e	enum:__anon29
PA_COMMAND_GET_SINK_INFO	native-common.h	/^    PA_COMMAND_GET_SINK_INFO,$/;"	e	enum:__anon29
PA_COMMAND_GET_SINK_INFO_LIST	native-common.h	/^    PA_COMMAND_GET_SINK_INFO_LIST,$/;"	e	enum:__anon29
PA_COMMAND_GET_SINK_INPUT_INFO	native-common.h	/^    PA_COMMAND_GET_SINK_INPUT_INFO,          \/* Payload changed in v11 (0.9.7) *\/$/;"	e	enum:__anon29
PA_COMMAND_GET_SINK_INPUT_INFO_LIST	native-common.h	/^    PA_COMMAND_GET_SINK_INPUT_INFO_LIST,     \/* Payload changed in v11 (0.9.7) *\/$/;"	e	enum:__anon29
PA_COMMAND_GET_SOURCE_INFO	native-common.h	/^    PA_COMMAND_GET_SOURCE_INFO,$/;"	e	enum:__anon29
PA_COMMAND_GET_SOURCE_INFO_LIST	native-common.h	/^    PA_COMMAND_GET_SOURCE_INFO_LIST,$/;"	e	enum:__anon29
PA_COMMAND_GET_SOURCE_OUTPUT_INFO	native-common.h	/^    PA_COMMAND_GET_SOURCE_OUTPUT_INFO,$/;"	e	enum:__anon29
PA_COMMAND_GET_SOURCE_OUTPUT_INFO_LIST	native-common.h	/^    PA_COMMAND_GET_SOURCE_OUTPUT_INFO_LIST,$/;"	e	enum:__anon29
PA_COMMAND_KILL_CLIENT	native-common.h	/^    PA_COMMAND_KILL_CLIENT,$/;"	e	enum:__anon29
PA_COMMAND_KILL_SINK_INPUT	native-common.h	/^    PA_COMMAND_KILL_SINK_INPUT,$/;"	e	enum:__anon29
PA_COMMAND_KILL_SOURCE_OUTPUT	native-common.h	/^    PA_COMMAND_KILL_SOURCE_OUTPUT,$/;"	e	enum:__anon29
PA_COMMAND_LOAD_MODULE	native-common.h	/^    PA_COMMAND_LOAD_MODULE,$/;"	e	enum:__anon29
PA_COMMAND_LOOKUP_SINK	native-common.h	/^    PA_COMMAND_LOOKUP_SINK,$/;"	e	enum:__anon29
PA_COMMAND_LOOKUP_SOURCE	native-common.h	/^    PA_COMMAND_LOOKUP_SOURCE,$/;"	e	enum:__anon29
PA_COMMAND_MAX	native-common.h	/^    PA_COMMAND_MAX$/;"	e	enum:__anon29
PA_COMMAND_MOVE_SINK_INPUT	native-common.h	/^    PA_COMMAND_MOVE_SINK_INPUT,$/;"	e	enum:__anon29
PA_COMMAND_MOVE_SOURCE_OUTPUT	native-common.h	/^    PA_COMMAND_MOVE_SOURCE_OUTPUT,$/;"	e	enum:__anon29
PA_COMMAND_OVERFLOW	native-common.h	/^    PA_COMMAND_OVERFLOW,$/;"	e	enum:__anon29
PA_COMMAND_PLAYBACK_BUFFER_ATTR_CHANGED	native-common.h	/^    PA_COMMAND_PLAYBACK_BUFFER_ATTR_CHANGED,$/;"	e	enum:__anon29
PA_COMMAND_PLAYBACK_STREAM_EVENT	native-common.h	/^    PA_COMMAND_PLAYBACK_STREAM_EVENT,$/;"	e	enum:__anon29
PA_COMMAND_PLAYBACK_STREAM_KILLED	native-common.h	/^    PA_COMMAND_PLAYBACK_STREAM_KILLED,$/;"	e	enum:__anon29
PA_COMMAND_PLAYBACK_STREAM_MOVED	native-common.h	/^    PA_COMMAND_PLAYBACK_STREAM_MOVED,$/;"	e	enum:__anon29
PA_COMMAND_PLAYBACK_STREAM_SUSPENDED	native-common.h	/^    PA_COMMAND_PLAYBACK_STREAM_SUSPENDED,$/;"	e	enum:__anon29
PA_COMMAND_PLAY_SAMPLE	native-common.h	/^    PA_COMMAND_PLAY_SAMPLE,$/;"	e	enum:__anon29
PA_COMMAND_PREBUF_PLAYBACK_STREAM	native-common.h	/^    PA_COMMAND_PREBUF_PLAYBACK_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_RECORD_BUFFER_ATTR_CHANGED	native-common.h	/^    PA_COMMAND_RECORD_BUFFER_ATTR_CHANGED,$/;"	e	enum:__anon29
PA_COMMAND_RECORD_STREAM_EVENT	native-common.h	/^    PA_COMMAND_RECORD_STREAM_EVENT,$/;"	e	enum:__anon29
PA_COMMAND_RECORD_STREAM_KILLED	native-common.h	/^    PA_COMMAND_RECORD_STREAM_KILLED,$/;"	e	enum:__anon29
PA_COMMAND_RECORD_STREAM_MOVED	native-common.h	/^    PA_COMMAND_RECORD_STREAM_MOVED,$/;"	e	enum:__anon29
PA_COMMAND_RECORD_STREAM_SUSPENDED	native-common.h	/^    PA_COMMAND_RECORD_STREAM_SUSPENDED,$/;"	e	enum:__anon29
PA_COMMAND_REMOVE_AUTOLOAD___OBSOLETE	native-common.h	/^    PA_COMMAND_REMOVE_AUTOLOAD___OBSOLETE,$/;"	e	enum:__anon29
PA_COMMAND_REMOVE_CLIENT_PROPLIST	native-common.h	/^    PA_COMMAND_REMOVE_CLIENT_PROPLIST,$/;"	e	enum:__anon29
PA_COMMAND_REMOVE_PLAYBACK_STREAM_PROPLIST	native-common.h	/^    PA_COMMAND_REMOVE_PLAYBACK_STREAM_PROPLIST,$/;"	e	enum:__anon29
PA_COMMAND_REMOVE_RECORD_STREAM_PROPLIST	native-common.h	/^    PA_COMMAND_REMOVE_RECORD_STREAM_PROPLIST,$/;"	e	enum:__anon29
PA_COMMAND_REMOVE_SAMPLE	native-common.h	/^    PA_COMMAND_REMOVE_SAMPLE,$/;"	e	enum:__anon29
PA_COMMAND_REPLY	native-common.h	/^    PA_COMMAND_REPLY,$/;"	e	enum:__anon29
PA_COMMAND_REQUEST	native-common.h	/^    PA_COMMAND_REQUEST,$/;"	e	enum:__anon29
PA_COMMAND_SET_CARD_PROFILE	native-common.h	/^    PA_COMMAND_SET_CARD_PROFILE,$/;"	e	enum:__anon29
PA_COMMAND_SET_CLIENT_NAME	native-common.h	/^    PA_COMMAND_SET_CLIENT_NAME,$/;"	e	enum:__anon29
PA_COMMAND_SET_DEFAULT_SINK	native-common.h	/^    PA_COMMAND_SET_DEFAULT_SINK,$/;"	e	enum:__anon29
PA_COMMAND_SET_DEFAULT_SOURCE	native-common.h	/^    PA_COMMAND_SET_DEFAULT_SOURCE,$/;"	e	enum:__anon29
PA_COMMAND_SET_PLAYBACK_STREAM_BUFFER_ATTR	native-common.h	/^    PA_COMMAND_SET_PLAYBACK_STREAM_BUFFER_ATTR,$/;"	e	enum:__anon29
PA_COMMAND_SET_PLAYBACK_STREAM_NAME	native-common.h	/^    PA_COMMAND_SET_PLAYBACK_STREAM_NAME,$/;"	e	enum:__anon29
PA_COMMAND_SET_RECORD_STREAM_BUFFER_ATTR	native-common.h	/^    PA_COMMAND_SET_RECORD_STREAM_BUFFER_ATTR,$/;"	e	enum:__anon29
PA_COMMAND_SET_RECORD_STREAM_NAME	native-common.h	/^    PA_COMMAND_SET_RECORD_STREAM_NAME,$/;"	e	enum:__anon29
PA_COMMAND_SET_SINK_INPUT_MUTE	native-common.h	/^    PA_COMMAND_SET_SINK_INPUT_MUTE,$/;"	e	enum:__anon29
PA_COMMAND_SET_SINK_INPUT_VOLUME	native-common.h	/^    PA_COMMAND_SET_SINK_INPUT_VOLUME,$/;"	e	enum:__anon29
PA_COMMAND_SET_SINK_MUTE	native-common.h	/^    PA_COMMAND_SET_SINK_MUTE,$/;"	e	enum:__anon29
PA_COMMAND_SET_SINK_PORT	native-common.h	/^    PA_COMMAND_SET_SINK_PORT,$/;"	e	enum:__anon29
PA_COMMAND_SET_SINK_VOLUME	native-common.h	/^    PA_COMMAND_SET_SINK_VOLUME,$/;"	e	enum:__anon29
PA_COMMAND_SET_SOURCE_MUTE	native-common.h	/^    PA_COMMAND_SET_SOURCE_MUTE,$/;"	e	enum:__anon29
PA_COMMAND_SET_SOURCE_PORT	native-common.h	/^    PA_COMMAND_SET_SOURCE_PORT,$/;"	e	enum:__anon29
PA_COMMAND_SET_SOURCE_VOLUME	native-common.h	/^    PA_COMMAND_SET_SOURCE_VOLUME,$/;"	e	enum:__anon29
PA_COMMAND_STARTED	native-common.h	/^    PA_COMMAND_STARTED,$/;"	e	enum:__anon29
PA_COMMAND_STAT	native-common.h	/^    PA_COMMAND_STAT,$/;"	e	enum:__anon29
PA_COMMAND_SUBSCRIBE	native-common.h	/^    PA_COMMAND_SUBSCRIBE,$/;"	e	enum:__anon29
PA_COMMAND_SUBSCRIBE_EVENT	native-common.h	/^    PA_COMMAND_SUBSCRIBE_EVENT,$/;"	e	enum:__anon29
PA_COMMAND_SUSPEND_SINK	native-common.h	/^    PA_COMMAND_SUSPEND_SINK,$/;"	e	enum:__anon29
PA_COMMAND_SUSPEND_SOURCE	native-common.h	/^    PA_COMMAND_SUSPEND_SOURCE,$/;"	e	enum:__anon29
PA_COMMAND_TIMEOUT	native-common.h	/^    PA_COMMAND_TIMEOUT, \/* pseudo command *\/$/;"	e	enum:__anon29
PA_COMMAND_TRIGGER_PLAYBACK_STREAM	native-common.h	/^    PA_COMMAND_TRIGGER_PLAYBACK_STREAM,$/;"	e	enum:__anon29
PA_COMMAND_UNDERFLOW	native-common.h	/^    PA_COMMAND_UNDERFLOW,$/;"	e	enum:__anon29
PA_COMMAND_UNLOAD_MODULE	native-common.h	/^    PA_COMMAND_UNLOAD_MODULE,$/;"	e	enum:__anon29
PA_COMMAND_UPDATE_CLIENT_PROPLIST	native-common.h	/^    PA_COMMAND_UPDATE_CLIENT_PROPLIST,$/;"	e	enum:__anon29
PA_COMMAND_UPDATE_PLAYBACK_STREAM_PROPLIST	native-common.h	/^    PA_COMMAND_UPDATE_PLAYBACK_STREAM_PROPLIST,$/;"	e	enum:__anon29
PA_COMMAND_UPDATE_PLAYBACK_STREAM_SAMPLE_RATE	native-common.h	/^    PA_COMMAND_UPDATE_PLAYBACK_STREAM_SAMPLE_RATE,$/;"	e	enum:__anon29
PA_COMMAND_UPDATE_RECORD_STREAM_PROPLIST	native-common.h	/^    PA_COMMAND_UPDATE_RECORD_STREAM_PROPLIST,$/;"	e	enum:__anon29
PA_COMMAND_UPDATE_RECORD_STREAM_SAMPLE_RATE	native-common.h	/^    PA_COMMAND_UPDATE_RECORD_STREAM_SAMPLE_RATE,$/;"	e	enum:__anon29
PA_CORE	core.h	169;"	d
PA_CORE_HOOK_CARD_NEW	core.h	/^    PA_CORE_HOOK_CARD_NEW,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_CARD_PUT	core.h	/^    PA_CORE_HOOK_CARD_PUT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_CARD_UNLINK	core.h	/^    PA_CORE_HOOK_CARD_UNLINK,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_CLIENT_NEW	core.h	/^    PA_CORE_HOOK_CLIENT_NEW,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_CLIENT_PROPLIST_CHANGED	core.h	/^    PA_CORE_HOOK_CLIENT_PROPLIST_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_CLIENT_PUT	core.h	/^    PA_CORE_HOOK_CLIENT_PUT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_CLIENT_SEND_EVENT	core.h	/^    PA_CORE_HOOK_CLIENT_SEND_EVENT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_CLIENT_UNLINK	core.h	/^    PA_CORE_HOOK_CLIENT_UNLINK,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_MAX	core.h	/^    PA_CORE_HOOK_MAX$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_FIXATE	core.h	/^    PA_CORE_HOOK_SINK_FIXATE,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_FIXATE	core.h	/^    PA_CORE_HOOK_SINK_INPUT_FIXATE,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_MOVE_FAIL	core.h	/^    PA_CORE_HOOK_SINK_INPUT_MOVE_FAIL,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_MOVE_FINISH	core.h	/^    PA_CORE_HOOK_SINK_INPUT_MOVE_FINISH,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_MOVE_START	core.h	/^    PA_CORE_HOOK_SINK_INPUT_MOVE_START,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_NEW	core.h	/^    PA_CORE_HOOK_SINK_INPUT_NEW,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_PROPLIST_CHANGED	core.h	/^    PA_CORE_HOOK_SINK_INPUT_PROPLIST_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_PUT	core.h	/^    PA_CORE_HOOK_SINK_INPUT_PUT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_SEND_EVENT	core.h	/^    PA_CORE_HOOK_SINK_INPUT_SEND_EVENT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_STATE_CHANGED	core.h	/^    PA_CORE_HOOK_SINK_INPUT_STATE_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_UNLINK	core.h	/^    PA_CORE_HOOK_SINK_INPUT_UNLINK,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_INPUT_UNLINK_POST	core.h	/^    PA_CORE_HOOK_SINK_INPUT_UNLINK_POST,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_NEW	core.h	/^    PA_CORE_HOOK_SINK_NEW,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_PROPLIST_CHANGED	core.h	/^    PA_CORE_HOOK_SINK_PROPLIST_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_PUT	core.h	/^    PA_CORE_HOOK_SINK_PUT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_STATE_CHANGED	core.h	/^    PA_CORE_HOOK_SINK_STATE_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_UNLINK	core.h	/^    PA_CORE_HOOK_SINK_UNLINK,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SINK_UNLINK_POST	core.h	/^    PA_CORE_HOOK_SINK_UNLINK_POST,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_FIXATE	core.h	/^    PA_CORE_HOOK_SOURCE_FIXATE,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_NEW	core.h	/^    PA_CORE_HOOK_SOURCE_NEW,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_FIXATE	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_FIXATE,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_MOVE_FAIL	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_MOVE_FAIL,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_MOVE_FINISH	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_MOVE_FINISH,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_MOVE_START	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_MOVE_START,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_NEW	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_NEW,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_PROPLIST_CHANGED	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_PROPLIST_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_PUT	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_PUT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_SEND_EVENT	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_SEND_EVENT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_STATE_CHANGED	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_STATE_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_UNLINK	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_UNLINK,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_OUTPUT_UNLINK_POST	core.h	/^    PA_CORE_HOOK_SOURCE_OUTPUT_UNLINK_POST,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_PROPLIST_CHANGED	core.h	/^    PA_CORE_HOOK_SOURCE_PROPLIST_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_PUT	core.h	/^    PA_CORE_HOOK_SOURCE_PUT,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_STATE_CHANGED	core.h	/^    PA_CORE_HOOK_SOURCE_STATE_CHANGED,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_UNLINK	core.h	/^    PA_CORE_HOOK_SOURCE_UNLINK,$/;"	e	enum:pa_core_hook
PA_CORE_HOOK_SOURCE_UNLINK_POST	core.h	/^    PA_CORE_HOOK_SOURCE_UNLINK_POST,$/;"	e	enum:pa_core_hook
PA_CORE_MESSAGE_MAX	core.h	/^    PA_CORE_MESSAGE_MAX$/;"	e	enum:__anon49
PA_CORE_MESSAGE_UNLOAD_MODULE	core.h	/^    PA_CORE_MESSAGE_UNLOAD_MODULE,$/;"	e	enum:__anon49
PA_CORE_RUNNING	core.h	/^    PA_CORE_RUNNING,$/;"	e	enum:pa_core_state
PA_CORE_SHUTDOWN	core.h	/^    PA_CORE_SHUTDOWN$/;"	e	enum:pa_core_state
PA_CORE_STARTUP	core.h	/^    PA_CORE_STARTUP,$/;"	e	enum:pa_core_state
PA_CPU_ARM_EDSP	cpu-arm.h	/^    PA_CPU_ARM_EDSP     = (1 << 3),$/;"	e	enum:pa_cpu_arm_flag
PA_CPU_ARM_NEON	cpu-arm.h	/^    PA_CPU_ARM_NEON     = (1 << 4),$/;"	e	enum:pa_cpu_arm_flag
PA_CPU_ARM_V6	cpu-arm.h	/^    PA_CPU_ARM_V6       = (1 << 0),$/;"	e	enum:pa_cpu_arm_flag
PA_CPU_ARM_V7	cpu-arm.h	/^    PA_CPU_ARM_V7       = (1 << 1),$/;"	e	enum:pa_cpu_arm_flag
PA_CPU_ARM_VFP	cpu-arm.h	/^    PA_CPU_ARM_VFP      = (1 << 2),$/;"	e	enum:pa_cpu_arm_flag
PA_CPU_ARM_VFPV3	cpu-arm.h	/^    PA_CPU_ARM_VFPV3    = (1 << 5)$/;"	e	enum:pa_cpu_arm_flag
PA_CPU_X86_3DNOW	cpu-x86.h	/^    PA_CPU_X86_3DNOW     = (1 << 8),$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_3DNOWEXT	cpu-x86.h	/^    PA_CPU_X86_3DNOWEXT  = (1 << 9)$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_MMX	cpu-x86.h	/^    PA_CPU_X86_MMX       = (1 << 0),$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_MMXEXT	cpu-x86.h	/^    PA_CPU_X86_MMXEXT    = (1 << 1),$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_SSE	cpu-x86.h	/^    PA_CPU_X86_SSE       = (1 << 2),$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_SSE2	cpu-x86.h	/^    PA_CPU_X86_SSE2      = (1 << 3),$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_SSE3	cpu-x86.h	/^    PA_CPU_X86_SSE3      = (1 << 4),$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_SSE4_1	cpu-x86.h	/^    PA_CPU_X86_SSE4_1    = (1 << 6),$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_SSE4_2	cpu-x86.h	/^    PA_CPU_X86_SSE4_2    = (1 << 7),$/;"	e	enum:pa_cpu_x86_flag
PA_CPU_X86_SSSE3	cpu-x86.h	/^    PA_CPU_X86_SSSE3     = (1 << 5),$/;"	e	enum:pa_cpu_x86_flag
PA_DEBUG_TRAP	macro.h	299;"	d
PA_DEBUG_TRAP	macro.h	301;"	d
PA_DECLARE_ALIGNED	macro.h	84;"	d
PA_DECLARE_ALIGNED	macro.h	86;"	d
PA_DECLARE_CLASS_COMMON	object.h	73;"	d
PA_DECLARE_PUBLIC_CLASS	object.h	96;"	d
PA_DEFINE_PRIVATE_CLASS	object.h	110;"	d
PA_DEFINE_PUBLIC_CLASS	object.h	101;"	d
PA_DEFINE_RATELIMIT	ratelimit.h	35;"	d
PA_DEVICE_PORT_DATA	sink.h	63;"	d
PA_ELEMENTSOF	macro.h	81;"	d
PA_ENVELOPE_POINTS_MAX	envelope.h	30;"	d
PA_FLAG_SEEKMASK	pstream.c	60;"	d	file:
PA_FLAG_SHMDATA	pstream.c	56;"	d	file:
PA_FLAG_SHMMASK	pstream.c	59;"	d	file:
PA_FLAG_SHMRELEASE	pstream.c	57;"	d	file:
PA_FLAG_SHMREVOKE	pstream.c	58;"	d	file:
PA_FLIST_CELLS	flist.c	87;"	d	file:
PA_FLOAT32_SWAP	endianmacros.h	/^static inline float PA_FLOAT32_SWAP(float x) {$/;"	f
PA_FLOAT32_TO_BE	endianmacros.h	119;"	d
PA_FLOAT32_TO_BE	endianmacros.h	152;"	d
PA_FLOAT32_TO_LE	endianmacros.h	118;"	d
PA_FLOAT32_TO_LE	endianmacros.h	151;"	d
PA_FLOAT_VECTOR_MAKE	vector.h	54;"	d
PA_FLOAT_VECTOR_SIZE	vector.h	49;"	d
PA_GCC_PACKED	shm.c	/^} PA_GCC_PACKED;$/;"	v	typeref:struct:shm_marker
PA_HASHMAP_FOREACH	hashmap.h	76;"	d
PA_HASHMAP_FOREACH_BACKWARDS	hashmap.h	80;"	d
PA_HOOK_CANCEL	hook-list.h	/^    PA_HOOK_CANCEL = -1$/;"	e	enum:pa_hook_result
PA_HOOK_EARLY	hook-list.h	/^    PA_HOOK_EARLY = -100,$/;"	e	enum:pa_hook_priority
PA_HOOK_LATE	hook-list.h	/^    PA_HOOK_LATE = 100$/;"	e	enum:pa_hook_priority
PA_HOOK_NORMAL	hook-list.h	/^    PA_HOOK_NORMAL = 0,$/;"	e	enum:pa_hook_priority
PA_HOOK_OK	hook-list.h	/^    PA_HOOK_OK = 0,$/;"	e	enum:pa_hook_result
PA_HOOK_STOP	hook-list.h	/^    PA_HOOK_STOP = 1,$/;"	e	enum:pa_hook_result
PA_HRTIMER_THRESHOLD_USEC	core-rtclock.h	39;"	d
PA_IDXSET_FOREACH	idxset.h	110;"	d
PA_IDXSET_INVALID	idxset.h	36;"	d
PA_INIT_RATELIMIT	ratelimit.h	44;"	d
PA_INT16_FROM_BE	endianmacros.h	128;"	d
PA_INT16_FROM_BE	endianmacros.h	95;"	d
PA_INT16_FROM_LE	endianmacros.h	127;"	d
PA_INT16_FROM_LE	endianmacros.h	94;"	d
PA_INT16_SWAP	endianmacros.h	37;"	d
PA_INT16_SWAP	endianmacros.h	42;"	d
PA_INT16_TO_BE	endianmacros.h	131;"	d
PA_INT16_TO_BE	endianmacros.h	98;"	d
PA_INT16_TO_LE	endianmacros.h	130;"	d
PA_INT16_TO_LE	endianmacros.h	97;"	d
PA_INT16_VECTOR_MAKE	vector.h	52;"	d
PA_INT16_VECTOR_SIZE	vector.h	47;"	d
PA_INT32_FROM_BE	endianmacros.h	107;"	d
PA_INT32_FROM_BE	endianmacros.h	140;"	d
PA_INT32_FROM_LE	endianmacros.h	106;"	d
PA_INT32_FROM_LE	endianmacros.h	139;"	d
PA_INT32_SWAP	endianmacros.h	39;"	d
PA_INT32_SWAP	endianmacros.h	44;"	d
PA_INT32_TO_BE	endianmacros.h	110;"	d
PA_INT32_TO_BE	endianmacros.h	143;"	d
PA_INT32_TO_LE	endianmacros.h	109;"	d
PA_INT32_TO_LE	endianmacros.h	142;"	d
PA_INT32_TO_PTR	macro.h	275;"	d
PA_INT32_VECTOR_MAKE	vector.h	53;"	d
PA_INT32_VECTOR_SIZE	vector.h	48;"	d
PA_INT_TO_PTR	macro.h	272;"	d
PA_INT_TYPE_MAX	macro.h	309;"	d
PA_INT_TYPE_MIN	macro.h	314;"	d
PA_INT_TYPE_SIGNED	macro.h	307;"	d
PA_LIKELY	macro.h	42;"	d
PA_LIKELY	macro.h	45;"	d
PA_LLIST_FIELDS	llist.h	35;"	d
PA_LLIST_FIND_HEAD	llist.h	80;"	d
PA_LLIST_FOREACH	llist.h	107;"	d
PA_LLIST_FOREACH_SAFE	llist.h	110;"	d
PA_LLIST_HEAD	llist.h	31;"	d
PA_LLIST_HEAD_INIT	llist.h	39;"	d
PA_LLIST_INIT	llist.h	45;"	d
PA_LLIST_INSERT_AFTER	llist.h	90;"	d
PA_LLIST_PREPEND	llist.h	53;"	d
PA_LLIST_REMOVE	llist.h	64;"	d
PA_LOG_COLORS	log.h	/^    PA_LOG_COLORS      = 0x01, \/* Show colorful output *\/$/;"	e	enum:pa_log_flags
PA_LOG_DEBUG	log.h	/^    PA_LOG_DEBUG  = 4,    \/* debug message *\/$/;"	e	enum:pa_log_level
PA_LOG_ERROR	log.h	/^    PA_LOG_ERROR  = 0,    \/* Error messages *\/$/;"	e	enum:pa_log_level
PA_LOG_INFO	log.h	/^    PA_LOG_INFO   = 3,    \/* Info messages *\/$/;"	e	enum:pa_log_level
PA_LOG_LEVEL_MAX	log.h	/^    PA_LOG_LEVEL_MAX$/;"	e	enum:pa_log_level
PA_LOG_NOTICE	log.h	/^    PA_LOG_NOTICE = 2,    \/* Notice messages *\/$/;"	e	enum:pa_log_level
PA_LOG_NULL	log.h	/^    PA_LOG_NULL,    \/* to \/dev\/null *\/$/;"	e	enum:pa_log_target
PA_LOG_PRINT_FILE	log.h	/^    PA_LOG_PRINT_FILE  = 0x04, \/* Show source file *\/$/;"	e	enum:pa_log_flags
PA_LOG_PRINT_LEVEL	log.h	/^    PA_LOG_PRINT_LEVEL = 0x10, \/* Show log level prefix *\/$/;"	e	enum:pa_log_flags
PA_LOG_PRINT_META	log.h	/^    PA_LOG_PRINT_META  = 0x08, \/* Show extended locaton information *\/$/;"	e	enum:pa_log_flags
PA_LOG_PRINT_TIME	log.h	/^    PA_LOG_PRINT_TIME  = 0x02, \/* Show time *\/$/;"	e	enum:pa_log_flags
PA_LOG_RESET	log.h	/^    PA_LOG_RESET$/;"	e	enum:pa_log_merge
PA_LOG_SET	log.h	/^    PA_LOG_SET,$/;"	e	enum:pa_log_merge
PA_LOG_STDERR	log.h	/^    PA_LOG_STDERR,  \/* default *\/$/;"	e	enum:pa_log_target
PA_LOG_SYSLOG	log.h	/^    PA_LOG_SYSLOG,$/;"	e	enum:pa_log_target
PA_LOG_TARGET_MAX	log.h	/^    PA_LOG_TARGET_MAX$/;"	e	enum:pa_log_target
PA_LOG_UNSET	log.h	/^    PA_LOG_UNSET,$/;"	e	enum:pa_log_merge
PA_LOG_WARN	log.h	/^    PA_LOG_WARN   = 1,    \/* Warning messages *\/$/;"	e	enum:pa_log_level
PA_MAX	macro.h	102;"	d
PA_MAX	macro.h	95;"	d
PA_MAX_INPUTS_PER_SINK	sink.h	47;"	d
PA_MAX_OUTPUTS_PER_SOURCE	source.h	48;"	d
PA_MAYBE_FLOAT32_SWAP	endianmacros.h	91;"	d
PA_MAYBE_INT16_SWAP	endianmacros.h	85;"	d
PA_MAYBE_INT32_SWAP	endianmacros.h	88;"	d
PA_MAYBE_UINT16_SWAP	endianmacros.h	86;"	d
PA_MAYBE_UINT32_SWAP	endianmacros.h	89;"	d
PA_MEMBLOCK_APPENDED	memblock.h	/^    PA_MEMBLOCK_APPENDED,         \/* the data is appended to the memory block *\/$/;"	e	enum:pa_memblock_type
PA_MEMBLOCK_FIXED	memblock.h	/^    PA_MEMBLOCK_FIXED,            \/* data is a pointer to fixed memory that needs not to be freed *\/$/;"	e	enum:pa_memblock_type
PA_MEMBLOCK_IMPORTED	memblock.h	/^    PA_MEMBLOCK_IMPORTED,         \/* Memory is imported from another process via shm *\/$/;"	e	enum:pa_memblock_type
PA_MEMBLOCK_POOL	memblock.h	/^    PA_MEMBLOCK_POOL,             \/* Memory is part of the memory pool *\/$/;"	e	enum:pa_memblock_type
PA_MEMBLOCK_POOL_EXTERNAL	memblock.h	/^    PA_MEMBLOCK_POOL_EXTERNAL,    \/* Data memory is part of the memory pool but the pa_memblock structure itself not *\/$/;"	e	enum:pa_memblock_type
PA_MEMBLOCK_TYPE_MAX	memblock.h	/^    PA_MEMBLOCK_TYPE_MAX$/;"	e	enum:pa_memblock_type
PA_MEMBLOCK_USER	memblock.h	/^    PA_MEMBLOCK_USER,             \/* User supplied memory, to be freed with free_cb *\/$/;"	e	enum:pa_memblock_type
PA_MEMEXPORT_SLOTS_MAX	memblock.c	59;"	d	file:
PA_MEMIMPORT_SEGMENTS_MAX	memblock.c	62;"	d	file:
PA_MEMIMPORT_SLOTS_MAX	memblock.c	61;"	d	file:
PA_MEMPOOL_SLOTS_MAX	memblock.c	56;"	d	file:
PA_MEMPOOL_SLOT_SIZE	memblock.c	57;"	d	file:
PA_MESSAGE_SHUTDOWN	asyncmsgq.h	/^    PA_MESSAGE_SHUTDOWN = -1\/* A generic message to inform the handler of this queue to quit *\/$/;"	e	enum:__anon25
PA_MIN	macro.h	106;"	d
PA_MIN	macro.h	113;"	d
PA_MODULE_AUTHOR	module.h	65;"	d
PA_MODULE_DEPRECATED	module.h	81;"	d
PA_MODULE_DESCRIPTION	module.h	69;"	d
PA_MODULE_LOAD_ONCE	module.h	85;"	d
PA_MODULE_USAGE	module.h	73;"	d
PA_MODULE_VERSION	module.h	77;"	d
PA_MSGOBJECT	msgobject.h	46;"	d
PA_NAMEREG_CARD	namereg.h	/^    PA_NAMEREG_CARD$/;"	e	enum:pa_namereg_type
PA_NAMEREG_SAMPLE	namereg.h	/^    PA_NAMEREG_SAMPLE,$/;"	e	enum:pa_namereg_type
PA_NAMEREG_SINK	namereg.h	/^    PA_NAMEREG_SINK,$/;"	e	enum:pa_namereg_type
PA_NAMEREG_SOURCE	namereg.h	/^    PA_NAMEREG_SOURCE,$/;"	e	enum:pa_namereg_type
PA_NAME_MAX	namereg.h	28;"	d
PA_NATIVE_CONNECTION	protocol-native.c	175;"	d	file:
PA_NATIVE_COOKIE_FILE	native-common.h	176;"	d
PA_NATIVE_COOKIE_LENGTH	native-common.h	175;"	d
PA_NATIVE_COOKIE_PROPERTY_NAME	native-common.h	180;"	d
PA_NATIVE_DEFAULT_PORT	native-common.h	178;"	d
PA_NATIVE_DEFAULT_UNIX_SOCKET	native-common.h	183;"	d
PA_NATIVE_HOOK_CONNECTION_PUT	protocol-native.h	/^    PA_NATIVE_HOOK_CONNECTION_PUT,$/;"	e	enum:pa_native_hook
PA_NATIVE_HOOK_CONNECTION_UNLINK	protocol-native.h	/^    PA_NATIVE_HOOK_CONNECTION_UNLINK,$/;"	e	enum:pa_native_hook
PA_NATIVE_HOOK_MAX	protocol-native.h	/^    PA_NATIVE_HOOK_MAX$/;"	e	enum:pa_native_hook
PA_NATIVE_HOOK_SERVERS_CHANGED	protocol-native.h	/^    PA_NATIVE_HOOK_SERVERS_CHANGED,$/;"	e	enum:pa_native_hook
PA_NATIVE_SERVER_PROPERTY_NAME	native-common.h	181;"	d
PA_OBJECT	object.h	71;"	d
PA_ONCE_BEGIN	once.h	44;"	d
PA_ONCE_END	once.h	49;"	d
PA_ONCE_INIT	once.h	33;"	d
PA_PACKET_APPENDED	packet.h	/^    enum { PA_PACKET_APPENDED, PA_PACKET_DYNAMIC } type;$/;"	e	enum:pa_packet::__anon26
PA_PACKET_DYNAMIC	packet.h	/^    enum { PA_PACKET_APPENDED, PA_PACKET_DYNAMIC } type;$/;"	e	enum:pa_packet::__anon26
PA_PAGE_ALIGN	macro.h	/^static inline size_t PA_PAGE_ALIGN(size_t l) {$/;"	f
PA_PAGE_ALIGN_PTR	macro.h	/^static inline void* PA_PAGE_ALIGN_PTR(const void *p) {$/;"	f
PA_PAGE_SIZE	macro.h	51;"	d
PA_PAGE_SIZE	macro.h	53;"	d
PA_PAGE_SIZE	macro.h	55;"	d
PA_PAGE_SIZE	macro.h	58;"	d
PA_PARSED_ADDRESS_TCP4	parseaddr.h	/^    PA_PARSED_ADDRESS_TCP4,$/;"	e	enum:pa_parsed_address_type
PA_PARSED_ADDRESS_TCP6	parseaddr.h	/^    PA_PARSED_ADDRESS_TCP6,$/;"	e	enum:pa_parsed_address_type
PA_PARSED_ADDRESS_TCP_AUTO	parseaddr.h	/^    PA_PARSED_ADDRESS_TCP_AUTO$/;"	e	enum:pa_parsed_address_type
PA_PARSED_ADDRESS_UNIX	parseaddr.h	/^    PA_PARSED_ADDRESS_UNIX,$/;"	e	enum:pa_parsed_address_type
PA_PATH_SEP	macro.h	278;"	d
PA_PATH_SEP	macro.h	281;"	d
PA_PATH_SEP_CHAR	macro.h	279;"	d
PA_PATH_SEP_CHAR	macro.h	282;"	d
PA_PRETTY_FUNCTION	macro.h	193;"	d
PA_PRETTY_FUNCTION	macro.h	195;"	d
PA_PSTREAM_DESCRIPTOR_CHANNEL	pstream.c	/^    PA_PSTREAM_DESCRIPTOR_CHANNEL,$/;"	e	enum:__anon31	file:
PA_PSTREAM_DESCRIPTOR_FLAGS	pstream.c	/^    PA_PSTREAM_DESCRIPTOR_FLAGS,$/;"	e	enum:__anon31	file:
PA_PSTREAM_DESCRIPTOR_LENGTH	pstream.c	/^    PA_PSTREAM_DESCRIPTOR_LENGTH,$/;"	e	enum:__anon31	file:
PA_PSTREAM_DESCRIPTOR_MAX	pstream.c	/^    PA_PSTREAM_DESCRIPTOR_MAX$/;"	e	enum:__anon31	file:
PA_PSTREAM_DESCRIPTOR_OFFSET_HI	pstream.c	/^    PA_PSTREAM_DESCRIPTOR_OFFSET_HI,$/;"	e	enum:__anon31	file:
PA_PSTREAM_DESCRIPTOR_OFFSET_LO	pstream.c	/^    PA_PSTREAM_DESCRIPTOR_OFFSET_LO,$/;"	e	enum:__anon31	file:
PA_PSTREAM_DESCRIPTOR_SIZE	pstream.c	83;"	d	file:
PA_PSTREAM_ITEM_MEMBLOCK	pstream.c	/^        PA_PSTREAM_ITEM_MEMBLOCK,$/;"	e	enum:item_info::__anon33	file:
PA_PSTREAM_ITEM_PACKET	pstream.c	/^        PA_PSTREAM_ITEM_PACKET,$/;"	e	enum:item_info::__anon33	file:
PA_PSTREAM_ITEM_SHMRELEASE	pstream.c	/^        PA_PSTREAM_ITEM_SHMRELEASE,$/;"	e	enum:item_info::__anon33	file:
PA_PSTREAM_ITEM_SHMREVOKE	pstream.c	/^        PA_PSTREAM_ITEM_SHMREVOKE$/;"	e	enum:item_info::__anon33	file:
PA_PSTREAM_SHM_BLOCKID	pstream.c	/^    PA_PSTREAM_SHM_BLOCKID,$/;"	e	enum:__anon32	file:
PA_PSTREAM_SHM_INDEX	pstream.c	/^    PA_PSTREAM_SHM_INDEX,$/;"	e	enum:__anon32	file:
PA_PSTREAM_SHM_LENGTH	pstream.c	/^    PA_PSTREAM_SHM_LENGTH,$/;"	e	enum:__anon32	file:
PA_PSTREAM_SHM_MAX	pstream.c	/^    PA_PSTREAM_SHM_MAX$/;"	e	enum:__anon32	file:
PA_PSTREAM_SHM_SHMID	pstream.c	/^    PA_PSTREAM_SHM_SHMID,$/;"	e	enum:__anon32	file:
PA_PTR_TO_INT	macro.h	271;"	d
PA_PTR_TO_INT32	macro.h	274;"	d
PA_PTR_TO_UINT	macro.h	265;"	d
PA_PTR_TO_UINT32	macro.h	268;"	d
PA_READ24BE	endianmacros.h	/^static inline uint32_t PA_READ24BE(const uint8_t *p) {$/;"	f
PA_READ24LE	endianmacros.h	/^static inline uint32_t PA_READ24LE(const uint8_t *p) {$/;"	f
PA_READ24NE	endianmacros.h	121;"	d
PA_READ24NE	endianmacros.h	154;"	d
PA_READ24RE	endianmacros.h	124;"	d
PA_READ24RE	endianmacros.h	157;"	d
PA_REFCNT_DEC	refcnt.h	48;"	d
PA_REFCNT_DEC	refcnt.h	69;"	d
PA_REFCNT_DECLARE	asyncmsgq.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_asyncmsgq	file:
PA_REFCNT_DECLARE	auth-cookie.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_auth_cookie	file:
PA_REFCNT_DECLARE	dbus-shared.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_dbus_connection	file:
PA_REFCNT_DECLARE	ioline.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_ioline	file:
PA_REFCNT_DECLARE	memblock.c	/^    PA_REFCNT_DECLARE; \/* the reference counter *\/$/;"	m	struct:pa_memblock	file:
PA_REFCNT_DECLARE	object.h	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_object
PA_REFCNT_DECLARE	packet.h	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_packet
PA_REFCNT_DECLARE	pdispatch.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_pdispatch	file:
PA_REFCNT_DECLARE	protocol-cli.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_cli_protocol	file:
PA_REFCNT_DECLARE	protocol-esound.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_esound_protocol	file:
PA_REFCNT_DECLARE	protocol-esound.h	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_esound_options
PA_REFCNT_DECLARE	protocol-http.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_http_protocol	file:
PA_REFCNT_DECLARE	protocol-native.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_native_protocol	file:
PA_REFCNT_DECLARE	protocol-native.h	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_native_options
PA_REFCNT_DECLARE	protocol-simple.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_simple_protocol	file:
PA_REFCNT_DECLARE	protocol-simple.h	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_simple_options
PA_REFCNT_DECLARE	pstream.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_pstream	file:
PA_REFCNT_DECLARE	refcnt.h	31;"	d
PA_REFCNT_DECLARE	socket-client.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_socket_client	file:
PA_REFCNT_DECLARE	socket-server.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_socket_server	file:
PA_REFCNT_DECLARE	x11wrap.c	/^    PA_REFCNT_DECLARE;$/;"	m	struct:pa_x11_wrapper	file:
PA_REFCNT_INC	refcnt.h	45;"	d
PA_REFCNT_INC	refcnt.h	63;"	d
PA_REFCNT_INIT	refcnt.h	42;"	d
PA_REFCNT_INIT	refcnt.h	57;"	d
PA_REFCNT_INIT_ZERO	refcnt.h	37;"	d
PA_REFCNT_VALUE	refcnt.h	34;"	d
PA_REG_D	cpu-x86.h	50;"	d
PA_REG_D	cpu-x86.h	58;"	d
PA_REG_S	cpu-x86.h	51;"	d
PA_REG_S	cpu-x86.h	59;"	d
PA_REG_a	cpu-x86.h	46;"	d
PA_REG_a	cpu-x86.h	54;"	d
PA_REG_b	cpu-x86.h	47;"	d
PA_REG_b	cpu-x86.h	55;"	d
PA_REG_c	cpu-x86.h	48;"	d
PA_REG_c	cpu-x86.h	56;"	d
PA_REG_d	cpu-x86.h	49;"	d
PA_REG_d	cpu-x86.h	57;"	d
PA_RESAMPLER_AUTO	resampler.h	/^    PA_RESAMPLER_AUTO, \/* automatic select based on sample format *\/$/;"	e	enum:pa_resample_method
PA_RESAMPLER_COPY	resampler.h	/^    PA_RESAMPLER_COPY,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_FFMPEG	resampler.h	/^    PA_RESAMPLER_FFMPEG,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_INVALID	resampler.h	/^    PA_RESAMPLER_INVALID                 = -1,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_MAX	resampler.h	/^    PA_RESAMPLER_MAX$/;"	e	enum:pa_resample_method
PA_RESAMPLER_NO_LFE	resampler.h	/^    PA_RESAMPLER_NO_LFE        = 0x0008U$/;"	e	enum:pa_resample_flags
PA_RESAMPLER_NO_REMAP	resampler.h	/^    PA_RESAMPLER_NO_REMAP      = 0x0002U,  \/* implies NO_REMIX *\/$/;"	e	enum:pa_resample_flags
PA_RESAMPLER_NO_REMIX	resampler.h	/^    PA_RESAMPLER_NO_REMIX      = 0x0004U,$/;"	e	enum:pa_resample_flags
PA_RESAMPLER_PEAKS	resampler.h	/^    PA_RESAMPLER_PEAKS,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SPEEX_FIXED_BASE	resampler.h	/^    PA_RESAMPLER_SPEEX_FIXED_BASE,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SPEEX_FIXED_MAX	resampler.h	/^    PA_RESAMPLER_SPEEX_FIXED_MAX = PA_RESAMPLER_SPEEX_FIXED_BASE + 10,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SPEEX_FLOAT_BASE	resampler.h	/^    PA_RESAMPLER_SPEEX_FLOAT_BASE,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SPEEX_FLOAT_MAX	resampler.h	/^    PA_RESAMPLER_SPEEX_FLOAT_MAX = PA_RESAMPLER_SPEEX_FLOAT_BASE + 10,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SRC_LINEAR	resampler.h	/^    PA_RESAMPLER_SRC_LINEAR              = 4, \/* = SRC_LINEAR *\/$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SRC_SINC_BEST_QUALITY	resampler.h	/^    PA_RESAMPLER_SRC_SINC_BEST_QUALITY   = 0, \/* = SRC_SINC_BEST_QUALITY *\/$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SRC_SINC_FASTEST	resampler.h	/^    PA_RESAMPLER_SRC_SINC_FASTEST        = 2, \/* = SRC_SINC_FASTEST *\/$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SRC_SINC_MEDIUM_QUALITY	resampler.h	/^    PA_RESAMPLER_SRC_SINC_MEDIUM_QUALITY = 1, \/* = SRC_SINC_MEDIUM_QUALITY *\/$/;"	e	enum:pa_resample_method
PA_RESAMPLER_SRC_ZERO_ORDER_HOLD	resampler.h	/^    PA_RESAMPLER_SRC_ZERO_ORDER_HOLD     = 3, \/* = SRC_ZERO_ORDER_HOLD *\/$/;"	e	enum:pa_resample_method
PA_RESAMPLER_TRIVIAL	resampler.h	/^    PA_RESAMPLER_TRIVIAL,$/;"	e	enum:pa_resample_method
PA_RESAMPLER_VARIABLE_RATE	resampler.h	/^    PA_RESAMPLER_VARIABLE_RATE = 0x0001U,$/;"	e	enum:pa_resample_flags
PA_ROUND_DOWN	macro.h	156;"	d
PA_ROUND_DOWN	macro.h	163;"	d
PA_ROUND_UP	macro.h	145;"	d
PA_ROUND_UP	macro.h	152;"	d
PA_RTPOLL_EARLY	rtpoll.h	/^    PA_RTPOLL_EARLY  = -100,          \/* For veeery important stuff, like handling control messages *\/$/;"	e	enum:pa_rtpoll_priority
PA_RTPOLL_LATE	rtpoll.h	/^    PA_RTPOLL_LATE   = +100,          \/* For housekeeping *\/$/;"	e	enum:pa_rtpoll_priority
PA_RTPOLL_NEVER	rtpoll.h	/^    PA_RTPOLL_NEVER  = INT_MAX,       \/* For stuff that doesn't register any callbacks, but only fds to listen on *\/$/;"	e	enum:pa_rtpoll_priority
PA_RTPOLL_NORMAL	rtpoll.h	/^    PA_RTPOLL_NORMAL = 0,             \/* For normal stuff *\/$/;"	e	enum:pa_rtpoll_priority
PA_SCACHE_ENTRY_SIZE_MAX	core-scache.h	30;"	d
PA_SILENCE_MAX	sample-util.c	44;"	d	file:
PA_SINK	sink.h	197;"	d
PA_SINK_INPUT	sink-input.h	241;"	d
PA_SINK_INPUT_CORKED	sink-input.h	/^    PA_SINK_INPUT_CORKED,       \/*< The stream was corked on user request *\/$/;"	e	enum:pa_sink_input_state
PA_SINK_INPUT_DONT_INHIBIT_AUTO_SUSPEND	sink-input.h	/^    PA_SINK_INPUT_DONT_INHIBIT_AUTO_SUSPEND = 256,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_DONT_MOVE	sink-input.h	/^    PA_SINK_INPUT_DONT_MOVE = 2,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_DRAINED	sink-input.h	/^    PA_SINK_INPUT_DRAINED,      \/*< The stream stopped playing because there was no data to play *\/$/;"	e	enum:pa_sink_input_state
PA_SINK_INPUT_FIX_CHANNELS	sink-input.h	/^    PA_SINK_INPUT_FIX_CHANNELS = 128,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_FIX_FORMAT	sink-input.h	/^    PA_SINK_INPUT_FIX_FORMAT = 32,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_FIX_RATE	sink-input.h	/^    PA_SINK_INPUT_FIX_RATE = 64,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_INIT	sink-input.h	/^    PA_SINK_INPUT_INIT,         \/*< The stream is not active yet, because pa_sink_put() has not been called yet *\/$/;"	e	enum:pa_sink_input_state
PA_SINK_INPUT_IS_LINKED	sink-input.h	/^static inline pa_bool_t PA_SINK_INPUT_IS_LINKED(pa_sink_input_state_t x) {$/;"	f
PA_SINK_INPUT_KILL_ON_SUSPEND	sink-input.h	/^    PA_SINK_INPUT_KILL_ON_SUSPEND = 1024$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_MESSAGE_GET_LATENCY	sink-input.h	/^    PA_SINK_INPUT_MESSAGE_GET_LATENCY,$/;"	e	enum:__anon28
PA_SINK_INPUT_MESSAGE_GET_REQUESTED_LATENCY	sink-input.h	/^    PA_SINK_INPUT_MESSAGE_GET_REQUESTED_LATENCY,$/;"	e	enum:__anon28
PA_SINK_INPUT_MESSAGE_MAX	sink-input.h	/^    PA_SINK_INPUT_MESSAGE_MAX$/;"	e	enum:__anon28
PA_SINK_INPUT_MESSAGE_SET_RATE	sink-input.h	/^    PA_SINK_INPUT_MESSAGE_SET_RATE,$/;"	e	enum:__anon28
PA_SINK_INPUT_MESSAGE_SET_REQUESTED_LATENCY	sink-input.h	/^    PA_SINK_INPUT_MESSAGE_SET_REQUESTED_LATENCY,$/;"	e	enum:__anon28
PA_SINK_INPUT_MESSAGE_SET_SOFT_MUTE	sink-input.h	/^    PA_SINK_INPUT_MESSAGE_SET_SOFT_MUTE,$/;"	e	enum:__anon28
PA_SINK_INPUT_MESSAGE_SET_SOFT_VOLUME	sink-input.h	/^    PA_SINK_INPUT_MESSAGE_SET_SOFT_VOLUME,$/;"	e	enum:__anon28
PA_SINK_INPUT_MESSAGE_SET_STATE	sink-input.h	/^    PA_SINK_INPUT_MESSAGE_SET_STATE,$/;"	e	enum:__anon28
PA_SINK_INPUT_NO_CREATE_ON_SUSPEND	sink-input.h	/^    PA_SINK_INPUT_NO_CREATE_ON_SUSPEND = 512,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_NO_REMAP	sink-input.h	/^    PA_SINK_INPUT_NO_REMAP = 8,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_NO_REMIX	sink-input.h	/^    PA_SINK_INPUT_NO_REMIX = 16,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_RUNNING	sink-input.h	/^    PA_SINK_INPUT_RUNNING,      \/*< The stream is alive and kicking *\/$/;"	e	enum:pa_sink_input_state
PA_SINK_INPUT_START_CORKED	sink-input.h	/^    PA_SINK_INPUT_START_CORKED = 4,$/;"	e	enum:pa_sink_input_flags
PA_SINK_INPUT_UNLINKED	sink-input.h	/^    PA_SINK_INPUT_UNLINKED      \/*< The stream is dead *\/$/;"	e	enum:pa_sink_input_state
PA_SINK_INPUT_VARIABLE_RATE	sink-input.h	/^    PA_SINK_INPUT_VARIABLE_RATE = 1,$/;"	e	enum:pa_sink_input_flags
PA_SINK_IS_LINKED	sink.h	/^static inline pa_bool_t PA_SINK_IS_LINKED(pa_sink_state_t x) {$/;"	f
PA_SINK_MESSAGE_ADD_INPUT	sink.h	/^    PA_SINK_MESSAGE_ADD_INPUT,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_ATTACH	sink.h	/^    PA_SINK_MESSAGE_ATTACH,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_DETACH	sink.h	/^    PA_SINK_MESSAGE_DETACH,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_FINISH_MOVE	sink.h	/^    PA_SINK_MESSAGE_FINISH_MOVE,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_GET_FIXED_LATENCY	sink.h	/^    PA_SINK_MESSAGE_GET_FIXED_LATENCY,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_GET_LATENCY	sink.h	/^    PA_SINK_MESSAGE_GET_LATENCY,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_GET_LATENCY_RANGE	sink.h	/^    PA_SINK_MESSAGE_GET_LATENCY_RANGE,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_GET_MAX_REQUEST	sink.h	/^    PA_SINK_MESSAGE_GET_MAX_REQUEST,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_GET_MAX_REWIND	sink.h	/^    PA_SINK_MESSAGE_GET_MAX_REWIND,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_GET_MUTE	sink.h	/^    PA_SINK_MESSAGE_GET_MUTE,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_GET_REQUESTED_LATENCY	sink.h	/^    PA_SINK_MESSAGE_GET_REQUESTED_LATENCY,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_GET_VOLUME	sink.h	/^    PA_SINK_MESSAGE_GET_VOLUME,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_MAX	sink.h	/^    PA_SINK_MESSAGE_MAX$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_REMOVE_INPUT	sink.h	/^    PA_SINK_MESSAGE_REMOVE_INPUT,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_SET_FIXED_LATENCY	sink.h	/^    PA_SINK_MESSAGE_SET_FIXED_LATENCY,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_SET_LATENCY_RANGE	sink.h	/^    PA_SINK_MESSAGE_SET_LATENCY_RANGE,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_SET_MAX_REQUEST	sink.h	/^    PA_SINK_MESSAGE_SET_MAX_REQUEST,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_SET_MAX_REWIND	sink.h	/^    PA_SINK_MESSAGE_SET_MAX_REWIND,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_SET_MUTE	sink.h	/^    PA_SINK_MESSAGE_SET_MUTE,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_SET_STATE	sink.h	/^    PA_SINK_MESSAGE_SET_STATE,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_SET_VOLUME	sink.h	/^    PA_SINK_MESSAGE_SET_VOLUME,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_START_MOVE	sink.h	/^    PA_SINK_MESSAGE_START_MOVE,$/;"	e	enum:pa_sink_message
PA_SINK_MESSAGE_SYNC_VOLUMES	sink.h	/^    PA_SINK_MESSAGE_SYNC_VOLUMES,$/;"	e	enum:pa_sink_message
PA_SOURCE	source.h	164;"	d
PA_SOURCE_IS_LINKED	source.h	/^static inline pa_bool_t PA_SOURCE_IS_LINKED(pa_source_state_t x) {$/;"	f
PA_SOURCE_MESSAGE_ADD_OUTPUT	source.h	/^    PA_SOURCE_MESSAGE_ADD_OUTPUT,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_ATTACH	source.h	/^    PA_SOURCE_MESSAGE_ATTACH,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_DETACH	source.h	/^    PA_SOURCE_MESSAGE_DETACH,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_GET_FIXED_LATENCY	source.h	/^    PA_SOURCE_MESSAGE_GET_FIXED_LATENCY,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_GET_LATENCY	source.h	/^    PA_SOURCE_MESSAGE_GET_LATENCY,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_GET_LATENCY_RANGE	source.h	/^    PA_SOURCE_MESSAGE_GET_LATENCY_RANGE,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_GET_MAX_REWIND	source.h	/^    PA_SOURCE_MESSAGE_GET_MAX_REWIND,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_GET_MUTE	source.h	/^    PA_SOURCE_MESSAGE_GET_MUTE,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_GET_REQUESTED_LATENCY	source.h	/^    PA_SOURCE_MESSAGE_GET_REQUESTED_LATENCY,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_GET_VOLUME	source.h	/^    PA_SOURCE_MESSAGE_GET_VOLUME,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_MAX	source.h	/^    PA_SOURCE_MESSAGE_MAX$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_REMOVE_OUTPUT	source.h	/^    PA_SOURCE_MESSAGE_REMOVE_OUTPUT,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_SET_FIXED_LATENCY	source.h	/^    PA_SOURCE_MESSAGE_SET_FIXED_LATENCY,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_SET_LATENCY_RANGE	source.h	/^    PA_SOURCE_MESSAGE_SET_LATENCY_RANGE,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_SET_MAX_REWIND	source.h	/^    PA_SOURCE_MESSAGE_SET_MAX_REWIND,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_SET_MUTE	source.h	/^    PA_SOURCE_MESSAGE_SET_MUTE,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_SET_STATE	source.h	/^    PA_SOURCE_MESSAGE_SET_STATE,$/;"	e	enum:pa_source_message
PA_SOURCE_MESSAGE_SET_VOLUME	source.h	/^    PA_SOURCE_MESSAGE_SET_VOLUME,$/;"	e	enum:pa_source_message
PA_SOURCE_OUTPUT	source-output.h	186;"	d
PA_SOURCE_OUTPUT_CORKED	source-output.h	/^    PA_SOURCE_OUTPUT_CORKED,$/;"	e	enum:pa_source_output_state
PA_SOURCE_OUTPUT_DONT_INHIBIT_AUTO_SUSPEND	source-output.h	/^    PA_SOURCE_OUTPUT_DONT_INHIBIT_AUTO_SUSPEND = 256,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_DONT_MOVE	source-output.h	/^    PA_SOURCE_OUTPUT_DONT_MOVE = 2,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_FIX_CHANNELS	source-output.h	/^    PA_SOURCE_OUTPUT_FIX_CHANNELS = 128,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_FIX_FORMAT	source-output.h	/^    PA_SOURCE_OUTPUT_FIX_FORMAT = 32,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_FIX_RATE	source-output.h	/^    PA_SOURCE_OUTPUT_FIX_RATE = 64,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_INIT	source-output.h	/^    PA_SOURCE_OUTPUT_INIT,$/;"	e	enum:pa_source_output_state
PA_SOURCE_OUTPUT_IS_LINKED	source-output.h	/^static inline pa_bool_t PA_SOURCE_OUTPUT_IS_LINKED(pa_source_output_state_t x) {$/;"	f
PA_SOURCE_OUTPUT_KILL_ON_SUSPEND	source-output.h	/^    PA_SOURCE_OUTPUT_KILL_ON_SUSPEND = 1024$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_MESSAGE_GET_LATENCY	source-output.h	/^    PA_SOURCE_OUTPUT_MESSAGE_GET_LATENCY,$/;"	e	enum:__anon16
PA_SOURCE_OUTPUT_MESSAGE_GET_REQUESTED_LATENCY	source-output.h	/^    PA_SOURCE_OUTPUT_MESSAGE_GET_REQUESTED_LATENCY,$/;"	e	enum:__anon16
PA_SOURCE_OUTPUT_MESSAGE_MAX	source-output.h	/^    PA_SOURCE_OUTPUT_MESSAGE_MAX$/;"	e	enum:__anon16
PA_SOURCE_OUTPUT_MESSAGE_SET_RATE	source-output.h	/^    PA_SOURCE_OUTPUT_MESSAGE_SET_RATE,$/;"	e	enum:__anon16
PA_SOURCE_OUTPUT_MESSAGE_SET_REQUESTED_LATENCY	source-output.h	/^    PA_SOURCE_OUTPUT_MESSAGE_SET_REQUESTED_LATENCY,$/;"	e	enum:__anon16
PA_SOURCE_OUTPUT_MESSAGE_SET_STATE	source-output.h	/^    PA_SOURCE_OUTPUT_MESSAGE_SET_STATE,$/;"	e	enum:__anon16
PA_SOURCE_OUTPUT_NO_CREATE_ON_SUSPEND	source-output.h	/^    PA_SOURCE_OUTPUT_NO_CREATE_ON_SUSPEND = 512,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_NO_REMAP	source-output.h	/^    PA_SOURCE_OUTPUT_NO_REMAP = 8,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_NO_REMIX	source-output.h	/^    PA_SOURCE_OUTPUT_NO_REMIX = 16,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_RUNNING	source-output.h	/^    PA_SOURCE_OUTPUT_RUNNING,$/;"	e	enum:pa_source_output_state
PA_SOURCE_OUTPUT_START_CORKED	source-output.h	/^    PA_SOURCE_OUTPUT_START_CORKED = 4,$/;"	e	enum:pa_source_output_flags
PA_SOURCE_OUTPUT_UNLINKED	source-output.h	/^    PA_SOURCE_OUTPUT_UNLINKED$/;"	e	enum:pa_source_output_state
PA_SOURCE_OUTPUT_VARIABLE_RATE	source-output.h	/^    PA_SOURCE_OUTPUT_VARIABLE_RATE = 1,$/;"	e	enum:pa_source_output_flags
PA_STATIC_FLIST_DECLARE	flist.h	46;"	d
PA_STATIC_FLIST_GET	flist.h	67;"	d
PA_STATIC_MUTEX_INIT	mutex.h	55;"	d
PA_STATIC_SEMAPHORE_INIT	semaphore.h	43;"	d
PA_STATIC_TLS_DECLARE	thread.h	55;"	d
PA_STATIC_TLS_DECLARE_NO_FREE	thread.h	107;"	d
PA_STATIC_TLS_DECLARE_NO_FREE	thread.h	95;"	d
PA_STATIC_TLS_GET	thread.h	110;"	d
PA_STATIC_TLS_SET	thread.h	111;"	d
PA_SUSPEND_ALL	core.h	/^    PA_SUSPEND_ALL = 0xFFFF      \/* Magic cause that can be used to resume forcibly *\/$/;"	e	enum:pa_suspend_cause
PA_SUSPEND_APPLICATION	core.h	/^    PA_SUSPEND_APPLICATION = 2,  \/* Used by the device reservation logic *\/$/;"	e	enum:pa_suspend_cause
PA_SUSPEND_IDLE	core.h	/^    PA_SUSPEND_IDLE = 4,         \/* Used by module-suspend-on-idle *\/$/;"	e	enum:pa_suspend_cause
PA_SUSPEND_SESSION	core.h	/^    PA_SUSPEND_SESSION = 8,      \/* Used by module-hal for mark inactive sessions *\/$/;"	e	enum:pa_suspend_cause
PA_SUSPEND_USER	core.h	/^    PA_SUSPEND_USER = 1,         \/* Exposed to the user via some protocol *\/$/;"	e	enum:pa_suspend_cause
PA_SYMBOL_AUTHOR	modinfo.c	37;"	d	file:
PA_SYMBOL_DEPRECATED	modinfo.c	41;"	d	file:
PA_SYMBOL_DESCRIPTION	modinfo.c	38;"	d	file:
PA_SYMBOL_DONE	module.c	48;"	d	file:
PA_SYMBOL_GET_DEPRECATE	module.c	51;"	d	file:
PA_SYMBOL_GET_N_USED	module.c	50;"	d	file:
PA_SYMBOL_INIT	module.c	47;"	d	file:
PA_SYMBOL_LOAD_ONCE	modinfo.c	42;"	d	file:
PA_SYMBOL_LOAD_ONCE	module.c	49;"	d	file:
PA_SYMBOL_USAGE	modinfo.c	39;"	d	file:
PA_SYMBOL_VERSION	modinfo.c	40;"	d	file:
PA_TAG_ARBITRARY	tagstruct.h	/^    PA_TAG_ARBITRARY = 'x',$/;"	e	enum:__anon3
PA_TAG_BOOLEAN	tagstruct.h	/^    PA_TAG_BOOLEAN = PA_TAG_BOOLEAN_TRUE,$/;"	e	enum:__anon3
PA_TAG_BOOLEAN_FALSE	tagstruct.h	/^    PA_TAG_BOOLEAN_FALSE = '0',$/;"	e	enum:__anon3
PA_TAG_BOOLEAN_TRUE	tagstruct.h	/^    PA_TAG_BOOLEAN_TRUE = '1',$/;"	e	enum:__anon3
PA_TAG_CHANNEL_MAP	tagstruct.h	/^    PA_TAG_CHANNEL_MAP = 'm',$/;"	e	enum:__anon3
PA_TAG_CVOLUME	tagstruct.h	/^    PA_TAG_CVOLUME = 'v',$/;"	e	enum:__anon3
PA_TAG_INVALID	tagstruct.h	/^    PA_TAG_INVALID = 0,$/;"	e	enum:__anon3
PA_TAG_PROPLIST	tagstruct.h	/^    PA_TAG_PROPLIST = 'P',$/;"	e	enum:__anon3
PA_TAG_S64	tagstruct.h	/^    PA_TAG_S64 = 'r',$/;"	e	enum:__anon3
PA_TAG_SAMPLE_SPEC	tagstruct.h	/^    PA_TAG_SAMPLE_SPEC = 'a',$/;"	e	enum:__anon3
PA_TAG_STRING	tagstruct.h	/^    PA_TAG_STRING = 't',$/;"	e	enum:__anon3
PA_TAG_STRING_NULL	tagstruct.h	/^    PA_TAG_STRING_NULL = 'N',$/;"	e	enum:__anon3
PA_TAG_TIMEVAL	tagstruct.h	/^    PA_TAG_TIMEVAL = 'T',$/;"	e	enum:__anon3
PA_TAG_U32	tagstruct.h	/^    PA_TAG_U32 = 'L',$/;"	e	enum:__anon3
PA_TAG_U64	tagstruct.h	/^    PA_TAG_U64 = 'R',$/;"	e	enum:__anon3
PA_TAG_U8	tagstruct.h	/^    PA_TAG_U8 = 'B',$/;"	e	enum:__anon3
PA_TAG_USEC	tagstruct.h	/^    PA_TAG_USEC = 'U'  \/* 64bit unsigned *\/,$/;"	e	enum:__anon3
PA_TAG_VOLUME	tagstruct.h	/^    PA_TAG_VOLUME = 'V'$/;"	e	enum:__anon3
PA_TIMEVAL_RTCLOCK	core-rtclock.h	42;"	d
PA_UINT16_FROM_BE	endianmacros.h	101;"	d
PA_UINT16_FROM_BE	endianmacros.h	134;"	d
PA_UINT16_FROM_LE	endianmacros.h	100;"	d
PA_UINT16_FROM_LE	endianmacros.h	133;"	d
PA_UINT16_SWAP	endianmacros.h	38;"	d
PA_UINT16_SWAP	endianmacros.h	43;"	d
PA_UINT16_TO_BE	endianmacros.h	104;"	d
PA_UINT16_TO_BE	endianmacros.h	137;"	d
PA_UINT16_TO_LE	endianmacros.h	103;"	d
PA_UINT16_TO_LE	endianmacros.h	136;"	d
PA_UINT32_FROM_BE	endianmacros.h	113;"	d
PA_UINT32_FROM_BE	endianmacros.h	146;"	d
PA_UINT32_FROM_LE	endianmacros.h	112;"	d
PA_UINT32_FROM_LE	endianmacros.h	145;"	d
PA_UINT32_SWAP	endianmacros.h	40;"	d
PA_UINT32_SWAP	endianmacros.h	45;"	d
PA_UINT32_TO_BE	endianmacros.h	116;"	d
PA_UINT32_TO_BE	endianmacros.h	149;"	d
PA_UINT32_TO_LE	endianmacros.h	115;"	d
PA_UINT32_TO_LE	endianmacros.h	148;"	d
PA_UINT32_TO_PTR	macro.h	269;"	d
PA_UINT8_VECTOR_MAKE	vector.h	51;"	d
PA_UINT8_VECTOR_SIZE	vector.h	46;"	d
PA_UINT_TO_PTR	macro.h	266;"	d
PA_UNLIKELY	macro.h	43;"	d
PA_UNLIKELY	macro.h	46;"	d
PA_WARN_REFERENCE	macro.h	287;"	d
PA_WARN_REFERENCE	macro.h	294;"	d
PA_WRITE24BE	endianmacros.h	/^static inline void PA_WRITE24BE(uint8_t *p, uint32_t u) {$/;"	f
PA_WRITE24LE	endianmacros.h	/^static inline void PA_WRITE24LE(uint8_t *p, uint32_t u) {$/;"	f
PA_WRITE24NE	endianmacros.h	122;"	d
PA_WRITE24NE	endianmacros.h	155;"	d
PA_WRITE24RE	endianmacros.h	125;"	d
PA_WRITE24RE	endianmacros.h	158;"	d
PLAYBACK_BUFFER_FRAGMENTS	protocol-esound.c	72;"	d	file:
PLAYBACK_BUFFER_FRAGMENTS	protocol-simple.c	94;"	d	file:
PLAYBACK_BUFFER_SECONDS	protocol-esound.c	71;"	d	file:
PLAYBACK_BUFFER_SECONDS	protocol-simple.c	93;"	d	file:
PLAYBACK_STREAM	protocol-native.c	139;"	d	file:
PLAYBACK_STREAM_MESSAGE_DRAIN_ACK	protocol-native.c	/^    PLAYBACK_STREAM_MESSAGE_DRAIN_ACK,$/;"	e	enum:__anon45	file:
PLAYBACK_STREAM_MESSAGE_OVERFLOW	protocol-native.c	/^    PLAYBACK_STREAM_MESSAGE_OVERFLOW,$/;"	e	enum:__anon45	file:
PLAYBACK_STREAM_MESSAGE_REQUEST_DATA	protocol-native.c	/^    PLAYBACK_STREAM_MESSAGE_REQUEST_DATA,      \/* data requested from sink input from the main loop *\/$/;"	e	enum:__anon45	file:
PLAYBACK_STREAM_MESSAGE_STARTED	protocol-native.c	/^    PLAYBACK_STREAM_MESSAGE_STARTED,$/;"	e	enum:__anon45	file:
PLAYBACK_STREAM_MESSAGE_UNDERFLOW	protocol-native.c	/^    PLAYBACK_STREAM_MESSAGE_UNDERFLOW,$/;"	e	enum:__anon45	file:
PLAYBACK_STREAM_MESSAGE_UPDATE_TLENGTH	protocol-native.c	/^    PLAYBACK_STREAM_MESSAGE_UPDATE_TLENGTH$/;"	e	enum:__anon45	file:
POLLERR	poll.h	37;"	d
POLLHUP	poll.h	38;"	d
POLLIN	poll.h	30;"	d
POLLNVAL	poll.h	39;"	d
POLLOUT	poll.h	32;"	d
POLLPRI	poll.h	31;"	d
PROMPT	cli.c	49;"	d	file:
PULSE_ROOTENV	core-util.c	133;"	d	file:
QUANT_MASK	g711.c	47;"	d	file:
READ24	sconv-s16be.c	38;"	d	file:
READ24	sconv-s16le.c	68;"	d	file:
READ_SIZE	ioline.c	42;"	d	file:
RECORD_BUFFER_SECONDS	protocol-esound.c	73;"	d	file:
RECORD_BUFFER_SECONDS	protocol-http.c	74;"	d	file:
RECORD_BUFFER_SECONDS	protocol-simple.c	95;"	d	file:
RECORD_STREAM	protocol-native.c	101;"	d	file:
RECORD_STREAM_MESSAGE_POST_DATA	protocol-native.c	/^    RECORD_STREAM_MESSAGE_POST_DATA         \/* data from source output to main loop *\/$/;"	e	enum:__anon46	file:
REDUCE	time-smoother.c	126;"	d	file:
REDUCE_INC	time-smoother.c	131;"	d	file:
RLIMIT_NICE	core-util.h	48;"	d
RLIMIT_RTPRIO	core-util.h	51;"	d
RLIMIT_RTTIME	core-util.h	54;"	d
RTKIT_OBJECT_PATH	rtkit.h	42;"	d
RTKIT_SERVICE_NAME	rtkit.h	41;"	d
RUN_TEST	sconv_sse.c	167;"	d	file:
RUN_TEST	svolume_arm.c	125;"	d	file:
RUN_TEST	svolume_mmx.c	238;"	d	file:
RUN_TEST	svolume_sse.c	245;"	d	file:
SAMPLES	sconv_sse.c	170;"	d	file:
SAMPLES	svolume_arm.c	129;"	d	file:
SAMPLES	svolume_mmx.c	242;"	d	file:
SAMPLES	svolume_sse.c	249;"	d	file:
SCACHE_PREFIX	protocol-esound.c	80;"	d	file:
SCHED_RESET_ON_FORK	core-util.c	56;"	d	file:
SEG_MASK	g711.c	50;"	d	file:
SEG_SHIFT	g711.c	49;"	d	file:
SHM_MARKER	shm.c	75;"	d	file:
SHM_MARKER_SIZE	shm.c	91;"	d	file:
SHM_PATH	shm.c	70;"	d	file:
SHM_PATH	shm.c	72;"	d	file:
SIGN_BIT	g711.c	46;"	d	file:
SINK_INPUT_MESSAGE_DISABLE_PREBUF	protocol-esound.c	/^    SINK_INPUT_MESSAGE_DISABLE_PREBUF$/;"	e	enum:__anon13	file:
SINK_INPUT_MESSAGE_DISABLE_PREBUF	protocol-simple.c	/^    SINK_INPUT_MESSAGE_DISABLE_PREBUF \/* disabled prebuf, get playback started. *\/$/;"	e	enum:__anon9	file:
SINK_INPUT_MESSAGE_DRAIN	protocol-native.c	/^    SINK_INPUT_MESSAGE_DRAIN, \/* disabled prebuf, get playback started. *\/$/;"	e	enum:__anon44	file:
SINK_INPUT_MESSAGE_FLUSH	protocol-native.c	/^    SINK_INPUT_MESSAGE_FLUSH,$/;"	e	enum:__anon44	file:
SINK_INPUT_MESSAGE_POST_DATA	protocol-esound.c	/^    SINK_INPUT_MESSAGE_POST_DATA = PA_SINK_INPUT_MESSAGE_MAX, \/* data from main loop to sink input *\/$/;"	e	enum:__anon13	file:
SINK_INPUT_MESSAGE_POST_DATA	protocol-native.c	/^    SINK_INPUT_MESSAGE_POST_DATA = PA_SINK_INPUT_MESSAGE_MAX, \/* data from main loop to sink input *\/$/;"	e	enum:__anon44	file:
SINK_INPUT_MESSAGE_POST_DATA	protocol-simple.c	/^    SINK_INPUT_MESSAGE_POST_DATA = PA_SINK_INPUT_MESSAGE_MAX, \/* data from main loop to sink input *\/$/;"	e	enum:__anon9	file:
SINK_INPUT_MESSAGE_PREBUF_FORCE	protocol-native.c	/^    SINK_INPUT_MESSAGE_PREBUF_FORCE,$/;"	e	enum:__anon44	file:
SINK_INPUT_MESSAGE_SEEK	protocol-native.c	/^    SINK_INPUT_MESSAGE_SEEK,$/;"	e	enum:__anon44	file:
SINK_INPUT_MESSAGE_TRIGGER	protocol-native.c	/^    SINK_INPUT_MESSAGE_TRIGGER,$/;"	e	enum:__anon44	file:
SINK_INPUT_MESSAGE_UPDATE_BUFFER_ATTR	protocol-native.c	/^    SINK_INPUT_MESSAGE_UPDATE_BUFFER_ATTR$/;"	e	enum:__anon44	file:
SINK_INPUT_MESSAGE_UPDATE_LATENCY	protocol-native.c	/^    SINK_INPUT_MESSAGE_UPDATE_LATENCY,$/;"	e	enum:__anon44	file:
SOCKET_SERVER_GENERIC	socket-server.c	/^    enum { SOCKET_SERVER_GENERIC, SOCKET_SERVER_IPV4, SOCKET_SERVER_UNIX, SOCKET_SERVER_IPV6 } type;$/;"	e	enum:pa_socket_server::__anon48	file:
SOCKET_SERVER_IPV4	socket-server.c	/^    enum { SOCKET_SERVER_GENERIC, SOCKET_SERVER_IPV4, SOCKET_SERVER_UNIX, SOCKET_SERVER_IPV6 } type;$/;"	e	enum:pa_socket_server::__anon48	file:
SOCKET_SERVER_IPV6	socket-server.c	/^    enum { SOCKET_SERVER_GENERIC, SOCKET_SERVER_IPV4, SOCKET_SERVER_UNIX, SOCKET_SERVER_IPV6 } type;$/;"	e	enum:pa_socket_server::__anon48	file:
SOCKET_SERVER_UNIX	socket-server.c	/^    enum { SOCKET_SERVER_GENERIC, SOCKET_SERVER_IPV4, SOCKET_SERVER_UNIX, SOCKET_SERVER_IPV6 } type;$/;"	e	enum:pa_socket_server::__anon48	file:
SOURCE_OUTPUT_MESSAGE_POST_DATA	protocol-http.c	/^    SOURCE_OUTPUT_MESSAGE_POST_DATA = PA_SOURCE_OUTPUT_MESSAGE_MAX$/;"	e	enum:__anon18	file:
SOURCE_OUTPUT_MESSAGE_UPDATE_LATENCY	protocol-native.c	/^    SOURCE_OUTPUT_MESSAGE_UPDATE_LATENCY = PA_SOURCE_OUTPUT_MESSAGE_MAX$/;"	e	enum:__anon43	file:
STATE_DATA	protocol-http.c	/^    STATE_DATA$/;"	e	enum:state	file:
STATE_FAILED	lock-autospawn.c	/^    STATE_FAILED$/;"	e	enum:__anon50	file:
STATE_IDLE	lock-autospawn.c	/^    STATE_IDLE,$/;"	e	enum:__anon50	file:
STATE_MIME_HEADER	protocol-http.c	/^    STATE_MIME_HEADER,$/;"	e	enum:state	file:
STATE_OWNING	lock-autospawn.c	/^    STATE_OWNING,$/;"	e	enum:__anon50	file:
STATE_READ0	envelope.c	/^    STATE_READ0,$/;"	e	enum:envelope_state	file:
STATE_READ1	envelope.c	/^    STATE_READ1,$/;"	e	enum:envelope_state	file:
STATE_REQUEST_LINE	protocol-http.c	/^    STATE_REQUEST_LINE,$/;"	e	enum:state	file:
STATE_TAKEN	lock-autospawn.c	/^    STATE_TAKEN,$/;"	e	enum:__anon50	file:
STATE_VALID0	envelope.c	/^    STATE_VALID0,$/;"	e	enum:envelope_state	file:
STATE_VALID1	envelope.c	/^    STATE_VALID1,$/;"	e	enum:envelope_state	file:
STATE_WAIT0	envelope.c	/^    STATE_WAIT0,$/;"	e	enum:envelope_state	file:
STATE_WAIT1	envelope.c	/^    STATE_WAIT1,$/;"	e	enum:envelope_state	file:
STATE_WRITE0	envelope.c	/^    STATE_WRITE0,$/;"	e	enum:envelope_state	file:
STATE_WRITE1	envelope.c	/^    STATE_WRITE1$/;"	e	enum:envelope_state	file:
STORE_SAMPLES	remap_mmx.c	56;"	d	file:
STORE_SAMPLES	remap_sse.c	56;"	d	file:
SUN_LEN	socket-server.c	41;"	d	file:
SWAP_16	svolume_mmx.c	79;"	d	file:
SWAP_16	svolume_sse.c	60;"	d	file:
SWAP_16_2	svolume_mmx.c	86;"	d	file:
SWAP_16_2	svolume_sse.c	67;"	d	file:
SWAP_WORDS	sconv-s16be.c	77;"	d	file:
SWAP_WORDS	sconv-s16be.c	79;"	d	file:
SWAP_WORDS	sconv-s16le.c	76;"	d	file:
SWAP_WORDS	sconv-s16le.c	78;"	d	file:
TIMER_SLACK_NS	core-rtclock.c	98;"	d	file:
TIMES	sconv_sse.c	171;"	d	file:
TIMES	svolume_arm.c	130;"	d	file:
TIMES	svolume_mmx.c	243;"	d	file:
TIMES	svolume_sse.c	250;"	d	file:
TRUE	macro.h	189;"	d
UINT16_FROM	sconv-s16be.c	30;"	d	file:
UINT16_FROM	sconv-s16le.c	43;"	d	file:
UINT16_TO	sconv-s16be.c	31;"	d	file:
UINT16_TO	sconv-s16le.c	50;"	d	file:
UINT32_FROM	sconv-s16be.c	35;"	d	file:
UINT32_FROM	sconv-s16le.c	57;"	d	file:
UINT32_TO	sconv-s16be.c	36;"	d	file:
UINT32_TO	sconv-s16le.c	64;"	d	file:
UNLOAD_POLL_TIME	core-scache.c	66;"	d	file:
UNPACK_SAMPLES	remap_mmx.c	46;"	d	file:
UNPACK_SAMPLES	remap_sse.c	46;"	d	file:
UPLOAD_STREAM	protocol-native.c	156;"	d	file:
URL_CSS	protocol-http.c	51;"	d	file:
URL_LISTEN	protocol-http.c	53;"	d	file:
URL_LISTEN_SOURCE	protocol-http.c	54;"	d	file:
URL_ROOT	protocol-http.c	50;"	d	file:
URL_STATUS	protocol-http.c	52;"	d	file:
VOLUME_32x16	svolume_mmx.c	55;"	d	file:
VOLUME_32x16	svolume_sse.c	40;"	d	file:
VOLUME_PADDING	sample-util.c	106;"	d	file:
WHICH	aupdate.c	35;"	d	file:
WHITESPACE	conf-parser.c	39;"	d	file:
WHITESPACE	core-util.c	834;"	d	file:
WINDOW_TYPE	ffmpeg/resample2.c	39;"	d	file:
WINDOW_TYPE	ffmpeg/resample2.c	48;"	d	file:
WINDOW_TYPE	ffmpeg/resample2.c	55;"	d	file:
WRITE24	sconv-s16be.c	39;"	d	file:
WRITE24	sconv-s16le.c	71;"	d	file:
_GNU_SOURCE	rtkit.c	34;"	d	file:
_Y	asyncq.c	49;"	d	file:
_Y	asyncq.c	51;"	d	file:
_Y	flist.c	75;"	d	file:
_Y	flist.c	77;"	d	file:
__kernel_cmpxchg	atomic.h	405;"	d
__kernel_cmpxchg_t	atomic.h	/^typedef int (__kernel_cmpxchg_t)(int oldval, int newval, volatile int *ptr);$/;"	t
__kernel_cmpxchg_u	atomic.h	409;"	d
__kernel_cmpxchg_u_t	atomic.h	/^typedef int (__kernel_cmpxchg_u_t)(unsigned long oldval, unsigned long newval, volatile unsigned long *ptr);$/;"	t
__kernel_dmb	atomic.h	395;"	d
__kernel_dmb_t	atomic.h	/^typedef void (__kernel_dmb_t)(void);$/;"	t
_gettid	rtkit.c	/^static pid_t _gettid(void) {$/;"	f	file:
_reserved1	shm.c	/^    uint64_t _reserved1;$/;"	m	struct:shm_marker	file:
_reserved2	shm.c	/^    uint64_t _reserved2;$/;"	m	struct:shm_marker	file:
_reserved3	shm.c	/^    uint64_t _reserved3;$/;"	m	struct:shm_marker	file:
_reserved4	shm.c	/^    uint64_t _reserved4;$/;"	m	struct:shm_marker	file:
_st_13linear2alaw	g711.c	/^uint8_t _st_13linear2alaw[0x2000] = {$/;"	v
_st_14linear2ulaw	g711.c	/^uint8_t _st_14linear2ulaw[0x4000] = {$/;"	v
_st_alaw2linear16	g711.c	/^int16_t _st_alaw2linear16[256] = {$/;"	v
_st_ulaw2linear16	g711.c	/^int16_t _st_ulaw2linear16[256] = {$/;"	v
a	time-smoother.c	/^    double a, b, c;$/;"	m	struct:pa_smoother	file:
abc_valid	time-smoother.c	/^    pa_bool_t abc_valid:1;$/;"	m	struct:pa_smoother	file:
accumulated_size	memblock.h	/^    pa_atomic_t accumulated_size;$/;"	m	struct:pa_mempool_stat
acl_entry	ipacl.c	/^struct acl_entry {$/;"	s	file:
active_port	sink.h	/^    char *active_port;$/;"	m	struct:pa_sink_new_data
active_port	sink.h	/^    pa_device_port *active_port;$/;"	m	struct:pa_sink
active_port	source.h	/^    char *active_port;$/;"	m	struct:pa_source_new_data
active_port	source.h	/^    pa_device_port *active_port;$/;"	m	struct:pa_source
active_profile	card.h	/^    char *active_profile;$/;"	m	struct:pa_card_new_data
active_profile	card.h	/^    pa_card_profile *active_profile;$/;"	m	struct:pa_card
actual_resample_method	sink-input.h	/^    pa_resample_method_t requested_resample_method, actual_resample_method;$/;"	m	struct:pa_sink_input
actual_resample_method	source-output.h	/^    pa_resample_method_t requested_resample_method, actual_resample_method;$/;"	m	struct:pa_source_output
add_file	core-scache.c	/^static void add_file(pa_core *c, const char *pathname) {$/;"	f	file:
add_glib_properties	proplist-util.c	/^static void add_glib_properties(pa_proplist *p) {$/;"	f	file:
add_gtk_properties	proplist-util.c	/^static void add_gtk_properties(pa_proplist *p) {$/;"	f	file:
add_key_value	modargs.c	/^static int add_key_value(pa_hashmap *map, char *key, char *value, const char* const valid_keys[]) {$/;"	f	file:
add_timeout	dbus-util.c	/^static dbus_bool_t add_timeout(DBusTimeout *timeout, void *data) {$/;"	f	file:
add_to_history	time-smoother.c	/^static void add_to_history(pa_smoother *s, pa_usec_t x, pa_usec_t y) {$/;"	f	file:
add_watch	dbus-util.c	/^static dbus_bool_t add_watch(DBusWatch *watch, void *data) {$/;"	f	file:
address_ipv4	ipacl.c	/^    struct in_addr address_ipv4;$/;"	m	struct:acl_entry	typeref:struct:acl_entry::in_addr	file:
address_ipv6	ipacl.c	/^    struct in6_addr address_ipv6;$/;"	m	struct:acl_entry	typeref:struct:acl_entry::in6_addr	file:
adjust_latency	protocol-native.c	/^    pa_bool_t adjust_latency:1;$/;"	m	struct:playback_stream	file:
adjust_latency	protocol-native.c	/^    pa_bool_t adjust_latency:1;$/;"	m	struct:record_stream	file:
adjust_time	time-smoother.c	/^    pa_usec_t adjust_time, history_time;$/;"	m	struct:pa_smoother	file:
after_cb	rtpoll.c	/^    void (*after_cb)(pa_rtpoll_item *i);$/;"	m	struct:pa_rtpoll_item	file:
alaw_from_float32ne	sconv.c	/^static void alaw_from_float32ne(unsigned n, const float *a, uint8_t *b) {$/;"	f	file:
alaw_from_s16ne	sconv.c	/^static void alaw_from_s16ne(unsigned n, const int16_t *a, uint8_t *b) {$/;"	f	file:
alaw_to_float32ne	sconv.c	/^static void alaw_to_float32ne(unsigned n, const uint8_t *a, float *b) {$/;"	f	file:
alaw_to_s16ne	sconv.c	/^static void alaw_to_s16ne(unsigned n, const int8_t *a, int16_t *b) {$/;"	f	file:
allocate_aupdate	memtrap.c	/^static void allocate_aupdate(void) {$/;"	f	file:
allocated	tagstruct.c	/^    size_t length, allocated;$/;"	m	struct:pa_tagstruct	file:
allocated_size	memblock.h	/^    pa_atomic_t allocated_size;$/;"	m	struct:pa_mempool_stat
api	avahi-wrap.c	/^    AvahiPoll api;$/;"	m	struct:__anon19	file:
append	strbuf.c	/^static void append(pa_strbuf *sb, struct chunk *c) {$/;"	f	file:
args	cli-command.c	/^    unsigned args;$/;"	m	struct:command	file:
argument	module.h	/^    char *name, *argument;$/;"	m	struct:pa_module
asyncmsgq	sink.h	/^    pa_asyncmsgq *asyncmsgq;$/;"	m	struct:pa_sink
asyncmsgq	source.h	/^    pa_asyncmsgq *asyncmsgq;$/;"	m	struct:pa_source
asyncmsgq_free	asyncmsgq.c	/^static void asyncmsgq_free(pa_asyncmsgq *a) {$/;"	f	file:
asyncmsgq_item	asyncmsgq.c	/^struct asyncmsgq_item {$/;"	s	file:
asyncmsgq_read_after	rtpoll.c	/^static void asyncmsgq_read_after(pa_rtpoll_item *i) {$/;"	f	file:
asyncmsgq_read_before	rtpoll.c	/^static int asyncmsgq_read_before(pa_rtpoll_item *i) {$/;"	f	file:
asyncmsgq_read_cb	thread-mq.c	/^static void asyncmsgq_read_cb(pa_mainloop_api*api, pa_io_event* e, int fd, pa_io_event_flags_t events, void *userdata) {$/;"	f	file:
asyncmsgq_read_work	rtpoll.c	/^static int asyncmsgq_read_work(pa_rtpoll_item *i) {$/;"	f	file:
asyncmsgq_write_after	rtpoll.c	/^static void asyncmsgq_write_after(pa_rtpoll_item *i) {$/;"	f	file:
asyncmsgq_write_before	rtpoll.c	/^static int asyncmsgq_write_before(pa_rtpoll_item *i) {$/;"	f	file:
asyncmsgq_write_cb	thread-mq.c	/^static void asyncmsgq_write_cb(pa_mainloop_api*api, pa_io_event* e, int fd, pa_io_event_flags_t events, void *userdata) {$/;"	f	file:
asyncns	socket-client.c	/^    asyncns_t *asyncns;$/;"	m	struct:pa_socket_client	file:
asyncns_cb	socket-client.c	/^static void asyncns_cb(pa_mainloop_api*m, pa_io_event *e, int fd, pa_io_event_flags_t f, void *userdata) {$/;"	f	file:
asyncns_io_event	socket-client.c	/^    pa_io_event *asyncns_io_event;$/;"	m	struct:pa_socket_client	file:
asyncns_query	socket-client.c	/^    asyncns_query_t * asyncns_query;$/;"	m	struct:pa_socket_client	file:
asyncq	asyncmsgq.c	/^    pa_asyncq *asyncq;$/;"	m	struct:pa_asyncmsgq	file:
attach	sink-input.h	/^    void (*attach) (pa_sink_input *i);           \/* may be NULL *\/$/;"	m	struct:pa_sink_input
attach	source-output.h	/^    void (*attach) (pa_source_output *o);           \/* may be NULL *\/$/;"	m	struct:pa_source_output
attached	sink-input.h	/^        pa_bool_t attached:1; \/* True only between ->attach() and ->detach() calls *\/$/;"	m	struct:pa_sink_input::__anon27
attached	source-output.h	/^        pa_bool_t attached:1; \/* True only between ->attach() and ->detach() calls *\/$/;"	m	struct:pa_source_output::__anon15
aupdate	memtrap.c	/^static pa_aupdate *aupdate;$/;"	v	file:
auth_anonymous	protocol-esound.h	/^    pa_bool_t auth_anonymous;$/;"	m	struct:pa_esound_options
auth_anonymous	protocol-native.h	/^    pa_bool_t auth_anonymous;$/;"	m	struct:pa_native_options
auth_cookie	protocol-esound.h	/^    pa_auth_cookie *auth_cookie;$/;"	m	struct:pa_esound_options
auth_cookie	protocol-native.h	/^    pa_auth_cookie *auth_cookie;$/;"	m	struct:pa_native_options
auth_group	protocol-native.h	/^    char *auth_group;$/;"	m	struct:pa_native_options
auth_ip_acl	protocol-esound.h	/^    pa_ip_acl *auth_ip_acl;$/;"	m	struct:pa_esound_options
auth_ip_acl	protocol-native.h	/^    pa_ip_acl *auth_ip_acl;$/;"	m	struct:pa_native_options
auth_timeout	protocol-esound.c	/^static void auth_timeout(pa_mainloop_api *m, pa_time_event *e, const struct timeval *t, void *userdata) {$/;"	f	file:
auth_timeout	protocol-native.c	/^static void auth_timeout(pa_mainloop_api*m, pa_time_event *e, const struct timeval *t, void *userdata) {$/;"	f	file:
auth_timeout_event	protocol-esound.c	/^    pa_time_event *auth_timeout_event;$/;"	m	struct:connection	file:
auth_timeout_event	protocol-native.c	/^    pa_time_event *auth_timeout_event;$/;"	m	struct:pa_native_connection	file:
author	modinfo.h	/^    char *author;$/;"	m	struct:pa_modinfo
authorized	protocol-esound.c	/^    pa_bool_t authorized, swap_byte_order;$/;"	m	struct:connection	file:
authorized	protocol-native.c	/^    pa_bool_t authorized:1;$/;"	m	struct:pa_native_connection	file:
av_build_filter	ffmpeg/resample2.c	/^void av_build_filter(FELEM *filter, double factor, int tap_count, int phase_count, int scale, int type){$/;"	f
av_clip	ffmpeg/avcodec.h	/^static inline int av_clip(int a, int amin, int amax)$/;"	f
av_free	ffmpeg/avcodec.h	42;"	d
av_freep	ffmpeg/avcodec.h	/^static inline void av_freep(void *k) {$/;"	f
av_log	ffmpeg/avcodec.h	60;"	d
av_malloc	ffmpeg/avcodec.h	40;"	d
av_mallocz	ffmpeg/avcodec.h	39;"	d
av_realloc	ffmpeg/avcodec.h	41;"	d
av_resample	ffmpeg/resample2.c	/^int av_resample(AVResampleContext *c, short *dst, short *src, int *consumed, int src_size, int dst_size, int update_ctx){$/;"	f
av_resample_close	ffmpeg/resample2.c	/^void av_resample_close(AVResampleContext *c){$/;"	f
av_resample_compensate	ffmpeg/resample2.c	/^void av_resample_compensate(AVResampleContext *c, int sample_delta, int compensation_distance){$/;"	f
av_resample_init	ffmpeg/resample2.c	/^AVResampleContext *av_resample_init(int out_rate, int in_rate, int filter_size, int phase_shift, int linear, double cutoff){$/;"	f
avahi_poll	avahi-wrap.c	/^    pa_avahi_poll *avahi_poll;$/;"	m	struct:AvahiTimeout	file:
avahi_poll	avahi-wrap.c	/^    pa_avahi_poll *avahi_poll;$/;"	m	struct:AvahiWatch	file:
avg_gradient	time-smoother.c	/^static double avg_gradient(pa_smoother *s, pa_usec_t x) {$/;"	f	file:
awake	rtpoll.c	/^    pa_usec_t slept, awake;$/;"	m	struct:pa_rtpoll	file:
b	time-smoother.c	/^    double a, b, c;$/;"	m	struct:pa_smoother	file:
back	queue.c	/^    struct queue_entry *front, *back;$/;"	m	struct:pa_queue	typeref:struct:pa_queue::	file:
bad	memtrap.c	/^    pa_atomic_t bad;$/;"	m	struct:pa_memtrap	file:
base	mcalign.c	/^    size_t base;$/;"	m	struct:pa_mcalign	file:
base	memblockq.c	/^    size_t maxlength, tlength, base, prebuf, minreq, maxrewind;$/;"	m	struct:pa_memblockq	file:
base_volume	sink.h	/^    pa_volume_t base_volume; \/* shall be constant *\/$/;"	m	struct:pa_sink
base_volume	source.h	/^    pa_volume_t base_volume; \/* shall be constant *\/$/;"	m	struct:pa_source
before_cb	rtpoll.c	/^    int (*before_cb)(pa_rtpoll_item *i);$/;"	m	struct:pa_rtpoll_item	file:
begin	ratelimit.h	/^    pa_usec_t begin;$/;"	m	struct:pa_ratelimit
bessel	ffmpeg/resample2.c	/^static double bessel(double x){$/;"	f	file:
bits	ipacl.c	/^    int bits;$/;"	m	struct:acl_entry	file:
block	memblock.c	/^    pa_memblock *block;$/;"	m	struct:memexport_slot	file:
block_id	pstream.c	/^    uint32_t block_id;$/;"	m	struct:item_info	file:
block_size	memblock.c	/^    size_t block_size;$/;"	m	struct:pa_mempool	file:
blocks	memblock.c	/^    pa_hashmap *blocks;$/;"	m	struct:pa_memimport	file:
blocks	memblockq.c	/^    struct list_item *blocks, *blocks_tail;$/;"	m	struct:pa_memblockq	typeref:struct:pa_memblockq::list_item	file:
blocks	sample-util.h	/^    pa_memblock* blocks[PA_SAMPLE_MAX];$/;"	m	struct:pa_silence_cache
blocks_tail	memblockq.c	/^    struct list_item *blocks, *blocks_tail;$/;"	m	struct:pa_memblockq	typeref:struct:pa_memblockq::	file:
bucket_next	hashmap.c	/^    struct hashmap_entry *bucket_next, *bucket_previous;$/;"	m	struct:hashmap_entry	typeref:struct:hashmap_entry::hashmap_entry	file:
bucket_previous	hashmap.c	/^    struct hashmap_entry *bucket_next, *bucket_previous;$/;"	m	struct:hashmap_entry	typeref:struct:hashmap_entry::	file:
buf	resampler.c	/^        pa_memchunk buf[PA_CHANNELS_MAX];$/;"	m	struct:pa_resampler::__anon41	file:
buf1	resampler.c	/^    pa_memchunk buf1, buf2, buf3, buf4;$/;"	m	struct:pa_resampler	file:
buf1_samples	resampler.c	/^    unsigned buf1_samples, buf2_samples, buf3_samples, buf4_samples;$/;"	m	struct:pa_resampler	file:
buf2	resampler.c	/^    pa_memchunk buf1, buf2, buf3, buf4;$/;"	m	struct:pa_resampler	file:
buf2_samples	resampler.c	/^    unsigned buf1_samples, buf2_samples, buf3_samples, buf4_samples;$/;"	m	struct:pa_resampler	file:
buf3	resampler.c	/^    pa_memchunk buf1, buf2, buf3, buf4;$/;"	m	struct:pa_resampler	file:
buf3_samples	resampler.c	/^    unsigned buf1_samples, buf2_samples, buf3_samples, buf4_samples;$/;"	m	struct:pa_resampler	file:
buf4	resampler.c	/^    pa_memchunk buf1, buf2, buf3, buf4;$/;"	m	struct:pa_resampler	file:
buf4_samples	resampler.c	/^    unsigned buf1_samples, buf2_samples, buf3_samples, buf4_samples;$/;"	m	struct:pa_resampler	file:
buffer_attr	protocol-native.c	/^    pa_buffer_attr buffer_attr;$/;"	m	struct:playback_stream	file:
buffer_attr	protocol-native.c	/^    pa_buffer_attr buffer_attr;$/;"	m	struct:record_stream	file:
burst	ratelimit.h	/^    unsigned burst;$/;"	m	struct:pa_ratelimit
c	dbus-util.c	/^    pa_dbus_wrap_connection *c;$/;"	m	struct:timeout_data	file:
c	time-smoother.c	/^    double a, b, c;$/;"	m	struct:pa_smoother	file:
c_locale	core-util.c	/^static locale_t c_locale = NULL;$/;"	v	file:
c_locale_destroy	core-util.c	/^static void c_locale_destroy(void) {$/;"	f	file:
cached_dx	envelope.c	/^        size_t cached_dx;$/;"	m	struct:pa_envelope::__anon23	file:
cached_dy_dx	envelope.c	/^        float cached_dy_dx;$/;"	m	struct:pa_envelope::__anon23	file:
cached_dy_i	envelope.c	/^        int32_t cached_dy_i;$/;"	m	struct:pa_envelope::__anon23	file:
cached_valid	envelope.c	/^        pa_bool_t cached_valid;$/;"	m	struct:pa_envelope::__anon23	file:
calc_abc	time-smoother.c	/^static void calc_abc(pa_smoother *s) {$/;"	f	file:
calc_linear_float_stream_volumes	sample-util.c	/^static void calc_linear_float_stream_volumes(pa_mix_info streams[], unsigned nstreams, const pa_cvolume *volume, const pa_sample_spec *spec) {$/;"	f	file:
calc_linear_float_volume	sample-util.c	/^static void calc_linear_float_volume(float linear[], const pa_cvolume *volume) {$/;"	f	file:
calc_linear_integer_stream_volumes	sample-util.c	/^static void calc_linear_integer_stream_volumes(pa_mix_info streams[], unsigned nstreams, const pa_cvolume *volume, const pa_sample_spec *spec) {$/;"	f	file:
calc_linear_integer_volume	sample-util.c	/^static void calc_linear_integer_volume(int32_t linear[], const pa_cvolume *volume) {$/;"	f	file:
calc_map_table	resampler.c	/^static void calc_map_table(pa_resampler *r) {$/;"	f	file:
calc_sine	sample-util.c	/^static void calc_sine(float *f, size_t l, double freq) {$/;"	f	file:
calc_volume_table	sample-util.c	/^static const pa_calc_volume_func_t calc_volume_table[] = {$/;"	v	file:
call_data	dbus-util.h	/^    void *call_data;$/;"	m	struct:pa_dbus_pending
callback	avahi-wrap.c	/^    AvahiTimeoutCallback callback;$/;"	m	struct:AvahiTimeout	file:
callback	avahi-wrap.c	/^    AvahiWatchCallback callback;$/;"	m	struct:AvahiWatch	file:
callback	core-subscribe.c	/^    pa_subscription_cb_t callback;$/;"	m	struct:pa_subscription	file:
callback	hook-list.h	/^    pa_hook_cb_t callback;$/;"	m	struct:pa_hook_slot
callback	iochannel.c	/^    pa_iochannel_cb_t callback;$/;"	m	struct:pa_iochannel	file:
callback	iochannel.c	/^static void callback(pa_mainloop_api* m, pa_io_event *e, int fd, pa_io_event_flags_t f, void *userdata) {$/;"	f	file:
callback	ioline.c	/^    pa_ioline_cb_t callback;$/;"	m	struct:pa_ioline	file:
callback	pdispatch.c	/^    pa_pdispatch_cb_t callback;$/;"	m	struct:reply_info	file:
callback	socket-client.c	/^    pa_socket_client_cb_t callback;$/;"	m	struct:pa_socket_client	file:
callback	socket-server.c	/^static void callback(pa_mainloop_api *mainloop, pa_io_event *e, int fd, pa_io_event_flags_t f, void *userdata) {$/;"	f	file:
callback_table	pdispatch.c	/^    const pa_pdispatch_cb_t *callback_table;$/;"	m	struct:pa_pdispatch	file:
can_push	memblockq.c	/^static pa_bool_t can_push(pa_memblockq *bq, size_t l) {$/;"	f	file:
card	sink.h	/^    pa_card *card;                          \/* may be NULL *\/$/;"	m	struct:pa_sink
card	sink.h	/^    pa_card *card;$/;"	m	struct:pa_sink_new_data
card	source.h	/^    pa_card *card;                            \/* may be NULL *\/$/;"	m	struct:pa_source
card	source.h	/^    pa_card *card;$/;"	m	struct:pa_source_new_data
card_fill_tagstruct	protocol-native.c	/^static void card_fill_tagstruct(pa_native_connection *c, pa_tagstruct *t, pa_card *card) {$/;"	f	file:
cards	core.h	/^    pa_idxset *clients, *cards, *sinks, *sources, *sink_inputs, *source_outputs, *modules, *scache;$/;"	m	struct:pa_core
channel	pstream.c	/^    uint32_t channel;$/;"	m	struct:item_info	file:
channel_map	core-scache.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_scache_entry
channel_map	protocol-native.c	/^    pa_channel_map channel_map;$/;"	m	struct:upload_stream	file:
channel_map	protocol-simple.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_simple_options
channel_map	sink-input.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_sink_input
channel_map	sink-input.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_sink_input_new_data
channel_map	sink.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_sink
channel_map	sink.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_sink_new_data
channel_map	source-output.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_source_output
channel_map	source-output.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_source_output_new_data
channel_map	source.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_source
channel_map	source.h	/^    pa_channel_map channel_map;$/;"	m	struct:pa_source_new_data
channel_map_is_set	sink-input.h	/^    pa_bool_t channel_map_is_set:1;$/;"	m	struct:pa_sink_input_new_data
channel_map_is_set	sink.h	/^    pa_bool_t channel_map_is_set:1;$/;"	m	struct:pa_sink_new_data
channel_map_is_set	source-output.h	/^    pa_bool_t channel_map_is_set:1;$/;"	m	struct:pa_source_output_new_data
channel_map_is_set	source.h	/^    pa_bool_t channel_map_is_set:1;$/;"	m	struct:pa_source_new_data
check_type	object.h	/^    pa_bool_t (*check_type)(const char *type_name);$/;"	m	struct:pa_object
chunk	memblockq.c	/^    pa_memchunk chunk;$/;"	m	struct:list_item	file:
chunk	pstream.c	/^    pa_memchunk chunk;$/;"	m	struct:item_info	file:
chunk	sample-util.h	/^    pa_memchunk chunk;$/;"	m	struct:pa_mix_info
chunk	strbuf.c	/^struct chunk {$/;"	s	file:
cli_eof_cb	protocol-cli.c	/^static void cli_eof_cb(pa_cli*c, void*userdata) {$/;"	f	file:
cli_protocol_new	protocol-cli.c	/^static pa_cli_protocol* cli_protocol_new(pa_core *c) {$/;"	f	file:
cli_unlink	protocol-cli.c	/^static void cli_unlink(pa_cli_protocol *p, pa_cli *c) {$/;"	f	file:
client	cli.c	/^    pa_client *client;$/;"	m	struct:pa_cli	file:
client	client.h	/^    pa_client *client;$/;"	m	struct:pa_client_send_event_hook_data
client	protocol-esound.c	/^    pa_client *client;$/;"	m	struct:connection	file:
client	protocol-http.c	/^    pa_client *client;$/;"	m	struct:connection	file:
client	protocol-native.c	/^    pa_client *client;$/;"	m	struct:pa_native_connection	file:
client	protocol-simple.c	/^    pa_client *client;$/;"	m	struct:connection	file:
client	sink-input.h	/^    pa_client *client;                  \/* may be NULL *\/$/;"	m	struct:pa_sink_input
client	sink-input.h	/^    pa_client *client;$/;"	m	struct:pa_sink_input_new_data
client	source-output.h	/^    pa_client *client;                    \/* may be NULL *\/$/;"	m	struct:pa_source_output
client	source-output.h	/^    pa_client *client;$/;"	m	struct:pa_source_output_new_data
client_fill_tagstruct	protocol-native.c	/^static void client_fill_tagstruct(pa_native_connection *c, pa_tagstruct *t, pa_client *client) {$/;"	f	file:
client_kill	cli.c	/^static void client_kill(pa_client *client) {$/;"	f	file:
client_kill_cb	protocol-esound.c	/^static void client_kill_cb(pa_client *c) {$/;"	f	file:
client_kill_cb	protocol-http.c	/^static void client_kill_cb(pa_client *client) {$/;"	f	file:
client_kill_cb	protocol-native.c	/^static void client_kill_cb(pa_client *c) {$/;"	f	file:
client_kill_cb	protocol-simple.c	/^static void client_kill_cb(pa_client *client) {$/;"	f	file:
client_send_event_cb	protocol-native.c	/^static void client_send_event_cb(pa_client *client, const char*event, pa_proplist *pl) {$/;"	f	file:
clients	core.h	/^    pa_idxset *clients, *cards, *sinks, *sources, *sink_inputs, *source_outputs, *modules, *scache;$/;"	m	struct:pa_core
code	asyncmsgq.c	/^    int code;$/;"	m	struct:asyncmsgq_item	file:
command	cli-command.c	/^struct command {$/;"	s	file:
command_auth	protocol-native.c	/^static void command_auth(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_cork_playback_stream	protocol-native.c	/^static void command_cork_playback_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_cork_record_stream	protocol-native.c	/^static void command_cork_record_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_create_playback_stream	protocol-native.c	/^static void command_create_playback_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_create_record_stream	protocol-native.c	/^static void command_create_record_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_create_upload_stream	protocol-native.c	/^static void command_create_upload_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_delete_stream	protocol-native.c	/^static void command_delete_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_drain_playback_stream	protocol-native.c	/^static void command_drain_playback_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_exit	protocol-native.c	/^static void command_exit(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_extension	protocol-native.c	/^static void command_extension(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_finish_upload_stream	protocol-native.c	/^static void command_finish_upload_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_flush_record_stream	protocol-native.c	/^static void command_flush_record_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_get_info	protocol-native.c	/^static void command_get_info(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_get_info_list	protocol-native.c	/^static void command_get_info_list(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_get_playback_latency	protocol-native.c	/^static void command_get_playback_latency(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_get_record_latency	protocol-native.c	/^static void command_get_record_latency(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_get_server_info	protocol-native.c	/^static void command_get_server_info(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_kill	protocol-native.c	/^static void command_kill(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_load_module	protocol-native.c	/^static void command_load_module(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_lookup	protocol-native.c	/^static void command_lookup(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_move_stream	protocol-native.c	/^static void command_move_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_names	pdispatch.c	/^static const char *command_names[PA_COMMAND_MAX] = {$/;"	v	file:
command_play_sample	protocol-native.c	/^static void command_play_sample(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_remove_proplist	protocol-native.c	/^static void command_remove_proplist(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_remove_sample	protocol-native.c	/^static void command_remove_sample(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_set_card_profile	protocol-native.c	/^static void command_set_card_profile(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_set_client_name	protocol-native.c	/^static void command_set_client_name(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_set_default_sink_or_source	protocol-native.c	/^static void command_set_default_sink_or_source(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_set_mute	protocol-native.c	/^static void command_set_mute($/;"	f	file:
command_set_sink_or_source_port	protocol-native.c	/^static void command_set_sink_or_source_port(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_set_stream_buffer_attr	protocol-native.c	/^static void command_set_stream_buffer_attr(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_set_stream_name	protocol-native.c	/^static void command_set_stream_name(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_set_volume	protocol-native.c	/^static void command_set_volume($/;"	f	file:
command_stat	protocol-native.c	/^static void command_stat(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_subscribe	protocol-native.c	/^static void command_subscribe(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_suspend	protocol-native.c	/^static void command_suspend(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_table	protocol-native.c	/^static const pa_pdispatch_cb_t command_table[PA_COMMAND_MAX] = {$/;"	v	file:
command_trigger_or_flush_or_prebuf_playback_stream	protocol-native.c	/^static void command_trigger_or_flush_or_prebuf_playback_stream(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_unload_module	protocol-native.c	/^static void command_unload_module(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_update_proplist	protocol-native.c	/^static void command_update_proplist(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
command_update_stream_sample_rate	protocol-native.c	/^static void command_update_stream_sample_rate(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata) {$/;"	f	file:
commands	cli-command.c	/^static const struct command commands[] = {$/;"	v	typeref:struct:command	file:
compare_func	database-simple.c	/^static int compare_func(const void *a, const void *b) {$/;"	f	file:
compare_func	hashmap.c	/^    pa_compare_func_t compare_func;$/;"	m	struct:pa_hashmap	file:
compare_func	idxset.c	/^    pa_compare_func_t compare_func;$/;"	m	struct:pa_idxset	file:
compare_func	prioq.c	/^    pa_compare_func_t compare_func;$/;"	m	struct:pa_prioq	file:
compensation_distance	ffmpeg/resample2.c	/^    int compensation_distance;$/;"	m	struct:AVResampleContext	file:
compute_real_ratios	sink.c	/^static void compute_real_ratios(pa_sink *s) {$/;"	f	file:
compute_real_volume	sink.c	/^static void compute_real_volume(pa_sink *s) {$/;"	f	file:
compute_reference_ratios	sink.c	/^static void compute_reference_ratios(pa_sink *s) {$/;"	f	file:
cond	mutex-posix.c	/^    pthread_cond_t cond;$/;"	m	struct:pa_cond	file:
configured_sink_latency	protocol-native.c	/^    pa_usec_t configured_sink_latency;$/;"	m	struct:playback_stream	file:
configured_source_latency	protocol-native.c	/^    pa_usec_t configured_source_latency;$/;"	m	struct:record_stream	file:
connect_defer_cb	socket-client.c	/^static void connect_defer_cb(pa_mainloop_api *m, pa_defer_event *e, void *userdata) {$/;"	f	file:
connect_io_cb	socket-client.c	/^static void connect_io_cb(pa_mainloop_api*m, pa_io_event *e, int fd, pa_io_event_flags_t f, void *userdata) {$/;"	f	file:
connection	dbus-shared.c	/^    pa_dbus_wrap_connection *connection;$/;"	m	struct:pa_dbus_connection	file:
connection	dbus-util.c	/^    DBusConnection *connection;$/;"	m	struct:pa_dbus_wrap_connection	file:
connection	dbus-util.h	/^    DBusConnection *connection;$/;"	m	struct:pa_dbus_pending
connection	protocol-esound.c	/^typedef struct connection {$/;"	s	file:
connection	protocol-esound.c	/^} connection;$/;"	t	typeref:struct:connection	file:
connection	protocol-http.c	/^struct connection {$/;"	s	file:
connection	protocol-native.c	/^    pa_native_connection *connection;$/;"	m	struct:playback_stream	file:
connection	protocol-native.c	/^    pa_native_connection *connection;$/;"	m	struct:record_stream	file:
connection	protocol-native.c	/^    pa_native_connection *connection;$/;"	m	struct:upload_stream	file:
connection	protocol-simple.c	/^typedef struct connection {$/;"	s	file:
connection	protocol-simple.c	/^} connection;$/;"	t	typeref:struct:connection	file:
connection_free	protocol-esound.c	/^static void connection_free(pa_object *obj) {$/;"	f	file:
connection_free	protocol-simple.c	/^static void connection_free(pa_object *o) {$/;"	f	file:
connection_process_msg	protocol-esound.c	/^static int connection_process_msg(pa_msgobject *o, int code, void*userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
connection_process_msg	protocol-simple.c	/^static int connection_process_msg(pa_msgobject *o, int code, void*userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
connection_unlink	protocol-esound.c	/^static void connection_unlink(connection *c) {$/;"	f	file:
connection_unlink	protocol-http.c	/^static void connection_unlink(struct connection *c) {$/;"	f	file:
connection_unlink	protocol-simple.c	/^static void connection_unlink(connection *c) {$/;"	f	file:
connection_write	protocol-esound.c	/^static void connection_write(connection *c, const void *data, size_t length) {$/;"	f	file:
connection_write_prepare	protocol-esound.c	/^static void connection_write_prepare(connection *c, size_t length) {$/;"	f	file:
connections	protocol-cli.c	/^    pa_idxset *connections;$/;"	m	struct:pa_cli_protocol	file:
connections	protocol-esound.c	/^    pa_idxset *connections;$/;"	m	struct:pa_esound_protocol	file:
connections	protocol-http.c	/^    pa_idxset *connections;$/;"	m	struct:pa_http_protocol	file:
connections	protocol-native.c	/^    pa_idxset *connections;$/;"	m	struct:pa_native_protocol	file:
connections	protocol-simple.c	/^    pa_idxset *connections;$/;"	m	struct:pa_simple_protocol	file:
context_data	dbus-util.h	/^    void *context_data;$/;"	m	struct:pa_dbus_pending
convert_from_work_format	resampler.c	/^static pa_memchunk *convert_from_work_format(pa_resampler *r, pa_memchunk *input) {$/;"	f	file:
convert_to_work_format	resampler.c	/^static pa_memchunk* convert_to_work_format(pa_resampler *r, pa_memchunk *input) {$/;"	f	file:
cookie	core.h	/^    uint32_t cookie;$/;"	m	struct:pa_core
copy_init	resampler.c	/^static int copy_init(pa_resampler *r) {$/;"	f	file:
core	auth-cookie.c	/^    pa_core *core;$/;"	m	struct:pa_auth_cookie	file:
core	card.h	/^    pa_core *core;$/;"	m	struct:pa_card
core	cli.c	/^    pa_core *core;$/;"	m	struct:pa_cli	file:
core	client.h	/^    pa_core *core;$/;"	m	struct:pa_client
core	core-scache.h	/^    pa_core *core;$/;"	m	struct:pa_scache_entry
core	core-subscribe.c	/^    pa_core *core;$/;"	m	struct:pa_subscription	file:
core	core-subscribe.c	/^    pa_core *core;$/;"	m	struct:pa_subscription_event	file:
core	dbus-shared.c	/^    pa_core *core;$/;"	m	struct:pa_dbus_connection	file:
core	module.h	/^    pa_core *core;$/;"	m	struct:pa_module
core	play-memblockq.c	/^    pa_core *core;$/;"	m	struct:memblockq_stream	file:
core	protocol-cli.c	/^    pa_core *core;$/;"	m	struct:pa_cli_protocol	file:
core	protocol-esound.c	/^    pa_core *core;$/;"	m	struct:pa_esound_protocol	file:
core	protocol-http.c	/^    pa_core *core;$/;"	m	struct:pa_http_protocol	file:
core	protocol-native.c	/^    pa_core *core;$/;"	m	struct:pa_native_protocol	file:
core	protocol-simple.c	/^    pa_core *core;$/;"	m	struct:pa_simple_protocol	file:
core	sink-input.h	/^    pa_core *core;$/;"	m	struct:pa_sink_input
core	sink.h	/^    pa_core *core;$/;"	m	struct:pa_sink
core	sound-file-stream.c	/^    pa_core *core;$/;"	m	struct:file_stream	file:
core	source-output.h	/^    pa_core *core;$/;"	m	struct:pa_source_output
core	source.h	/^    pa_core *core;$/;"	m	struct:pa_source
core	x11wrap.c	/^    pa_core *core;$/;"	m	struct:pa_x11_wrapper	file:
core_free	core.c	/^static void core_free(pa_object *o) {$/;"	f	file:
core_process_msg	core.c	/^static int core_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
create_mutex	lock-autospawn.c	/^static void create_mutex(void) {$/;"	f	file:
creds	pdispatch.c	/^    const pa_creds *creds;$/;"	m	struct:pa_pdispatch	file:
creds	pstream.c	/^    pa_creds creds;$/;"	m	struct:item_info	file:
current	asyncmsgq.c	/^    struct asyncmsgq_item *current;$/;"	m	struct:pa_asyncmsgq	typeref:struct:pa_asyncmsgq::asyncmsgq_item	file:
current	mcalign.c	/^    pa_memchunk leftover, current;$/;"	m	struct:pa_mcalign	file:
current	pstream.c	/^        struct item_info* current;$/;"	m	struct:pa_pstream::__anon34	typeref:struct:pa_pstream::__anon34::item_info	file:
current_event	avahi-wrap.c	/^    AvahiWatchEvent current_event;$/;"	m	struct:AvahiWatch	file:
current_index	idxset.c	/^    uint32_t current_index;$/;"	m	struct:pa_idxset	file:
current_memblock	protocol-esound.c	/^        pa_memblock *current_memblock;$/;"	m	struct:connection::__anon11	file:
current_memblock	protocol-simple.c	/^        pa_memblock *current_memblock;$/;"	m	struct:connection::__anon8	file:
current_monitor_latency	protocol-native.c	/^    pa_usec_t current_monitor_latency;$/;"	m	struct:record_stream	file:
current_read	memblockq.c	/^    struct list_item *current_read, *current_write;$/;"	m	struct:pa_memblockq	typeref:struct:pa_memblockq::list_item	file:
current_sink_latency	protocol-native.c	/^    pa_usec_t current_sink_latency;$/;"	m	struct:playback_stream	file:
current_source_latency	protocol-native.c	/^    pa_usec_t current_source_latency;$/;"	m	struct:record_stream	file:
current_write	memblockq.c	/^    struct list_item *current_read, *current_write;$/;"	m	struct:pa_memblockq	typeref:struct:pa_memblockq::	file:
data	asyncq.c	/^    void *data;$/;"	m	struct:localq	file:
data	client.h	/^    pa_proplist *data;$/;"	m	struct:pa_client_send_event_hook_data
data	conf-parser.h	/^    void *data; \/* Where to store the variable's data *\/$/;"	m	struct:pa_config_item
data	database-simple.c	/^    pa_datum data;$/;"	m	struct:entry	file:
data	database.h	/^    void *data;$/;"	m	struct:pa_datum
data	dynarray.c	/^    void **data;$/;"	m	struct:pa_dynarray	file:
data	fdsem.c	/^    pa_fdsem_data *data;$/;"	m	struct:pa_fdsem	file:
data	hook-list.h	/^    void *data;$/;"	m	struct:pa_hook
data	hook-list.h	/^    void *data;$/;"	m	struct:pa_hook_slot
data	idxset.c	/^    void *data;$/;"	m	struct:idxset_entry	file:
data	memblock.c	/^    pa_atomic_ptr_t data;$/;"	m	struct:pa_memblock	file:
data	namereg.c	/^    void *data;$/;"	m	struct:namereg_entry	file:
data	packet.h	/^    uint8_t *data;$/;"	m	struct:pa_packet
data	pstream.c	/^        void *data;$/;"	m	struct:pa_pstream::__anon34	file:
data	pstream.c	/^        void *data;$/;"	m	struct:pa_pstream::__anon35	file:
data	queue.c	/^    void *data;$/;"	m	struct:queue_entry	file:
data	shared.c	/^    void *data;  \/* Points to memory maintained by the caller *\/$/;"	m	struct:pa_shared	file:
data	sink-input.h	/^    pa_proplist *data;$/;"	m	struct:pa_sink_input_send_event_hook_data
data	source-output.h	/^    pa_proplist *data;$/;"	m	struct:pa_source_output_send_event_hook_data
data	tagstruct.c	/^    uint8_t *data;$/;"	m	struct:pa_tagstruct	file:
data	thread-win32.c	/^    void *data;$/;"	m	struct:pa_tls_monitor	file:
data_length	protocol-esound.c	/^    size_t data_length;$/;"	m	struct:proto_handler	file:
data_next	idxset.c	/^    struct idxset_entry *data_next, *data_previous;$/;"	m	struct:idxset_entry	typeref:struct:idxset_entry::idxset_entry	file:
data_previous	idxset.c	/^    struct idxset_entry *data_next, *data_previous;$/;"	m	struct:idxset_entry	typeref:struct:idxset_entry::	file:
data_scan	idxset.c	/^static struct idxset_entry* data_scan(pa_idxset *s, unsigned hash, const void *p) {$/;"	f	file:
datum_from_gdbm	database-gdbm.c	/^static inline pa_datum* datum_from_gdbm(pa_datum *to, const datum *from) {$/;"	f	file:
datum_from_tdb	database-tdb.c	/^static inline pa_datum* datum_from_tdb(pa_datum *to, const TDB_DATA *from) {$/;"	f	file:
datum_to_gdbm	database-gdbm.c	/^static inline datum* datum_to_gdbm(datum *to, const pa_datum *from) {$/;"	f	file:
datum_to_tdb	database-tdb.c	/^static inline TDB_DATA* datum_to_tdb(TDB_DATA *to, const pa_datum *from) {$/;"	f	file:
dbus_connection_new	dbus-shared.c	/^static pa_dbus_connection* dbus_connection_new(pa_core *c, pa_dbus_wrap_connection *conn, const char *name) {$/;"	f	file:
de	time-smoother.c	/^    double de;            \/* Gradient we estimated for point e *\/$/;"	m	struct:pa_smoother	file:
dead	core-subscribe.c	/^    pa_bool_t dead;$/;"	m	struct:pa_subscription	file:
dead	hook-list.h	/^    pa_bool_t dead;$/;"	m	struct:pa_hook_slot
dead	ioline.c	/^    pa_bool_t dead:1;$/;"	m	struct:pa_ioline	file:
dead	protocol-esound.c	/^    pa_bool_t dead;$/;"	m	struct:connection	file:
dead	protocol-simple.c	/^    pa_bool_t dead;$/;"	m	struct:connection	file:
dead	pstream.c	/^    pa_bool_t dead;$/;"	m	struct:pa_pstream	file:
dead	rtpoll.c	/^    pa_bool_t dead;$/;"	m	struct:pa_rtpoll_item	file:
def	envelope.c	/^    const pa_envelope_def *def;$/;"	m	struct:pa_envelope_item	file:
default_channel_map	core.h	/^    pa_channel_map default_channel_map;$/;"	m	struct:pa_core
default_fragment_size_msec	core.h	/^    unsigned default_n_fragments, default_fragment_size_msec;$/;"	m	struct:pa_core
default_n_fragments	core.h	/^    unsigned default_n_fragments, default_fragment_size_msec;$/;"	m	struct:pa_core
default_sample_spec	core.h	/^    pa_sample_spec default_sample_spec;$/;"	m	struct:pa_core
default_sink	core.h	/^    pa_sink *default_sink;$/;"	m	struct:pa_core
default_sink	protocol-esound.h	/^    char *default_sink, *default_source;$/;"	m	struct:pa_esound_options
default_sink	protocol-simple.h	/^    char *default_sink, *default_source;$/;"	m	struct:pa_simple_options
default_source	core.h	/^    pa_source *default_source;$/;"	m	struct:pa_core
default_source	protocol-esound.h	/^    char *default_sink, *default_source;$/;"	m	struct:pa_esound_options
default_source	protocol-simple.h	/^    char *default_sink, *default_source;$/;"	m	struct:pa_simple_options
defer_callback	ioline.c	/^static void defer_callback(pa_mainloop_api*m, pa_defer_event*e, void *userdata) {$/;"	f	file:
defer_callback	protocol-esound.c	/^static void defer_callback(pa_mainloop_api*a, pa_defer_event *e, void *userdata) {$/;"	f	file:
defer_callback	pstream.c	/^static void defer_callback(pa_mainloop_api *m, pa_defer_event *e, void*userdata) {$/;"	f	file:
defer_cb	core-subscribe.c	/^static void defer_cb(pa_mainloop_api *m, pa_defer_event *de, void *userdata) {$/;"	f	file:
defer_cb	module.c	/^static void defer_cb(pa_mainloop_api*api, pa_defer_event *e, void *userdata) {$/;"	f	file:
defer_close	ioline.c	/^    pa_bool_t defer_close:1;$/;"	m	struct:pa_ioline	file:
defer_event	ioline.c	/^    pa_defer_event *defer_event;$/;"	m	struct:pa_ioline	file:
defer_event	protocol-esound.c	/^    pa_defer_event *defer_event;$/;"	m	struct:connection	file:
defer_event	pstream.c	/^    pa_defer_event *defer_event;$/;"	m	struct:pa_pstream	file:
defer_event	socket-client.c	/^    pa_defer_event *defer_event;$/;"	m	struct:pa_socket_client	file:
defer_event	x11wrap.c	/^    pa_defer_event* defer_event;$/;"	m	struct:pa_x11_wrapper	file:
defer_event	x11wrap.c	/^static void defer_event(pa_mainloop_api *m, pa_defer_event *e, void *userdata) {$/;"	f	file:
defer_kill	cli.c	/^    int defer_kill;$/;"	m	struct:pa_cli	file:
delay_memblockq	source-output.h	/^        pa_memblockq *delay_memblockq;$/;"	m	struct:pa_source_output::__anon15
deprecated	modinfo.h	/^    char *deprecated;$/;"	m	struct:pa_modinfo
description	card.h	/^    char *description;$/;"	m	struct:pa_card_profile
description	modinfo.h	/^    char *description;$/;"	m	struct:pa_modinfo
description	protocol-esound.c	/^    const char *description;$/;"	m	struct:proto_handler	file:
description	sink.h	/^    char *description;$/;"	m	struct:pa_device_port
descriptor	pstream.c	/^        pa_pstream_descriptor descriptor;$/;"	m	struct:pa_pstream::__anon34	file:
descriptor	pstream.c	/^        pa_pstream_descriptor descriptor;$/;"	m	struct:pa_pstream::__anon35	file:
destroy_mutex	lock-autospawn.c	/^static void destroy_mutex(void) {$/;"	f	file:
detach	sink-input.h	/^    void (*detach) (pa_sink_input *i);           \/* may be NULL *\/$/;"	m	struct:pa_sink_input
detach	source-output.h	/^    void (*detach) (pa_source_output *o);           \/* may be NULL *\/$/;"	m	struct:pa_source_output
devices	random.c	/^static const char * const devices[] = { "\/dev\/urandom", "\/dev\/random", NULL };$/;"	v	file:
die_callback	pstream.c	/^    pa_pstream_notify_cb_t die_callback;$/;"	m	struct:pa_pstream	file:
die_callback_userdata	pstream.c	/^    void *die_callback_userdata;$/;"	m	struct:pa_pstream	file:
direct_on_input	source-output.h	/^        pa_sink_input *direct_on_input;       \/* may be NULL *\/$/;"	m	struct:pa_source_output::__anon15
direct_on_input	source-output.h	/^    pa_sink_input *direct_on_input;       \/* may be NULL *\/$/;"	m	struct:pa_source_output
direct_on_input	source-output.h	/^    pa_sink_input *direct_on_input;$/;"	m	struct:pa_source_output_new_data
direct_outputs	sink-input.h	/^        pa_hashmap *direct_outputs;$/;"	m	struct:pa_sink_input::__anon27
direct_outputs	sink-input.h	/^    pa_idxset *direct_outputs;$/;"	m	struct:pa_sink_input
disable_lfe_remixing	core.h	/^    pa_bool_t disable_lfe_remixing:1;$/;"	m	struct:pa_core
disable_remixing	core.h	/^    pa_bool_t disable_remixing:1;$/;"	m	struct:pa_core
disallow_exit	core.h	/^    pa_bool_t disallow_exit:1;$/;"	m	struct:pa_core
disallow_module_loading	core.h	/^    pa_bool_t disallow_module_loading:1;$/;"	m	struct:pa_core
dispatch_cb	dbus-util.c	/^static void dispatch_cb(pa_mainloop_api *ea, pa_defer_event *ev, void *userdata) {$/;"	f	file:
dispatch_event	dbus-util.c	/^    pa_defer_event* dispatch_event;$/;"	m	struct:pa_dbus_wrap_connection	file:
dispatch_status	dbus-util.c	/^static void dispatch_status(DBusConnection *conn, DBusDispatchStatus status, void *userdata) {$/;"	f	file:
display	x11wrap.c	/^    Display *display;$/;"	m	struct:pa_x11_wrapper	file:
display_io_event	x11wrap.c	/^static void display_io_event(pa_mainloop_api *m, pa_io_event *e, int fd, pa_io_event_flags_t f, void *userdata) {$/;"	f	file:
dl	module.h	/^    lt_dlhandle dl;$/;"	m	struct:pa_module
do_call	socket-client.c	/^static void do_call(pa_socket_client *c) {$/;"	f	file:
do_connect	socket-client.c	/^static int do_connect(pa_socket_client *c, const struct sockaddr *sa, socklen_t len) {$/;"	f	file:
do_read	ioline.c	/^static int do_read(pa_ioline *l) {$/;"	f	file:
do_read	protocol-esound.c	/^static int do_read(connection *c) {$/;"	f	file:
do_read	protocol-simple.c	/^static int do_read(connection *c) {$/;"	f	file:
do_read	pstream.c	/^static int do_read(pa_pstream *p) {$/;"	f	file:
do_remap	remap.h	/^    pa_do_remap_func_t do_remap;$/;"	m	struct:pa_remap
do_something	pstream.c	/^static void do_something(pa_pstream *p) {$/;"	f	file:
do_unlink	shm.h	/^    pa_bool_t do_unlink:1;$/;"	m	struct:pa_shm
do_volume_table	svolume_c.c	/^static pa_do_volume_func_t do_volume_table[] =$/;"	v	file:
do_work	ioline.c	/^static void do_work(pa_ioline *l) {$/;"	f	file:
do_work	protocol-esound.c	/^static void do_work(connection *c) {$/;"	f	file:
do_work	protocol-http.c	/^static void do_work(struct connection *c) {$/;"	f	file:
do_work	protocol-simple.c	/^static void do_work(connection *c) {$/;"	f	file:
do_write	ioline.c	/^static int do_write(pa_ioline *l) {$/;"	f	file:
do_write	protocol-esound.c	/^static int do_write(connection *c) {$/;"	f	file:
do_write	protocol-http.c	/^static int do_write(struct connection *c) {$/;"	f	file:
do_write	protocol-simple.c	/^static int do_write(connection *c) {$/;"	f	file:
do_write	pstream.c	/^static int do_write(pa_pstream *p) {$/;"	f	file:
done	module.h	/^    void (*done)(pa_module*m);$/;"	m	struct:pa_module
done	once.h	/^    pa_atomic_t ref, done;$/;"	m	struct:pa_once
dont_rewind_render	sink-input.h	/^        pa_bool_t rewrite_flush:1, dont_rewind_render:1;$/;"	m	struct:pa_sink_input::__anon27
dp	time-smoother.c	/^    double dp;            \/* Gradient we want at point p *\/$/;"	m	struct:pa_smoother	file:
drain_callback	ioline.c	/^    pa_ioline_drain_cb_t drain_callback;$/;"	m	struct:pa_ioline	file:
drain_callback	pdispatch.c	/^    pa_pdispatch_drain_cb_t drain_callback;$/;"	m	struct:pa_pdispatch	file:
drain_callback	pstream.c	/^    pa_pstream_notify_cb_t drain_callback;$/;"	m	struct:pa_pstream	file:
drain_callback_userdata	pstream.c	/^    void *drain_callback_userdata;$/;"	m	struct:pa_pstream	file:
drain_request	protocol-native.c	/^    pa_bool_t drain_request:1;$/;"	m	struct:playback_stream	file:
drain_tag	protocol-native.c	/^    uint32_t drain_tag;$/;"	m	struct:playback_stream	file:
drain_userdata	ioline.c	/^    void *drain_userdata;$/;"	m	struct:pa_ioline	file:
drain_userdata	pdispatch.c	/^    void *drain_userdata;$/;"	m	struct:pa_pdispatch	file:
drained	sink-input.h	/^        pa_atomic_t drained;$/;"	m	struct:pa_sink_input::__anon27
driver	card.h	/^    char *driver;$/;"	m	struct:pa_card
driver	card.h	/^    const char *driver;$/;"	m	struct:pa_card_new_data
driver	client.h	/^    char *driver;$/;"	m	struct:pa_client
driver	client.h	/^    const char *driver;$/;"	m	struct:pa_client_new_data
driver	sink-input.h	/^    char *driver;                       \/* may be NULL *\/$/;"	m	struct:pa_sink_input
driver	sink-input.h	/^    const char *driver;$/;"	m	struct:pa_sink_input_new_data
driver	sink.h	/^    char *driver;                           \/* may be NULL *\/$/;"	m	struct:pa_sink
driver	sink.h	/^    const char *driver;$/;"	m	struct:pa_sink_new_data
driver	source-output.h	/^    char *driver;                         \/* may be NULL *\/$/;"	m	struct:pa_source_output
driver	source-output.h	/^    const char *driver;$/;"	m	struct:pa_source_output_new_data
driver	source.h	/^    char *driver;                             \/* may be NULL *\/$/;"	m	struct:pa_source
driver	source.h	/^    const char *driver;$/;"	m	struct:pa_source_new_data
drop_backlog	memblockq.c	/^static void drop_backlog(pa_memblockq *bq) {$/;"	f	file:
drop_block	memblockq.c	/^static void drop_block(pa_memblockq *bq, struct list_item *q) {$/;"	f	file:
drop_initial	protocol-native.c	/^    size_t drop_initial;$/;"	m	struct:record_stream	file:
drop_old	time-smoother.c	/^static void drop_old(pa_smoother *s, pa_usec_t x) {$/;"	f	file:
dst_incr	ffmpeg/resample2.c	/^    int dst_incr;$/;"	m	struct:AVResampleContext	file:
dump_event	core-subscribe.c	/^static void dump_event(const char * prefix, pa_subscription_event*e) {$/;"	f	file:
dynamic	tagstruct.c	/^    pa_bool_t dynamic;$/;"	m	struct:pa_tagstruct	file:
early_requests	protocol-native.c	/^    pa_bool_t early_requests:1;$/;"	m	struct:playback_stream	file:
early_requests	protocol-native.c	/^    pa_bool_t early_requests:1;$/;"	m	struct:record_stream	file:
efd	fdsem.c	/^    int efd;$/;"	m	struct:pa_fdsem	file:
empty_pipe	lock-autospawn.c	/^static void empty_pipe(void) {$/;"	f	file:
enable_mainloop_sources	iochannel.c	/^static void enable_mainloop_sources(pa_iochannel *io) {$/;"	f	file:
entry	database-simple.c	/^typedef struct entry {$/;"	s	file:
entry	database-simple.c	/^} entry;$/;"	t	typeref:struct:entry	file:
entry	modargs.c	/^struct entry {$/;"	s	file:
envelope_begin_read	envelope.c	/^static void envelope_begin_read(pa_envelope *e, int *v) {$/;"	f	file:
envelope_begin_write	envelope.c	/^static void envelope_begin_write(pa_envelope *e, int *v) {$/;"	f	file:
envelope_commit_read	envelope.c	/^static void envelope_commit_read(pa_envelope *e, int v) {$/;"	f	file:
envelope_commit_write	envelope.c	/^static pa_bool_t envelope_commit_write(pa_envelope *e, int v) {$/;"	f	file:
envelope_merge	envelope.c	/^static void envelope_merge(pa_envelope *e, int v) {$/;"	f	file:
envelope_state	envelope.c	/^enum envelope_state {$/;"	g	file:
environ	proplist-util.c	32;"	d	file:
eof_callback	cli.c	/^    pa_cli_eof_cb_t eof_callback;$/;"	m	struct:pa_cli	file:
escape_html	protocol-http.c	/^static char *escape_html(const char *t) {$/;"	f	file:
esd_client_state	esound.h	/^enum esd_client_state {$/;"	g
esd_client_state_t	esound.h	/^typedef int esd_client_state_t;$/;"	t
esd_format_t	esound.h	/^typedef int esd_format_t;$/;"	t
esd_info	esound.h	/^typedef struct esd_info {$/;"	s
esd_info_t	esound.h	/^} esd_info_t;$/;"	t	typeref:struct:esd_info
esd_player_info	esound.h	/^typedef struct esd_player_info {$/;"	s
esd_player_info_t	esound.h	/^} esd_player_info_t;$/;"	t	typeref:struct:esd_player_info
esd_proto	esound.h	/^enum esd_proto {$/;"	g
esd_proto_all_info	protocol-esound.c	/^static int esd_proto_all_info(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_connect	protocol-esound.c	/^static int esd_proto_connect(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_get_latency	protocol-esound.c	/^static int esd_proto_get_latency(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_handler_info_t	protocol-esound.c	/^} esd_proto_handler_info_t;$/;"	t	typeref:struct:proto_handler	file:
esd_proto_sample_cache	protocol-esound.c	/^static int esd_proto_sample_cache(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_sample_free_or_play	protocol-esound.c	/^static int esd_proto_sample_free_or_play(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_sample_get_id	protocol-esound.c	/^static int esd_proto_sample_get_id(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_sample_pan	protocol-esound.c	/^static int esd_proto_sample_pan(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_server_info	protocol-esound.c	/^static int esd_proto_server_info(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_standby_mode	protocol-esound.c	/^static int esd_proto_standby_mode(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_standby_or_resume	protocol-esound.c	/^static int esd_proto_standby_or_resume(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_stream_pan	protocol-esound.c	/^static int esd_proto_stream_pan(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_stream_play	protocol-esound.c	/^static int esd_proto_stream_play(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_stream_record	protocol-esound.c	/^static int esd_proto_stream_record(connection *c, esd_proto_t request, const void *data, size_t length) {$/;"	f	file:
esd_proto_t	esound.h	/^typedef int esd_proto_t;$/;"	t
esd_sample_info	esound.h	/^typedef struct esd_sample_info {$/;"	s
esd_sample_info_t	esound.h	/^} esd_sample_info_t;$/;"	t	typeref:struct:esd_sample_info
esd_server_info	esound.h	/^typedef struct esd_server_info {$/;"	s
esd_server_info_t	esound.h	/^} esd_server_info_t;$/;"	t	typeref:struct:esd_server_info
esd_standby_mode	esound.h	/^enum esd_standby_mode {$/;"	g
esd_standby_mode_t	esound.h	/^typedef int esd_standby_mode_t;$/;"	t
esound_protocol_new	protocol-esound.c	/^static pa_esound_protocol* esound_protocol_new(pa_core *c) {$/;"	f	file:
estimate	time-smoother.c	/^static void estimate(pa_smoother *s, pa_usec_t x, pa_usec_t *y, double *deriv) {$/;"	f	file:
event	client.h	/^    const char *event;$/;"	m	struct:pa_client_send_event_hook_data
event	sink-input.h	/^    const char *event;$/;"	m	struct:pa_sink_input_send_event_hook_data
event	source-output.h	/^    const char *event;$/;"	m	struct:pa_source_output_send_event_hook_data
event_cb	x11wrap.c	/^    pa_x11_event_cb_t event_cb;$/;"	m	struct:pa_x11_client	file:
events	poll.h	/^    short int events;           \/* Types of events poller cares about.  *\/$/;"	m	struct:pollfd
ex	time-smoother.c	/^    pa_usec_t ex, ey;     \/* Point e, which we estimated before and need to smooth to *\/$/;"	m	struct:pa_smoother	file:
exit_callback	core.c	/^static void exit_callback(pa_mainloop_api *m, pa_time_event *e, const struct timeval *t, void *userdata) {$/;"	f	file:
exit_event	core.h	/^    pa_time_event *exit_event;$/;"	m	struct:pa_core
exit_idle_time	core.h	/^    int exit_idle_time, scache_idle_time;$/;"	m	struct:pa_core
expand_buffer_trashcontents	usergroup.c	/^static int expand_buffer_trashcontents(void **bufptr, size_t *buflenptr) {$/;"	f	file:
export	pstream.c	/^    pa_memexport *export;$/;"	m	struct:pa_pstream	file:
exported_size	memblock.h	/^    pa_atomic_t exported_size;$/;"	m	struct:pa_mempool_stat
extend	tagstruct.c	/^static void extend(pa_tagstruct*t, size_t l) {$/;"	f	file:
extensions	protocol-native.c	/^    pa_hashmap *extensions;$/;"	m	struct:pa_native_protocol	file:
ey	time-smoother.c	/^    pa_usec_t ex, ey;     \/* Point e, which we estimated before and need to smooth to *\/$/;"	m	struct:pa_smoother	file:
f	envelope.c	/^            float *f;$/;"	m	union:pa_envelope::__anon23::__anon24	file:
f	envelope.c	/^        float f;$/;"	m	union:pa_envelope_item::__anon22	file:
f	envelope.h	/^        float f[PA_ENVELOPE_POINTS_MAX];$/;"	m	struct:pa_envelope_def::__anon21
f	sample-util.c	/^  float f;$/;"	m	union:__anon7	file:
f	sample-util.h	/^        float f;$/;"	m	union:pa_mix_info::__anon20
f	vector.h	/^    float f[PA_FLOAT_VECTOR_SIZE];$/;"	m	union:pa_float_vector
fail	cli.c	/^    pa_bool_t fail, kill_requested;$/;"	m	struct:pa_cli	file:
failure	ioline.c	/^static void failure(pa_ioline *l, pa_bool_t process_leftover) {$/;"	f	file:
family	ipacl.c	/^    int family;$/;"	m	struct:acl_entry	file:
fd	poll.h	/^    int fd;                     \/* File descriptor to poll.  *\/$/;"	m	struct:pollfd
fd	socket-client.c	/^    int fd;$/;"	m	struct:pa_socket_client	file:
fd	socket-server.c	/^    int fd;$/;"	m	struct:pa_socket_server	file:
fd	x11wrap.c	/^    int fd;$/;"	m	struct:pa_x11_internal	file:
fds	fdsem.c	/^    int fds[2];$/;"	m	struct:pa_fdsem	file:
fdsem_after	rtpoll.c	/^static void fdsem_after(pa_rtpoll_item *i) {$/;"	f	file:
fdsem_before	rtpoll.c	/^static int fdsem_before(pa_rtpoll_item *i) {$/;"	f	file:
ffmpeg	resampler.c	/^    } ffmpeg;$/;"	m	struct:pa_resampler	typeref:struct:pa_resampler::__anon41	file:
ffmpeg_free	resampler.c	/^static void ffmpeg_free(pa_resampler *r) {$/;"	f	file:
ffmpeg_init	resampler.c	/^static int ffmpeg_init(pa_resampler *r) {$/;"	f	file:
ffmpeg_resample	resampler.c	/^static void ffmpeg_resample(pa_resampler *r, const pa_memchunk *input, unsigned in_n_frames, pa_memchunk *output, unsigned *out_n_frames) {$/;"	f	file:
file_stream	sound-file-stream.c	/^typedef struct file_stream {$/;"	s	file:
file_stream	sound-file-stream.c	/^} file_stream;$/;"	t	typeref:struct:file_stream	file:
file_stream_free	sound-file-stream.c	/^static void file_stream_free(pa_object *o) {$/;"	f	file:
file_stream_process_msg	sound-file-stream.c	/^static int file_stream_process_msg(pa_msgobject *o, int code, void*userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
file_stream_unlink	sound-file-stream.c	/^static void file_stream_unlink(file_stream *u) {$/;"	f	file:
filename	core-scache.h	/^    char *filename;$/;"	m	struct:pa_scache_entry
filename	database-simple.c	/^    char *filename;$/;"	m	struct:simple_data	file:
filename	socket-server.c	/^    char *filename;$/;"	m	struct:pa_socket_server	file:
fill_data	database-simple.c	/^static int fill_data(simple_data *db, FILE *f) {$/;"	f	file:
fill_mix_info	sink.c	/^static unsigned fill_mix_info(pa_sink *s, size_t *length, pa_mix_info *info, unsigned maxinfo) {$/;"	f	file:
filter_bank	ffmpeg/resample2.c	/^    FELEM *filter_bank;$/;"	m	struct:AVResampleContext	file:
filter_length	ffmpeg/resample2.c	/^    int filter_length;$/;"	m	struct:AVResampleContext	file:
fix_current_read	memblockq.c	/^static void fix_current_read(pa_memblockq *bq) {$/;"	f	file:
fix_current_write	memblockq.c	/^static void fix_current_write(pa_memblockq *bq) {$/;"	f	file:
fix_playback_buffer_attr	protocol-native.c	/^static void fix_playback_buffer_attr(playback_stream *s) {$/;"	f	file:
fix_record_buffer_attr_post	protocol-native.c	/^static void fix_record_buffer_attr_post(record_stream *s) {$/;"	f	file:
fix_record_buffer_attr_pre	protocol-native.c	/^static void fix_record_buffer_attr_pre(record_stream *s) {$/;"	f	file:
fixed_latency	sink.h	/^        pa_usec_t fixed_latency; \/* for sinks with PA_SINK_DYNAMIC_LATENCY this is 0 *\/$/;"	m	struct:pa_sink::__anon36
fixed_latency	source.h	/^        pa_usec_t fixed_latency; \/* for sources with PA_SOURCE_DYNAMIC_LATENCY this is 0 *\/$/;"	m	struct:pa_source::__anon2
fixup_sample_spec	protocol-native.c	/^static void fixup_sample_spec(pa_native_connection *c, pa_sample_spec *fixed, const pa_sample_spec *original) {$/;"	f	file:
flags	log.c	/^static pa_log_flags_t flags = 0, flags_override = 0;$/;"	v	file:
flags	resampler.c	/^    pa_resample_flags_t flags;$/;"	m	struct:pa_resampler	file:
flags	sink-input.h	/^    pa_sink_input_flags_t flags;$/;"	m	struct:pa_sink_input
flags	sink-input.h	/^    pa_sink_input_flags_t flags;$/;"	m	struct:pa_sink_input_new_data
flags	sink.h	/^    pa_sink_flags_t flags;$/;"	m	struct:pa_sink
flags	source-output.h	/^    pa_source_output_flags_t flags;$/;"	m	struct:pa_source_output
flags	source-output.h	/^    pa_source_output_flags_t flags;$/;"	m	struct:pa_source_output_new_data
flags	source.h	/^    pa_source_flags_t flags;$/;"	m	struct:pa_source
flags_override	log.c	/^static pa_log_flags_t flags = 0, flags_override = 0;$/;"	v	file:
flat_volumes	core.h	/^    pa_bool_t flat_volumes:1;$/;"	m	struct:pa_core
float32ne_to_float32ne	sconv.c	/^static void float32ne_to_float32ne(unsigned n, const float *a, float *b) {$/;"	f	file:
float32re_to_float32ne	sconv.c	/^static void float32re_to_float32ne(unsigned n, const float *a, float *b) {$/;"	f	file:
flush	fdsem.c	/^static void flush(pa_fdsem *f) {$/;"	f	file:
flush_postq	asyncq.c	/^static pa_bool_t flush_postq(pa_asyncq *l, pa_bool_t wait_op) {$/;"	f	file:
fooauthcookiehfoo	auth-cookie.h	2;"	d
fooauthkeyhfoo	authkey.h	2;"	d
fooavahiwrapperhfoo	avahi-wrap.h	2;"	d
fooclicommandhfoo	cli-command.h	2;"	d
fooclihfoo	cli.h	2;"	d
fooclitexthfoo	cli-text.h	2;"	d
fooconfparserhfoo	conf-parser.h	2;"	d
foocoreerrorhfoo	core-error.h	2;"	d
foocorehfoo	core.h	2;"	d
foocorescachehfoo	core-scache.h	2;"	d
foocoresubscribehfoo	core-subscribe.h	2;"	d
foocoreutilhfoo	core-util.h	2;"	d
foocpuarmhfoo	cpu-arm.h	2;"	d
foocpux86hfoo	cpu-x86.h	2;"	d
foocredshfoo	creds.h	2;"	d
foodbussharedhfoo	dbus-shared.h	2;"	d
foodbusutilhfoo	dbus-util.h	2;"	d
fooendianmacroshfoo	endianmacros.h	2;"	d
fooesoundhfoo	esound.h	2;"	d
foog711hfoo	g711.h	2;"	d
foohooklistfoo	hook-list.h	2;"	d
fooinet_ntophfoo	inet_ntop.h	2;"	d
fooinet_ptonhfoo	inet_pton.h	2;"	d
fooiochannelhfoo	iochannel.h	2;"	d
fooiolinehfoo	ioline.h	2;"	d
foollistfoo	llist.h	2;"	d
foologhfoo	log.h	2;"	d
foomcalignhfoo	mcalign.h	2;"	d
foomemblockqhfoo	memblockq.h	2;"	d
foomemchunkhfoo	memchunk.h	2;"	d
foomodargshfoo	modargs.h	2;"	d
foomodinfohfoo	modinfo.h	2;"	d
foomodulehfoo	module.h	2;"	d
foonamereghfoo	namereg.h	2;"	d
foonativecommonhfoo	native-common.h	2;"	d
foopackethfoo	packet.h	2;"	d
foopdispatchhfoo	pdispatch.h	2;"	d
foopidhfoo	pid.h	2;"	d
foopipehfoo	pipe.h	2;"	d
fooplaychunkhfoo	play-memchunk.h	2;"	d
fooplaymemblockqhfoo	play-memblockq.h	2;"	d
fooproplistutilutilhfoo	proplist-util.h	2;"	d
fooprotocolclihfoo	protocol-cli.h	2;"	d
fooprotocolesoundhfoo	protocol-esound.h	2;"	d
fooprotocolhttphfoo	protocol-http.h	2;"	d
fooprotocolnativehfoo	protocol-native.h	2;"	d
fooprotocolsimplehfoo	protocol-simple.h	2;"	d
foopstreamhfoo	pstream.h	2;"	d
foopstreamutilhfoo	pstream-util.h	2;"	d
foopulseasyncmsgqhfoo	asyncmsgq.h	2;"	d
foopulseasyncqhfoo	asyncq.h	2;"	d
foopulseatomichfoo	atomic.h	2;"	d
foopulsecardhfoo	card.h	2;"	d
foopulseclienthfoo	client.h	2;"	d
foopulsecoreaupdatehfoo	aupdate.h	2;"	d
foopulsecorebitsethfoo	bitset.h	2;"	d
foopulsecoredatabasehfoo	database.h	2;"	d
foopulsecoredynarrayhfoo	dynarray.h	2;"	d
foopulsecorehashmaphfoo	hashmap.h	2;"	d
foopulsecoreidxsethfoo	idxset.h	2;"	d
foopulsecoreipaclhfoo	ipacl.h	2;"	d
foopulsecoreltdlhelperhfoo	ltdl-helper.h	2;"	d
foopulsecorememtraphfoo	memtrap.h	2;"	d
foopulsecoremimetypehfoo	mime-type.h	2;"	d
foopulsecoreparseaddrhfoo	parseaddr.h	2;"	d
foopulsecoreprioqhfoo	prioq.h	2;"	d
foopulsecorequeuehfoo	queue.h	2;"	d
foopulsecoreratelimithfoo	ratelimit.h	2;"	d
foopulsecoresndfileutilhfoo	sndfile-util.h	2;"	d
foopulseenvelopehfoo	envelope.h	2;"	d
foopulsefdsemhfoo	fdsem.h	2;"	d
foopulseflisthfoo	flist.h	2;"	d
foopulselockautospawnhfoo	lock-autospawn.h	2;"	d
foopulsemacrohfoo	macro.h	2;"	d
foopulsememblockhfoo	memblock.h	2;"	d
foopulsemsgobjecthfoo	msgobject.h	2;"	d
foopulsemutexhfoo	mutex.h	2;"	d
foopulseobjecthfoo	object.h	2;"	d
foopulseoncehfoo	once.h	2;"	d
foopulserefcnthfoo	refcnt.h	2;"	d
foopulsertclockhfoo	core-rtclock.h	2;"	d
foopulsertpollhfoo	rtpoll.h	2;"	d
foopulsesemaphorehfoo	semaphore.h	2;"	d
foopulseshmhfoo	shm.h	2;"	d
foopulsesinkhfoo	sink.h	2;"	d
foopulsesinkinputhfoo	sink-input.h	2;"	d
foopulsesourcehfoo	source.h	2;"	d
foopulsesourceoutputhfoo	source-output.h	2;"	d
foopulsestartchildhfoo	start-child.h	2;"	d
foopulsethreadhfoo	thread.h	2;"	d
foopulsethreadmqhfoo	thread-mq.h	2;"	d
foopulsetimesmootherhfoo	time-smoother.h	2;"	d
foorandomhfoo	random.h	2;"	d
fooremapfoo	remap.h	2;"	d
fooresamplerhfoo	resampler.h	2;"	d
foortkithfoo	rtkit.h	4;"	d
foosampleutilhfoo	sample-util.h	2;"	d
foosconv_s16befoo	sconv-s16be.h	2;"	d
foosconv_s16lefoo	sconv-s16le.h	2;"	d
foosconvhfoo	sconv.h	2;"	d
foosharedshfoo	shared.h	2;"	d
foosiomanhfoo	sioman.h	2;"	d
foosocketclienthfoo	socket-client.h	2;"	d
foosocketserverhfoo	socket-server.h	2;"	d
foosocketutilhfoo	socket-util.h	2;"	d
foosoundfilestreamhfoo	sound-file-stream.h	2;"	d
foostrbufhfoo	strbuf.h	2;"	d
foostrlisthfoo	strlist.h	2;"	d
footagstructhfoo	tagstruct.h	2;"	d
footokenizerhfoo	tokenizer.h	2;"	d
foousergrouphfoo	usergroup.h	2;"	d
foowinsockhfoo	winsock.h	2;"	d
foox11prophfoo	x11prop.h	2;"	d
foox11wraphfoo	x11wrap.h	2;"	d
format	esound.h	/^    esd_format_t format;        \/* magic int with the format info *\/$/;"	m	struct:esd_player_info
format	esound.h	/^    esd_format_t format;        \/* magic int with the format info *\/$/;"	m	struct:esd_sample_info
format	esound.h	/^    esd_format_t format;        \/* magic int with the format info *\/$/;"	m	struct:esd_server_info
format	remap.h	/^    pa_sample_format_t *format;$/;"	m	struct:pa_remap
format_esd2native	protocol-esound.c	/^static void format_esd2native(int format, pa_bool_t swap_bytes, pa_sample_spec *ss) {$/;"	f	file:
format_native2esd	protocol-esound.c	/^static int format_native2esd(pa_sample_spec *ss) {$/;"	f	file:
frac	ffmpeg/resample2.c	/^    int frac;$/;"	m	struct:AVResampleContext	file:
free	object.h	/^    void (*free)(pa_object *o);$/;"	m	struct:pa_object
free_cb	asyncmsgq.c	/^    pa_free_cb_t free_cb;$/;"	m	struct:asyncmsgq_item	file:
free_cb	memblock.c	/^            pa_free_cb_t free_cb;$/;"	m	struct:pa_memblock::__anon4::__anon5	file:
free_cb	pdispatch.c	/^    pa_free_cb_t free_cb;$/;"	m	struct:reply_info	file:
free_entry	core-scache.c	/^static void free_entry(pa_scache_entry *e) {$/;"	f	file:
free_entry	database-simple.c	/^static void free_entry(entry *e) {$/;"	f	file:
free_event	core-subscribe.c	/^static void free_event(pa_subscription_event *s) {$/;"	f	file:
free_events	socket-client.c	/^static void free_events(pa_socket_client *c) {$/;"	f	file:
free_func	modargs.c	/^static void free_func(void *p, void*userdata) {$/;"	f	file:
free_func	thread-win32.c	/^    pa_free_cb_t free_func;$/;"	m	struct:pa_tls	file:
free_func	thread-win32.c	/^    pa_free_cb_t free_func;$/;"	m	struct:pa_tls_monitor	file:
free_slots	memblock.c	/^    pa_flist *free_slots;$/;"	m	struct:pa_mempool	file:
free_subscription	core-subscribe.c	/^static void free_subscription(pa_subscription *s) {$/;"	f	file:
from_float32ne_table	sconv.c	/^static pa_convert_func_t from_float32ne_table[] = {$/;"	v	file:
from_s16ne_table	sconv.c	/^static pa_convert_func_t from_s16ne_table[] = {$/;"	v	file:
from_work_format_func	resampler.c	/^    pa_convert_func_t from_work_format_func;$/;"	m	struct:pa_resampler	file:
front	queue.c	/^    struct queue_entry *front, *back;$/;"	m	struct:pa_queue	typeref:struct:pa_queue::queue_entry	file:
front_rear_side	resampler.c	/^static int front_rear_side(pa_channel_position_t p) {$/;"	f	file:
g_get_application_name	proplist-util.c	/^static G_CONST_RETURN gchar* _g_get_application_name(void) PA_GCC_WEAKREF(g_get_application_name);$/;"	v
generate	authkey.c	/^static int generate(int fd, void *ret_data, size_t length) {$/;"	f	file:
get_backtrace	log.c	/^static char* get_backtrace(unsigned show_nframes) {$/;"	f	file:
get_cpuid	cpu-x86.c	/^get_cpuid (uint32_t op, uint32_t *a, uint32_t *b, uint32_t *c, uint32_t *d)$/;"	f	file:
get_cpuinfo	cpu-arm.c	/^static char *get_cpuinfo(void) {$/;"	f	file:
get_cpuinfo_line	cpu-arm.c	/^get_cpuinfo_line (char *cpuinfo, const char *tag) {$/;"	f	file:
get_latency	sink-input.h	/^    pa_usec_t (*get_latency) (pa_sink_input *i); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
get_latency	source-output.h	/^    pa_usec_t (*get_latency) (pa_source_output *o); \/* may be NULL *\/$/;"	m	struct:pa_source_output
get_mute	sink.h	/^    void (*get_mute)(pa_sink *s);               \/* dito *\/$/;"	m	struct:pa_sink
get_mute	source.h	/^    void (*get_mute)(pa_source *s);           \/* dito *\/$/;"	m	struct:pa_source
get_n_used	module.h	/^    int (*get_n_used)(pa_module *m);$/;"	m	struct:pa_module
get_path	core-util.c	/^static char *get_path(const char *fn, pa_bool_t prependmid, pa_bool_t rt) {$/;"	f	file:
get_pulse_home	core-util.c	/^static char *get_pulse_home(void) {$/;"	f	file:
get_volume	sink.h	/^    void (*get_volume)(pa_sink *s);             \/* may be NULL *\/$/;"	m	struct:pa_sink
get_volume	source.h	/^    void (*get_volume)(pa_source *s);         \/* dito *\/$/;"	m	struct:pa_source
get_watch_flags	dbus-util.c	/^static pa_io_event_flags_t get_watch_flags(DBusWatch *watch) {$/;"	f	file:
gid	creds.h	/^    gid_t gid;$/;"	m	struct:pa_creds
gtk_window_get_default_icon_name	proplist-util.c	/^static G_CONST_RETURN gchar* _gtk_window_get_default_icon_name(void) PA_GCC_WEAKREF(gtk_window_get_default_icon_name);$/;"	v
handle_css	protocol-http.c	/^static void handle_css(struct connection *c) {$/;"	f	file:
handle_io_event	dbus-util.c	/^static void handle_io_event(pa_mainloop_api *ea, pa_io_event *e, int fd, pa_io_event_flags_t events, void *userdata) {$/;"	f	file:
handle_listen	protocol-http.c	/^static void handle_listen(struct connection *c) {$/;"	f	file:
handle_listen_prefix	protocol-http.c	/^static void handle_listen_prefix(struct connection *c, const char *source_name) {$/;"	f	file:
handle_root	protocol-http.c	/^static void handle_root(struct connection *c) {$/;"	f	file:
handle_seek	protocol-native.c	/^static void handle_seek(playback_stream *s, int64_t indexw) {$/;"	f	file:
handle_status	protocol-http.c	/^static void handle_status(struct connection *c) {$/;"	f	file:
handle_time_event	dbus-util.c	/^static void handle_time_event(pa_mainloop_api *ea, pa_time_event* e, const struct timeval *t, void *userdata) {$/;"	f	file:
handle_url	protocol-http.c	/^static void handle_url(struct connection *c) {$/;"	f	file:
has_whined	random.c	/^static pa_bool_t has_whined = TRUE;$/;"	v	file:
hash_func	database-simple.c	/^static unsigned hash_func(const void *p) {$/;"	f	file:
hash_func	hashmap.c	/^    pa_hash_func_t hash_func;$/;"	m	struct:pa_hashmap	file:
hash_func	idxset.c	/^    pa_hash_func_t hash_func;$/;"	m	struct:pa_idxset	file:
hash_scan	hashmap.c	/^static struct hashmap_entry *hash_scan(pa_hashmap *h, unsigned hash, const void *key) {$/;"	f	file:
hashmap_entry	hashmap.c	/^struct hashmap_entry {$/;"	s	file:
head	strbuf.c	/^    struct chunk *head, *tail;$/;"	m	struct:pa_strbuf	typeref:struct:pa_strbuf::chunk	file:
help	cli-command.c	/^    const char *help;$/;"	m	struct:command	file:
hexc	core-util.c	/^static int hexc(char c) {$/;"	f	file:
history_idx	time-smoother.c	/^    unsigned history_idx, n_history;$/;"	m	struct:pa_smoother	file:
history_time	time-smoother.c	/^    pa_usec_t adjust_time, history_time;$/;"	m	struct:pa_smoother	file:
history_x	time-smoother.c	/^    pa_usec_t history_x[HISTORY_MAX], history_y[HISTORY_MAX];$/;"	m	struct:pa_smoother	file:
history_y	time-smoother.c	/^    pa_usec_t history_x[HISTORY_MAX], history_y[HISTORY_MAX];$/;"	m	struct:pa_smoother	file:
hook	hook-list.h	/^    pa_hook *hook;$/;"	m	struct:pa_hook_slot
hooks	core.h	/^    pa_hook hooks[PA_CORE_HOOK_MAX];$/;"	m	struct:pa_core
hooks	protocol-native.c	/^    pa_hook hooks[PA_NATIVE_HOOK_MAX];$/;"	m	struct:pa_native_protocol	file:
html_print_field	protocol-http.c	/^static void html_print_field(pa_ioline *line, const char *left, const char *right) {$/;"	f	file:
html_response	protocol-http.c	/^static void html_response($/;"	f	file:
http_protocol_new	protocol-http.c	/^static pa_http_protocol* http_protocol_new(pa_core *c) {$/;"	f	file:
http_response	protocol-http.c	/^static void http_response($/;"	f	file:
hungup	iochannel.c	/^    pa_bool_t hungup;$/;"	m	struct:pa_iochannel	file:
i	envelope.c	/^            int32_t *i;$/;"	m	union:pa_envelope::__anon23::__anon24	file:
i	envelope.c	/^        int32_t i;$/;"	m	union:pa_envelope_item::__anon22	file:
i	envelope.h	/^        int32_t i[PA_ENVELOPE_POINTS_MAX];$/;"	m	struct:pa_envelope_def::__anon21
i	sample-util.c	/^  uint32_t i;$/;"	m	union:__anon7	file:
i	sample-util.h	/^        int32_t i;$/;"	m	union:pa_mix_info::__anon20
i	vector.h	/^    int16_t i[PA_INT16_VECTOR_SIZE];$/;"	m	union:pa_int16_vector
i	vector.h	/^    int32_t i[PA_INT32_VECTOR_SIZE];$/;"	m	union:pa_int32_vector
i_cm	resampler.c	/^    pa_channel_map i_cm, o_cm;$/;"	m	struct:pa_resampler	file:
i_counter	resampler.c	/^        unsigned i_counter;$/;"	m	struct:pa_resampler::__anon37	file:
i_counter	resampler.c	/^        unsigned i_counter;$/;"	m	struct:pa_resampler::__anon38	file:
i_fz	resampler.c	/^    size_t i_fz, o_fz, w_sz;$/;"	m	struct:pa_resampler	file:
i_ss	remap.h	/^    pa_sample_spec *i_ss, *o_ss;$/;"	m	struct:pa_remap
i_ss	resampler.c	/^    pa_sample_spec i_ss, o_ss;$/;"	m	struct:pa_resampler	file:
id	memblock.c	/^            uint32_t id;$/;"	m	struct:pa_memblock::__anon4::__anon6	file:
id	shm.h	/^    unsigned id;$/;"	m	struct:pa_shm
id	thread-posix.c	/^    pthread_t id;$/;"	m	struct:pa_thread	file:
ideal_dst_incr	ffmpeg/resample2.c	/^    int ideal_dst_incr;$/;"	m	struct:AVResampleContext	file:
ident	log.c	/^static char *ident = NULL; \/* in local charset format *\/$/;"	v	file:
ident_destructor	log.c	/^static void ident_destructor(void) {$/;"	f	file:
idx	idxset.c	/^    uint32_t idx;$/;"	m	struct:idxset_entry	file:
idx	prioq.c	/^    unsigned idx;$/;"	m	struct:pa_prioq_item	file:
idxset_entry	idxset.c	/^struct idxset_entry {$/;"	s	file:
ifd	iochannel.c	/^    int ifd, ofd;$/;"	m	struct:pa_iochannel	file:
ifd_type	iochannel.c	/^    int ifd_type, ofd_type;$/;"	m	struct:pa_iochannel	file:
impl_free	resampler.c	/^    void (*impl_free)(pa_resampler *r);$/;"	m	struct:pa_resampler	file:
impl_resample	resampler.c	/^    void (*impl_resample)(pa_resampler *r, const pa_memchunk *in, unsigned in_samples, pa_memchunk *out, unsigned *out_samples);$/;"	m	struct:pa_resampler	file:
impl_reset	resampler.c	/^    void (*impl_reset)(pa_resampler *r);$/;"	m	struct:pa_resampler	file:
impl_update_rates	resampler.c	/^    void (*impl_update_rates)(pa_resampler *r);$/;"	m	struct:pa_resampler	file:
import	memblock.c	/^    pa_memimport *import;$/;"	m	struct:pa_memimport_segment	file:
import	pstream.c	/^    pa_memimport *import;$/;"	m	struct:pa_pstream	file:
imported	memblock.c	/^        } imported;$/;"	m	union:pa_memblock::__anon4	typeref:struct:pa_memblock::__anon4::__anon6	file:
imported_size	memblock.h	/^    pa_atomic_t imported_size;$/;"	m	struct:pa_mempool_stat
in_pipe	fdsem.h	/^    pa_atomic_t in_pipe;$/;"	m	struct:pa_fdsem_data
in_prebuf	memblockq.c	/^    pa_bool_t in_prebuf;$/;"	m	struct:pa_memblockq	file:
in_string	conf-parser.c	/^static int in_string(char c, const char *s) {$/;"	f	file:
index	card.h	/^    uint32_t index;$/;"	m	struct:pa_card
index	client.h	/^    uint32_t index;$/;"	m	struct:pa_client
index	core-scache.h	/^    uint32_t index;$/;"	m	struct:pa_scache_entry
index	core-subscribe.c	/^    uint32_t index;$/;"	m	struct:pa_subscription_event	file:
index	ffmpeg/resample2.c	/^    int index;$/;"	m	struct:AVResampleContext	file:
index	memblockq.c	/^    int64_t index;$/;"	m	struct:list_item	file:
index	memchunk.h	/^    size_t index, length;$/;"	m	struct:pa_memchunk
index	module.h	/^    uint32_t index;$/;"	m	struct:pa_module
index	protocol-esound.c	/^    uint32_t index;$/;"	m	struct:connection	file:
index	protocol-native.c	/^    uint32_t index;$/;"	m	struct:playback_stream	file:
index	protocol-native.c	/^    uint32_t index;$/;"	m	struct:record_stream	file:
index	protocol-native.c	/^    uint32_t index;$/;"	m	struct:upload_stream	file:
index	pstream.c	/^        size_t index;$/;"	m	struct:pa_pstream::__anon34	file:
index	pstream.c	/^        size_t index;$/;"	m	struct:pa_pstream::__anon35	file:
index	sink-input.h	/^    uint32_t index;$/;"	m	struct:pa_sink_input
index	sink.h	/^    uint32_t index;$/;"	m	struct:pa_sink
index	source-output.h	/^    uint32_t index;$/;"	m	struct:pa_source_output
index	source.h	/^    uint32_t index;$/;"	m	struct:pa_source
index	thread-win32.c	/^    DWORD index;$/;"	m	struct:pa_tls	file:
index_next	idxset.c	/^    struct idxset_entry *index_next, *index_previous;$/;"	m	struct:idxset_entry	typeref:struct:idxset_entry::idxset_entry	file:
index_previous	idxset.c	/^    struct idxset_entry *index_next, *index_previous;$/;"	m	struct:idxset_entry	typeref:struct:idxset_entry::	file:
index_scan	idxset.c	/^static struct idxset_entry* index_scan(pa_idxset *s, unsigned hash, uint32_t idx) {$/;"	f	file:
inet_ntop	inet_ntop.c	/^const char *inet_ntop(int af, const void *src, char *dst, socklen_t cnt) {$/;"	f
inet_pton	inet_pton.c	/^int inet_pton(int af, const char *src, void *dst) {$/;"	f
init	module.h	/^    int (*init)(pa_module*m);$/;"	m	struct:pa_module
init_defaults	log.c	/^static void init_defaults(void) {$/;"	f	file:
init_remap_c	remap.c	/^static void init_remap_c (pa_remap_t *m) {$/;"	f	file:
init_remap_mmx	remap_mmx.c	/^static void init_remap_mmx (pa_remap_t *m) {$/;"	f	file:
init_remap_sse2	remap_sse.c	/^static void init_remap_sse2 (pa_remap_t *m) {$/;"	f	file:
init_table	resampler.c	/^static int (* const init_table[])(pa_resampler*r) = {$/;"	v	file:
input_event	iochannel.c	/^    pa_io_event* input_event, *output_event;$/;"	m	struct:pa_iochannel	file:
input_memblockq	protocol-esound.c	/^    pa_memblockq *input_memblockq, *output_memblockq;$/;"	m	struct:connection	file:
input_memblockq	protocol-simple.c	/^    pa_memblockq *input_memblockq, *output_memblockq;$/;"	m	struct:connection	file:
inputs	sink.h	/^        pa_hashmap *inputs;$/;"	m	struct:pa_sink::__anon36
inputs	sink.h	/^    pa_idxset *inputs;$/;"	m	struct:pa_sink
inputs_drop	sink.c	/^static void inputs_drop(pa_sink *s, pa_mix_info *info, unsigned n, pa_memchunk *result) {$/;"	f	file:
inq	thread-mq.h	/^    pa_asyncmsgq *inq, *outq;$/;"	m	struct:pa_thread_mq
internal_io_event	x11wrap.c	/^static void internal_io_event(pa_mainloop_api *m, pa_io_event *e, int fd, pa_io_event_flags_t f, void *userdata) {$/;"	f	file:
internal_thread_func	thread-posix.c	/^static void* internal_thread_func(void *userdata) {$/;"	f	file:
internal_thread_func	thread-win32.c	/^static DWORD WINAPI internal_thread_func(LPVOID param) {$/;"	f	file:
interval	ratelimit.h	/^    pa_usec_t interval;$/;"	m	struct:pa_ratelimit
io	ioline.c	/^    pa_iochannel *io;$/;"	m	struct:pa_ioline	file:
io	protocol-esound.c	/^    pa_iochannel *io;$/;"	m	struct:connection	file:
io	protocol-http.c	/^    pa_iochannel *io;$/;"	m	struct:connection	file:
io	protocol-simple.c	/^    pa_iochannel *io;$/;"	m	struct:connection	file:
io	pstream.c	/^    pa_iochannel *io;$/;"	m	struct:pa_pstream	file:
io_callback	ioline.c	/^static void io_callback(pa_iochannel*io, void *userdata) {$/;"	f	file:
io_callback	protocol-esound.c	/^static void io_callback(pa_iochannel*io, void *userdata) {$/;"	f	file:
io_callback	protocol-http.c	/^static void io_callback(pa_iochannel*io, void *userdata) {$/;"	f	file:
io_callback	protocol-simple.c	/^static void io_callback(pa_iochannel*io, void *userdata) {$/;"	f	file:
io_callback	pstream.c	/^static void io_callback(pa_iochannel*io, void *userdata) {$/;"	f	file:
io_event	avahi-wrap.c	/^    pa_io_event *io_event;$/;"	m	struct:AvahiWatch	file:
io_event	socket-client.c	/^    pa_io_event *io_event;$/;"	m	struct:pa_socket_client	file:
io_event	socket-server.c	/^    pa_io_event *io_event;$/;"	m	struct:pa_socket_server	file:
io_event	x11wrap.c	/^    pa_io_event* io_event;$/;"	m	struct:pa_x11_internal	file:
io_event	x11wrap.c	/^    pa_io_event* io_event;$/;"	m	struct:pa_x11_wrapper	file:
ioline_free	ioline.c	/^static void ioline_free(pa_ioline *l) {$/;"	f	file:
is_float	envelope.c	/^    pa_bool_t is_float;$/;"	m	struct:pa_envelope	file:
is_group	core-util.c	/^static int is_group(gid_t gid, const char *name) {$/;"	f	file:
is_local	protocol-native.c	/^    pa_bool_t is_local:1;$/;"	m	struct:pa_native_connection	file:
is_silence	memblock.c	/^    pa_bool_t is_silence:1;$/;"	m	struct:pa_memblock	file:
is_underrun	protocol-native.c	/^    pa_bool_t is_underrun:1;$/;"	m	struct:playback_stream	file:
is_valid_char	namereg.c	/^static pa_bool_t is_valid_char(char c) {$/;"	f	file:
item_free	pstream.c	/^static void item_free(void *item, void *q) {$/;"	f	file:
item_get_float	envelope.c	/^static float item_get_float(pa_envelope_item *i, pa_usec_t x) {$/;"	f	file:
item_get_int	envelope.c	/^static int32_t item_get_int(pa_envelope_item *i, pa_usec_t x) {$/;"	f	file:
item_info	pstream.c	/^struct item_info {$/;"	s	file:
items	prioq.c	/^    pa_prioq_item **items;$/;"	m	struct:pa_prioq	file:
iterate_list_head	hashmap.c	/^    struct hashmap_entry *iterate_list_head, *iterate_list_tail;$/;"	m	struct:pa_hashmap	typeref:struct:pa_hashmap::hashmap_entry	file:
iterate_list_head	idxset.c	/^    struct idxset_entry *iterate_list_head, *iterate_list_tail;$/;"	m	struct:pa_idxset	typeref:struct:pa_idxset::idxset_entry	file:
iterate_list_tail	hashmap.c	/^    struct hashmap_entry *iterate_list_head, *iterate_list_tail;$/;"	m	struct:pa_hashmap	typeref:struct:pa_hashmap::	file:
iterate_list_tail	idxset.c	/^    struct idxset_entry *iterate_list_head, *iterate_list_tail;$/;"	m	struct:pa_idxset	typeref:struct:pa_idxset::	file:
iterate_next	hashmap.c	/^    struct hashmap_entry *iterate_next, *iterate_previous;$/;"	m	struct:hashmap_entry	typeref:struct:hashmap_entry::hashmap_entry	file:
iterate_next	idxset.c	/^    struct idxset_entry *iterate_next, *iterate_previous;$/;"	m	struct:idxset_entry	typeref:struct:idxset_entry::idxset_entry	file:
iterate_previous	hashmap.c	/^    struct hashmap_entry *iterate_next, *iterate_previous;$/;"	m	struct:hashmap_entry	typeref:struct:hashmap_entry::	file:
iterate_previous	idxset.c	/^    struct idxset_entry *iterate_next, *iterate_previous;$/;"	m	struct:idxset_entry	typeref:struct:idxset_entry::	file:
j	envelope.c	/^    unsigned j;$/;"	m	struct:pa_envelope_item	file:
joined	thread-posix.c	/^    pa_bool_t joined;$/;"	m	struct:pa_thread	file:
key	database-simple.c	/^    pa_datum key;$/;"	m	struct:entry	file:
key	hashmap.c	/^    const void *key;$/;"	m	struct:hashmap_entry	file:
key	modargs.c	/^    char *key, *value;$/;"	m	struct:entry	file:
key	thread-posix.c	/^    pthread_key_t key;$/;"	m	struct:pa_tls	file:
kill	client.h	/^    void (*kill)(pa_client *c);$/;"	m	struct:pa_client
kill	sink-input.h	/^    void (*kill) (pa_sink_input *i);             \/* may NOT be NULL *\/$/;"	m	struct:pa_sink_input
kill	source-output.h	/^    void (*kill)(pa_source_output* o);              \/* may NOT be NULL *\/$/;"	m	struct:pa_source_output
kill_cb	x11wrap.c	/^    pa_x11_kill_cb_t kill_cb;$/;"	m	struct:pa_x11_client	file:
kill_requested	cli.c	/^    pa_bool_t fail, kill_requested;$/;"	m	struct:pa_cli	file:
last_line	cli.c	/^    char *last_line;$/;"	m	struct:pa_cli	file:
last_localq	asyncq.c	/^    struct localq *last_localq;$/;"	m	struct:pa_asyncq	typeref:struct:pa_asyncq::localq	file:
last_used_time	core-scache.h	/^    time_t last_used_time;$/;"	m	struct:pa_scache_entry
last_x	time-smoother.c	/^    pa_usec_t last_y, last_x;$/;"	m	struct:pa_smoother	file:
last_y	time-smoother.c	/^    pa_usec_t last_y, last_x;$/;"	m	struct:pa_smoother	file:
lazy	core-scache.h	/^    pa_bool_t lazy;$/;"	m	struct:pa_scache_entry
left_vol_scale	esound.h	/^    int left_vol_scale;         \/* volume scaling *\/$/;"	m	struct:esd_player_info
left_vol_scale	esound.h	/^    int left_vol_scale;         \/* volume scaling *\/$/;"	m	struct:esd_sample_info
leftover	mcalign.c	/^    pa_memchunk leftover, current;$/;"	m	struct:pa_mcalign	file:
length	esound.h	/^    int length;                 \/* total buffer length *\/$/;"	m	struct:esd_sample_info
length	flist.c	/^    pa_atomic_t length;$/;"	m	struct:pa_flist	file:
length	memblock.c	/^    size_t length;$/;"	m	struct:pa_memblock	file:
length	memchunk.h	/^    size_t index, length;$/;"	m	struct:pa_memchunk
length	packet.h	/^    size_t length;$/;"	m	struct:pa_packet
length	protocol-native.c	/^    size_t length;$/;"	m	struct:upload_stream	file:
length	queue.c	/^    unsigned length;$/;"	m	struct:pa_queue	file:
length	strbuf.c	/^    size_t length;$/;"	m	struct:chunk	file:
length	strbuf.c	/^    size_t length;$/;"	m	struct:pa_strbuf	file:
length	tagstruct.c	/^    size_t length, allocated;$/;"	m	struct:pa_tagstruct	file:
level_to_char	log.c	/^static const char level_to_char[] = {$/;"	v	file:
level_to_syslog	log.c	/^static const int level_to_syslog[] = {$/;"	v	file:
libsamplerate_free	resampler.c	/^static void libsamplerate_free(pa_resampler *r) {$/;"	f	file:
libsamplerate_init	resampler.c	/^static int libsamplerate_init(pa_resampler *r) {$/;"	f	file:
libsamplerate_resample	resampler.c	/^static void libsamplerate_resample(pa_resampler *r, const pa_memchunk *input, unsigned in_n_frames, pa_memchunk *output, unsigned *out_n_frames) {$/;"	f	file:
libsamplerate_reset	resampler.c	/^static void libsamplerate_reset(pa_resampler *r) {$/;"	f	file:
libsamplerate_update_rates	resampler.c	/^static void libsamplerate_update_rates(pa_resampler *r) {$/;"	f	file:
line	cli.c	/^    pa_ioline *line;$/;"	m	struct:pa_cli	file:
line	protocol-http.c	/^    pa_ioline *line;$/;"	m	struct:connection	file:
line_callback	cli.c	/^static void line_callback(pa_ioline *line, const char *s, void *userdata) {$/;"	f	file:
line_callback	protocol-http.c	/^static void line_callback(pa_ioline *line, const char *s, void *userdata) {$/;"	f	file:
line_drain_callback	protocol-http.c	/^static void line_drain_callback(pa_ioline *l, void *userdata) {$/;"	f	file:
linear	ffmpeg/resample2.c	/^    int linear;$/;"	m	struct:AVResampleContext	file:
linear	sample-util.h	/^    } linear[PA_CHANNELS_MAX];$/;"	m	struct:pa_mix_info	typeref:union:pa_mix_info::__anon20
linear_get_float	envelope.c	/^static float linear_get_float(pa_envelope *e, int v) {$/;"	f	file:
linear_get_int	envelope.c	/^static int32_t linear_get_int(pa_envelope *e, int v) {$/;"	f	file:
linear_interpolate_float	envelope.c	/^static float linear_interpolate_float(pa_usec_t x1, float _y1, pa_usec_t x2, float y2, pa_usec_t x3) {$/;"	f	file:
linear_interpolate_int	envelope.c	/^static int32_t linear_interpolate_int(pa_usec_t x1, int32_t _y1, pa_usec_t x2, int32_t y2, pa_usec_t x3) {$/;"	f	file:
linebreak	cli-command.c	/^static const char linebreak[] = "\\n\\r";$/;"	v	file:
list_item	memblockq.c	/^struct list_item {$/;"	s	file:
load	authkey.c	/^static int load(const char *fn, void *data, size_t length) {$/;"	f	file:
load_once	modinfo.h	/^    pa_bool_t load_once;$/;"	m	struct:pa_modinfo
load_once	module.h	/^    pa_bool_t load_once:1;$/;"	m	struct:pa_module
local	socket-client.c	/^    pa_bool_t local;$/;"	m	struct:pa_socket_client	file:
localq	asyncq.c	/^struct localq {$/;"	s	file:
lock_fd	lock-autospawn.c	/^static int lock_fd = -1;$/;"	v	file:
lock_fd_mutex	lock-autospawn.c	/^static pa_mutex *lock_fd_mutex = NULL;$/;"	v	file:
lrintf	ffmpeg/avcodec.h	79;"	d
lvalue	conf-parser.h	/^    const char *lvalue; \/* name of the variable *\/$/;"	m	struct:pa_config_item
m	vector.h	/^    __m128 m;$/;"	m	union:pa_float_vector
m	vector.h	/^    __m128i m;$/;"	m	union:pa_int16_vector
m	vector.h	/^    __m128i m;$/;"	m	union:pa_int32_vector
m	vector.h	/^    __m128i m;$/;"	m	union:pa_uint8_vector
mainloop	avahi-wrap.c	/^    pa_mainloop_api *mainloop;$/;"	m	struct:__anon19	file:
mainloop	core.h	/^    pa_mainloop_api *mainloop;$/;"	m	struct:pa_core
mainloop	dbus-util.c	/^    pa_mainloop_api *mainloop;$/;"	m	struct:pa_dbus_wrap_connection	file:
mainloop	iochannel.c	/^    pa_mainloop_api* mainloop;$/;"	m	struct:pa_iochannel	file:
mainloop	ioline.c	/^    pa_mainloop_api *mainloop;$/;"	m	struct:pa_ioline	file:
mainloop	pdispatch.c	/^    pa_mainloop_api *mainloop;$/;"	m	struct:pa_pdispatch	file:
mainloop	pstream.c	/^    pa_mainloop_api *mainloop;$/;"	m	struct:pa_pstream	file:
mainloop	socket-client.c	/^    pa_mainloop_api *mainloop;$/;"	m	struct:pa_socket_client	file:
mainloop	socket-server.c	/^    pa_mainloop_api *mainloop;$/;"	m	struct:pa_socket_server	file:
mainloop	thread-mq.h	/^    pa_mainloop_api *mainloop;$/;"	m	struct:pa_thread_mq
make_random_dir	core-util.c	/^static char* make_random_dir(mode_t m) {$/;"	f	file:
make_random_dir_and_link	core-util.c	/^static int make_random_dir_and_link(mode_t m, const char *k) {$/;"	f	file:
map	database-simple.c	/^    pa_hashmap *map;$/;"	m	struct:simple_data	file:
map_required	resampler.c	/^    pa_bool_t map_required;$/;"	m	struct:pa_resampler	file:
map_table_f	remap.h	/^    float map_table_f[PA_CHANNELS_MAX][PA_CHANNELS_MAX];$/;"	m	struct:pa_remap
map_table_i	remap.h	/^    int32_t map_table_i[PA_CHANNELS_MAX][PA_CHANNELS_MAX];$/;"	m	struct:pa_remap
marker	shm.c	/^    pa_atomic_t marker; \/* 0xbeefcafe *\/$/;"	m	struct:shm_marker	file:
mask	core-subscribe.c	/^    pa_subscription_mask_t mask;$/;"	m	struct:pa_subscription	file:
max_f	resampler.c	/^        float max_f[PA_CHANNELS_MAX];$/;"	m	struct:pa_resampler::__anon38	file:
max_i	resampler.c	/^        int16_t max_i[PA_CHANNELS_MAX];$/;"	m	struct:pa_resampler::__anon38	file:
max_latency	sink.h	/^        pa_usec_t max_latency; \/* An upper limit for the latencies *\/$/;"	m	struct:pa_sink::__anon36
max_latency	source.h	/^        pa_usec_t max_latency; \/* An upper limit for the latencies *\/$/;"	m	struct:pa_source::__anon2
max_request	sink.h	/^        size_t max_request;$/;"	m	struct:pa_sink::__anon36
max_rewind	sink.h	/^        size_t max_rewind;$/;"	m	struct:pa_sink::__anon36
max_rewind	source.h	/^        size_t max_rewind;$/;"	m	struct:pa_source::__anon2
max_sink_channels	card.h	/^    unsigned max_sink_channels;$/;"	m	struct:pa_card_profile
max_source_channels	card.h	/^    unsigned max_source_channels;$/;"	m	struct:pa_card_profile
maximum_level	log.c	/^static pa_log_level_t maximum_level = PA_LOG_ERROR, maximum_level_override = PA_LOG_ERROR;$/;"	v	file:
maximum_level_override	log.c	/^static pa_log_level_t maximum_level = PA_LOG_ERROR, maximum_level_override = PA_LOG_ERROR;$/;"	v	file:
maxlength	memblockq.c	/^    size_t maxlength, tlength, base, prebuf, minreq, maxrewind;$/;"	m	struct:pa_memblockq	file:
maxrewind	memblockq.c	/^    size_t maxlength, tlength, base, prebuf, minreq, maxrewind;$/;"	m	struct:pa_memblockq	file:
may_move_to	sink-input.h	/^    pa_bool_t (*may_move_to) (pa_sink_input *i, pa_sink *s); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
may_move_to	source-output.h	/^    pa_bool_t (*may_move_to) (pa_source_output *o, pa_source *s); \/* may be NULL *\/$/;"	m	struct:pa_source_output
mcalign	memblockq.c	/^    pa_mcalign *mcalign;$/;"	m	struct:pa_memblockq	file:
memblock	memchunk.h	/^    pa_memblock *memblock;$/;"	m	struct:pa_memchunk
memblock	pstream.c	/^        pa_memblock *memblock;$/;"	m	struct:pa_pstream::__anon35	file:
memblock_free	memblock.c	/^static void memblock_free(pa_memblock *b) {$/;"	f	file:
memblock_index	protocol-esound.c	/^        size_t memblock_index;$/;"	m	struct:connection::__anon11	file:
memblock_index	protocol-simple.c	/^        size_t memblock_index;$/;"	m	struct:connection::__anon8	file:
memblock_make_local	memblock.c	/^static void memblock_make_local(pa_memblock *b) {$/;"	f	file:
memblock_new_appended	memblock.c	/^static pa_memblock *memblock_new_appended(pa_mempool *p, size_t length) {$/;"	f	file:
memblock_replace_import	memblock.c	/^static void memblock_replace_import(pa_memblock *b) {$/;"	f	file:
memblock_shared_copy	memblock.c	/^static pa_memblock *memblock_shared_copy(pa_mempool *p, pa_memblock *b) {$/;"	f	file:
memblock_wait	memblock.c	/^static void memblock_wait(pa_memblock *b) {$/;"	f	file:
memblockq	play-memblockq.c	/^    pa_memblockq *memblockq;$/;"	m	struct:memblockq_stream	file:
memblockq	protocol-native.c	/^    pa_memblockq *memblockq;$/;"	m	struct:playback_stream	file:
memblockq	protocol-native.c	/^    pa_memblockq *memblockq;$/;"	m	struct:record_stream	file:
memblockq	sound-file-stream.c	/^    pa_memblockq *memblockq;$/;"	m	struct:file_stream	file:
memblockq_stream	play-memblockq.c	/^typedef struct memblockq_stream {$/;"	s	file:
memblockq_stream	play-memblockq.c	/^} memblockq_stream;$/;"	t	typeref:struct:memblockq_stream	file:
memblockq_stream_free	play-memblockq.c	/^static void memblockq_stream_free(pa_object *o) {$/;"	f	file:
memblockq_stream_process_msg	play-memblockq.c	/^static int memblockq_stream_process_msg(pa_msgobject *o, int code, void*userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
memblockq_stream_unlink	play-memblockq.c	/^static void memblockq_stream_unlink(memblockq_stream *u) {$/;"	f	file:
memchunk	asyncmsgq.c	/^    pa_memchunk memchunk;$/;"	m	struct:asyncmsgq_item	file:
memchunk	core-scache.h	/^    pa_memchunk memchunk;$/;"	m	struct:pa_scache_entry
memchunk	protocol-esound.c	/^        pa_memchunk memchunk;$/;"	m	struct:connection::__anon12	file:
memchunk	protocol-native.c	/^    pa_memchunk memchunk;$/;"	m	struct:upload_stream	file:
memchunk	pstream.c	/^        pa_memchunk memchunk;$/;"	m	struct:pa_pstream::__anon34	file:
memexport_revoke_blocks	memblock.c	/^static void memexport_revoke_blocks(pa_memexport *e, pa_memimport *i) {$/;"	f	file:
memexport_revoke_cb	pstream.c	/^static void memexport_revoke_cb(pa_memexport *e, uint32_t block_id, void *userdata) {$/;"	f	file:
memexport_slot	memblock.c	/^struct memexport_slot {$/;"	s	file:
memimport_release_cb	pstream.c	/^static void memimport_release_cb(pa_memimport *i, uint32_t block_id, void *userdata) {$/;"	f	file:
memory	memblock.c	/^    pa_shm memory;$/;"	m	struct:pa_memimport_segment	file:
memory	memblock.c	/^    pa_shm memory;$/;"	m	struct:pa_mempool	file:
mempool	core.h	/^    pa_mempool *mempool;$/;"	m	struct:pa_core
mempool	pstream.c	/^    pa_mempool *mempool;$/;"	m	struct:pa_pstream	file:
mempool	resampler.c	/^    pa_mempool *mempool;$/;"	m	struct:pa_resampler	file:
mempool_allocate_slot	memblock.c	/^static struct mempool_slot* mempool_allocate_slot(pa_mempool *p) {$/;"	f	file:
mempool_slot_by_ptr	memblock.c	/^static struct mempool_slot* mempool_slot_by_ptr(pa_mempool *p, void *ptr) {$/;"	f	file:
mempool_slot_data	memblock.c	/^static inline void* mempool_slot_data(struct mempool_slot *slot) {$/;"	f	file:
mempool_slot_idx	memblock.c	/^static unsigned mempool_slot_idx(pa_mempool *p, void *ptr) {$/;"	f	file:
memtrap_link	memtrap.c	/^static void memtrap_link(pa_memtrap *m, unsigned j) {$/;"	f	file:
memtrap_unlink	memtrap.c	/^static void memtrap_unlink(pa_memtrap *m, unsigned j) {$/;"	f	file:
memtraps	memtrap.c	/^static pa_memtrap *memtraps[2] = { NULL, NULL };$/;"	v	file:
message	dbus-util.h	/^    DBusMessage *message;$/;"	m	struct:pa_dbus_pending
method	resampler.c	/^    pa_resample_method_t method;$/;"	m	struct:pa_resampler	file:
min_history	time-smoother.c	/^    unsigned min_history;$/;"	m	struct:pa_smoother	file:
min_latency	sink.h	/^        pa_usec_t min_latency; \/* we won't go below this latency *\/$/;"	m	struct:pa_sink::__anon36
min_latency	source.h	/^        pa_usec_t min_latency; \/* we won't go below this latency *\/$/;"	m	struct:pa_source::__anon2
minreq	memblockq.c	/^    size_t maxlength, tlength, base, prebuf, minreq, maxrewind;$/;"	m	struct:pa_memblockq	file:
missing	memblockq.c	/^    int64_t missing;$/;"	m	struct:pa_memblockq	file:
missing	protocol-esound.c	/^        pa_atomic_t missing;$/;"	m	struct:connection::__anon11	file:
missing	protocol-native.c	/^    pa_atomic_t missing;$/;"	m	struct:playback_stream	file:
missing	protocol-simple.c	/^        pa_atomic_t missing;$/;"	m	struct:connection::__anon8	file:
module	card.h	/^    pa_module *module;$/;"	m	struct:pa_card
module	card.h	/^    pa_module *module;$/;"	m	struct:pa_card_new_data
module	client.h	/^    pa_module *module;$/;"	m	struct:pa_client
module	client.h	/^    pa_module *module;$/;"	m	struct:pa_client_new_data
module	protocol-esound.h	/^    pa_module *module;$/;"	m	struct:pa_esound_options
module	protocol-http.c	/^    pa_module *module;$/;"	m	struct:connection	file:
module	protocol-native.h	/^    pa_module *module;$/;"	m	struct:pa_native_options
module	protocol-simple.h	/^    pa_module *module;$/;"	m	struct:pa_simple_options
module	sink-input.h	/^    pa_module *module;                  \/* may be NULL *\/$/;"	m	struct:pa_sink_input
module	sink-input.h	/^    pa_module *module;$/;"	m	struct:pa_sink_input_new_data
module	sink.h	/^    pa_module *module;                      \/* may be NULL *\/$/;"	m	struct:pa_sink
module	sink.h	/^    pa_module *module;$/;"	m	struct:pa_sink_new_data
module	source-output.h	/^    pa_module *module;                    \/* may be NULL *\/$/;"	m	struct:pa_source_output
module	source-output.h	/^    pa_module *module;$/;"	m	struct:pa_source_output_new_data
module	source.h	/^    pa_module *module;                        \/* may be NULL *\/$/;"	m	struct:pa_source
module	source.h	/^    pa_module *module;$/;"	m	struct:pa_source_new_data
module_defer_unload_event	core.h	/^    pa_defer_event *module_defer_unload_event;$/;"	m	struct:pa_core
module_fill_tagstruct	protocol-native.c	/^static void module_fill_tagstruct(pa_native_connection *c, pa_tagstruct *t, pa_module *module) {$/;"	f	file:
modules	core.h	/^    pa_idxset *clients, *cards, *sinks, *sources, *sink_inputs, *source_outputs, *modules, *scache;$/;"	m	struct:pa_core
monitor_of	source.h	/^    pa_sink *monitor_of;                     \/* may be NULL *\/$/;"	m	struct:pa_source
monitor_source	sink.h	/^    pa_source *monitor_source;$/;"	m	struct:pa_sink
monitor_thread_func	thread-win32.c	/^static DWORD WINAPI monitor_thread_func(LPVOID param) {$/;"	f	file:
monitor_tls	thread-win32.c	/^static pa_tls *monitor_tls;$/;"	v	file:
monotonic	time-smoother.c	/^    pa_bool_t monotonic:1;$/;"	m	struct:pa_smoother	file:
moving	sink-input.h	/^    void (*moving) (pa_sink_input *i, pa_sink *dest);   \/* may be NULL *\/$/;"	m	struct:pa_sink_input
moving	source-output.h	/^    void (*moving) (pa_source_output *o, pa_source *dest);   \/* may be NULL *\/$/;"	m	struct:pa_source_output
mute_changed	sink-input.h	/^    void (*mute_changed)(pa_sink_input *i); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
muted	sink-input.h	/^        pa_bool_t muted:1;$/;"	m	struct:pa_sink_input::__anon27
muted	sink-input.h	/^    pa_bool_t muted:1;$/;"	m	struct:pa_sink_input
muted	sink-input.h	/^    pa_bool_t muted:1;$/;"	m	struct:pa_sink_input_new_data
muted	sink.h	/^    pa_bool_t muted :1;$/;"	m	struct:pa_sink_new_data
muted	sink.h	/^    pa_bool_t muted:1;$/;"	m	struct:pa_sink
muted	source.h	/^    pa_bool_t muted:1;$/;"	m	struct:pa_source
muted	source.h	/^    pa_bool_t muted:1;$/;"	m	struct:pa_source_new_data
muted_is_set	sink-input.h	/^    pa_bool_t muted_is_set:1;$/;"	m	struct:pa_sink_input_new_data
muted_is_set	sink.h	/^    pa_bool_t muted_is_set:1;$/;"	m	struct:pa_sink_new_data
muted_is_set	source.h	/^    pa_bool_t muted_is_set:1;$/;"	m	struct:pa_source_new_data
mutex	asyncmsgq.c	/^    pa_mutex *mutex; \/* only for the writer side *\/$/;"	m	struct:pa_asyncmsgq	file:
mutex	lock-autospawn.c	/^static pa_mutex *mutex;$/;"	v	file:
mutex	memblock.c	/^    pa_mutex *mutex;$/;"	m	struct:pa_memexport	file:
mutex	memblock.c	/^    pa_mutex *mutex;$/;"	m	struct:pa_memimport	file:
mutex	memblock.c	/^    pa_mutex *mutex;$/;"	m	struct:pa_mempool	file:
mutex	memtrap.c	/^static pa_static_mutex mutex = PA_STATIC_MUTEX_INIT; \/* only required to serialize access to the write side *\/$/;"	v	file:
mutex	mutex-posix.c	/^    pthread_mutex_t mutex;$/;"	m	struct:pa_mutex	file:
mutex	mutex-win32.c	/^    CRITICAL_SECTION mutex;$/;"	m	struct:pa_mutex	file:
mutex	once.h	/^    pa_atomic_ptr_t mutex;$/;"	m	struct:pa_once
mutex	ratelimit.c	/^static pa_static_mutex mutex = PA_STATIC_MUTEX_INIT;$/;"	v	file:
n_accumulated	memblock.h	/^    pa_atomic_t n_accumulated;$/;"	m	struct:pa_mempool_stat
n_accumulated_by_type	memblock.h	/^    pa_atomic_t n_accumulated_by_type[PA_MEMBLOCK_TYPE_MAX];$/;"	m	struct:pa_mempool_stat
n_acquired	memblock.c	/^    pa_atomic_t n_acquired;$/;"	m	struct:pa_memblock	file:
n_allocated	dynarray.c	/^    unsigned n_allocated, n_entries;$/;"	m	struct:pa_dynarray	file:
n_allocated	envelope.c	/^        unsigned n_points, n_allocated, n_current;$/;"	m	struct:pa_envelope::__anon23	file:
n_allocated	memblock.h	/^    pa_atomic_t n_allocated;$/;"	m	struct:pa_mempool_stat
n_allocated	prioq.c	/^    unsigned n_allocated;$/;"	m	struct:pa_prioq	file:
n_allocated_by_type	memblock.h	/^    pa_atomic_t n_allocated_by_type[PA_MEMBLOCK_TYPE_MAX];$/;"	m	struct:pa_mempool_stat
n_blocks	memblock.c	/^    unsigned n_blocks;$/;"	m	struct:pa_memimport_segment	file:
n_blocks	memblock.c	/^    unsigned n_blocks;$/;"	m	struct:pa_mempool	file:
n_blocks	memblockq.c	/^    unsigned n_blocks;$/;"	m	struct:pa_memblockq	file:
n_commands	pdispatch.c	/^    unsigned n_commands;$/;"	m	struct:pa_pdispatch	file:
n_corked	sink.h	/^    unsigned n_corked;$/;"	m	struct:pa_sink
n_corked	source.h	/^    unsigned n_corked;$/;"	m	struct:pa_source
n_current	envelope.c	/^        unsigned n_points, n_allocated, n_current;$/;"	m	struct:pa_envelope::__anon23	file:
n_dead	hook-list.h	/^    int n_firing, n_dead;$/;"	m	struct:pa_hook
n_entries	dynarray.c	/^    unsigned n_allocated, n_entries;$/;"	m	struct:pa_dynarray	file:
n_entries	hashmap.c	/^    unsigned n_entries;$/;"	m	struct:pa_hashmap	file:
n_entries	idxset.c	/^    unsigned n_entries;$/;"	m	struct:pa_idxset	file:
n_exported	memblock.h	/^    pa_atomic_t n_exported;$/;"	m	struct:pa_mempool_stat
n_firing	hook-list.h	/^    int n_firing, n_dead;$/;"	m	struct:pa_hook
n_history	time-smoother.c	/^    unsigned history_idx, n_history;$/;"	m	struct:pa_smoother	file:
n_imported	memblock.h	/^    pa_atomic_t n_imported;$/;"	m	struct:pa_mempool_stat
n_init	memblock.c	/^    pa_atomic_t n_init;$/;"	m	struct:pa_mempool	file:
n_init	memblock.c	/^    unsigned n_init;$/;"	m	struct:pa_memexport	file:
n_items	prioq.c	/^    unsigned n_items;$/;"	m	struct:pa_prioq	file:
n_missed	ratelimit.h	/^    unsigned n_printed, n_missed;$/;"	m	struct:pa_ratelimit
n_player	protocol-esound.c	/^    unsigned n_player;$/;"	m	struct:pa_esound_protocol	file:
n_points	envelope.c	/^        unsigned n_points, n_allocated, n_current;$/;"	m	struct:pa_envelope::__anon23	file:
n_points	envelope.h	/^    unsigned n_points;$/;"	m	struct:pa_envelope_def
n_pollfd	rtpoll.c	/^    unsigned n_pollfd;$/;"	m	struct:pa_rtpoll_item	file:
n_pollfd_alloc	rtpoll.c	/^    unsigned n_pollfd_alloc, n_pollfd_used;$/;"	m	struct:pa_rtpoll	file:
n_pollfd_used	rtpoll.c	/^    unsigned n_pollfd_alloc, n_pollfd_used;$/;"	m	struct:pa_rtpoll	file:
n_pool_full	memblock.h	/^    pa_atomic_t n_pool_full;$/;"	m	struct:pa_mempool_stat
n_printed	ratelimit.h	/^    unsigned n_printed, n_missed;$/;"	m	struct:pa_ratelimit
n_ref	lock-autospawn.c	/^static unsigned n_ref = 0;$/;"	v	file:
n_sinks	card.h	/^    unsigned n_sinks;$/;"	m	struct:pa_card_profile
n_sources	card.h	/^    unsigned n_sources;$/;"	m	struct:pa_card_profile
n_too_large_for_pool	memblock.h	/^    pa_atomic_t n_too_large_for_pool;$/;"	m	struct:pa_mempool_stat
n_volume_steps	sink.h	/^    unsigned n_volume_steps; \/* shall be constant *\/$/;"	m	struct:pa_sink
n_volume_steps	source.h	/^    unsigned n_volume_steps; \/* shall be constant *\/$/;"	m	struct:pa_source
name	auth-cookie.c	/^    char *name;$/;"	m	struct:pa_auth_cookie	file:
name	card.h	/^    char *name;$/;"	m	struct:pa_card
name	card.h	/^    char *name;$/;"	m	struct:pa_card_new_data
name	card.h	/^    char *name;$/;"	m	struct:pa_card_profile
name	cli-command.c	/^    const char *name;$/;"	m	struct:command	file:
name	core-scache.h	/^    char *name;$/;"	m	struct:pa_scache_entry
name	esound.h	/^    char name[ ESD_NAME_MAX ];  \/* name of stream for remote control *\/$/;"	m	struct:esd_player_info
name	esound.h	/^    char name[ ESD_NAME_MAX ];  \/* name of stream for remote control *\/$/;"	m	struct:esd_sample_info
name	module.h	/^    char *name, *argument;$/;"	m	struct:pa_module
name	namereg.c	/^    char *name;$/;"	m	struct:namereg_entry	file:
name	protocol-esound.c	/^        char *name;$/;"	m	struct:connection::__anon12	file:
name	protocol-native.c	/^    char *name;$/;"	m	struct:upload_stream	file:
name	shared.c	/^    char *name;  \/* Points to memory allocated by the shared property system *\/$/;"	m	struct:pa_shared	file:
name	sink.h	/^    char *name;$/;"	m	struct:pa_device_port
name	sink.h	/^    char *name;$/;"	m	struct:pa_sink
name	sink.h	/^    char *name;$/;"	m	struct:pa_sink_new_data
name	source.h	/^    char *name;$/;"	m	struct:pa_source
name	source.h	/^    char *name;$/;"	m	struct:pa_source_new_data
namereg	core.h	/^    pa_hashmap *namereg, *shared;$/;"	m	struct:pa_core
namereg_entry	namereg.c	/^struct namereg_entry {$/;"	s	file:
namereg_fail	card.h	/^    pa_bool_t namereg_fail:1;$/;"	m	struct:pa_card_new_data
namereg_fail	sink.h	/^    pa_bool_t namereg_fail:1;$/;"	m	struct:pa_sink_new_data
namereg_fail	source.h	/^    pa_bool_t namereg_fail:1;$/;"	m	struct:pa_source_new_data
native_connection_free	protocol-native.c	/^static void native_connection_free(pa_object *o) {$/;"	f	file:
native_connection_process_msg	protocol-native.c	/^static int native_connection_process_msg(pa_msgobject *o, int code, void*userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
native_connection_send_memblock	protocol-native.c	/^static void native_connection_send_memblock(pa_native_connection *c) {$/;"	f	file:
native_connection_unlink	protocol-native.c	/^static void native_connection_unlink(pa_native_connection *c) {$/;"	f	file:
native_protocol_new	protocol-native.c	/^static pa_native_protocol* native_protocol_new(pa_core *c) {$/;"	f	file:
new_entry	database-simple.c	/^static entry* new_entry(const pa_datum *key, const pa_datum *data) {$/;"	f	file:
next	esound.h	/^    struct esd_player_info *next; \/* point to next entry in list *\/$/;"	m	struct:esd_player_info	typeref:struct:esd_player_info::esd_player_info
next	esound.h	/^    struct esd_sample_info *next; \/* point to next entry in list *\/$/;"	m	struct:esd_sample_info	typeref:struct:esd_sample_info::esd_sample_info
next	memblockq.c	/^    struct list_item *next, *prev;$/;"	m	struct:list_item	typeref:struct:list_item::list_item	file:
next	memtrap.c	/^    pa_memtrap *next[2], *prev[2];$/;"	m	struct:pa_memtrap	file:
next	queue.c	/^    struct queue_entry *next;$/;"	m	struct:queue_entry	typeref:struct:queue_entry::queue_entry	file:
next	strbuf.c	/^    struct chunk *next;$/;"	m	struct:chunk	typeref:struct:chunk::chunk	file:
next	strlist.c	/^    pa_strlist *next;$/;"	m	struct:pa_strlist	file:
next_assignment	conf-parser.c	/^static int next_assignment($/;"	f	file:
next_elapse	rtpoll.c	/^    struct timeval next_elapse;$/;"	m	struct:pa_rtpoll	typeref:struct:pa_rtpoll::timeval	file:
nfds_t	poll.h	/^typedef unsigned long int nfds_t;$/;"	t
no_close	iochannel.c	/^    pa_bool_t no_close;$/;"	m	struct:pa_iochannel	file:
normalize_path	authkey.c	/^static char *normalize_path(const char *fn) {$/;"	f	file:
o_cm	resampler.c	/^    pa_channel_map i_cm, o_cm;$/;"	m	struct:pa_resampler	file:
o_counter	resampler.c	/^        unsigned o_counter;$/;"	m	struct:pa_resampler::__anon37	file:
o_counter	resampler.c	/^        unsigned o_counter;$/;"	m	struct:pa_resampler::__anon38	file:
o_fz	resampler.c	/^    size_t i_fz, o_fz, w_sz;$/;"	m	struct:pa_resampler	file:
o_ss	remap.h	/^    pa_sample_spec *i_ss, *o_ss;$/;"	m	struct:pa_remap
o_ss	resampler.c	/^    pa_sample_spec i_ss, o_ss;$/;"	m	struct:pa_resampler	file:
object	asyncmsgq.c	/^    pa_msgobject *object;$/;"	m	struct:asyncmsgq_item	file:
ofd	iochannel.c	/^    int ifd, ofd;$/;"	m	struct:pa_iochannel	file:
ofd_type	iochannel.c	/^    int ifd_type, ofd_type;$/;"	m	struct:pa_iochannel	file:
offset	asyncmsgq.c	/^    int64_t offset;$/;"	m	struct:asyncmsgq_item	file:
offset	pstream.c	/^    int64_t offset;$/;"	m	struct:item_info	file:
on_center	resampler.c	/^static pa_bool_t on_center(pa_channel_position_t p) {$/;"	f	file:
on_connection	socket-server.c	/^    pa_socket_server_on_connection_cb_t on_connection;$/;"	m	struct:pa_socket_server	file:
on_front	resampler.c	/^static pa_bool_t on_front(pa_channel_position_t p) {$/;"	f	file:
on_left	resampler.c	/^static pa_bool_t on_left(pa_channel_position_t p) {$/;"	f	file:
on_lfe	resampler.c	/^static pa_bool_t on_lfe(pa_channel_position_t p) {$/;"	f	file:
on_rear	resampler.c	/^static pa_bool_t on_rear(pa_channel_position_t p) {$/;"	f	file:
on_right	resampler.c	/^static pa_bool_t on_right(pa_channel_position_t p) {$/;"	f	file:
on_side	resampler.c	/^static pa_bool_t on_side(pa_channel_position_t p) {$/;"	f	file:
on_the_fly	protocol-native.c	/^    pa_atomic_t on_the_fly;$/;"	m	struct:record_stream	file:
on_the_fly_snapshot	protocol-native.c	/^    size_t on_the_fly_snapshot;$/;"	m	struct:record_stream	file:
open_pid_file	pid.c	/^static int open_pid_file(const char *fn, int mode) {$/;"	f	file:
options	protocol-esound.c	/^    pa_esound_options *options;$/;"	m	struct:connection	file:
options	protocol-native.c	/^    pa_native_options *options;$/;"	m	struct:pa_native_connection	file:
options	protocol-simple.c	/^    pa_simple_options *options;$/;"	m	struct:connection	file:
original_name	protocol-esound.c	/^    char *original_name;$/;"	m	struct:connection	file:
output_event	iochannel.c	/^    pa_io_event* input_event, *output_event;$/;"	m	struct:pa_iochannel	file:
output_memblockq	protocol-esound.c	/^    pa_memblockq *input_memblockq, *output_memblockq;$/;"	m	struct:connection	file:
output_memblockq	protocol-http.c	/^    pa_memblockq *output_memblockq;$/;"	m	struct:connection	file:
output_memblockq	protocol-simple.c	/^    pa_memblockq *input_memblockq, *output_memblockq;$/;"	m	struct:connection	file:
output_stream	protocol-native.c	/^typedef struct output_stream {$/;"	s	file:
output_stream	protocol-native.c	/^} output_stream;$/;"	t	typeref:struct:output_stream	file:
output_streams	protocol-native.c	/^    pa_idxset *record_streams, *output_streams;$/;"	m	struct:pa_native_connection	file:
outputs	source.h	/^        pa_hashmap *outputs;$/;"	m	struct:pa_source::__anon2
outputs	source.h	/^    pa_idxset *outputs;$/;"	m	struct:pa_source
outq	thread-mq.h	/^    pa_asyncmsgq *inq, *outq;$/;"	m	struct:pa_thread_mq
pa_assert	macro.h	235;"	d
pa_assert	macro.h	238;"	d
pa_assert	macro.h	241;"	d
pa_assert_cc	macro.h	256;"	d
pa_assert_ctl_context	thread-mq.h	49;"	d
pa_assert_fp	macro.h	236;"	d
pa_assert_fp	macro.h	239;"	d
pa_assert_fp	macro.h	242;"	d
pa_assert_io_context	thread-mq.h	53;"	d
pa_assert_not_reached	macro.h	246;"	d
pa_assert_not_reached	macro.h	248;"	d
pa_assert_se	macro.h	218;"	d
pa_asyncmsgq	asyncmsgq.c	/^struct pa_asyncmsgq {$/;"	s	file:
pa_asyncmsgq	asyncmsgq.h	/^typedef struct pa_asyncmsgq pa_asyncmsgq;$/;"	t	typeref:struct:pa_asyncmsgq
pa_asyncmsgq_dispatch	asyncmsgq.c	/^int pa_asyncmsgq_dispatch(pa_msgobject *object, int code, void *userdata, int64_t offset, pa_memchunk *memchunk) {$/;"	f
pa_asyncmsgq_dispatching	asyncmsgq.c	/^pa_bool_t pa_asyncmsgq_dispatching(pa_asyncmsgq *a) {$/;"	f
pa_asyncmsgq_done	asyncmsgq.c	/^void pa_asyncmsgq_done(pa_asyncmsgq *a, int ret) {$/;"	f
pa_asyncmsgq_flush	asyncmsgq.c	/^void pa_asyncmsgq_flush(pa_asyncmsgq *a, pa_bool_t run) {$/;"	f
pa_asyncmsgq_get	asyncmsgq.c	/^int pa_asyncmsgq_get(pa_asyncmsgq *a, pa_msgobject **object, int *code, void **userdata, int64_t *offset, pa_memchunk *chunk, pa_bool_t wait_op) {$/;"	f
pa_asyncmsgq_new	asyncmsgq.c	/^pa_asyncmsgq *pa_asyncmsgq_new(unsigned size) {$/;"	f
pa_asyncmsgq_post	asyncmsgq.c	/^void pa_asyncmsgq_post(pa_asyncmsgq *a, pa_msgobject *object, int code, const void *userdata, int64_t offset, const pa_memchunk *chunk, pa_free_cb_t free_cb) {$/;"	f
pa_asyncmsgq_process_one	asyncmsgq.c	/^int pa_asyncmsgq_process_one(pa_asyncmsgq *a) {$/;"	f
pa_asyncmsgq_read_after_poll	asyncmsgq.c	/^void pa_asyncmsgq_read_after_poll(pa_asyncmsgq *a) {$/;"	f
pa_asyncmsgq_read_before_poll	asyncmsgq.c	/^int pa_asyncmsgq_read_before_poll(pa_asyncmsgq *a) {$/;"	f
pa_asyncmsgq_read_fd	asyncmsgq.c	/^int pa_asyncmsgq_read_fd(pa_asyncmsgq *a) {$/;"	f
pa_asyncmsgq_ref	asyncmsgq.c	/^pa_asyncmsgq* pa_asyncmsgq_ref(pa_asyncmsgq *q) {$/;"	f
pa_asyncmsgq_send	asyncmsgq.c	/^int pa_asyncmsgq_send(pa_asyncmsgq *a, pa_msgobject *object, int code, const void *userdata, int64_t offset, const pa_memchunk *chunk) {$/;"	f
pa_asyncmsgq_unref	asyncmsgq.c	/^void pa_asyncmsgq_unref(pa_asyncmsgq* q) {$/;"	f
pa_asyncmsgq_wait_for	asyncmsgq.c	/^int pa_asyncmsgq_wait_for(pa_asyncmsgq *a, int code) {$/;"	f
pa_asyncmsgq_write_after_poll	asyncmsgq.c	/^void pa_asyncmsgq_write_after_poll(pa_asyncmsgq *a) {$/;"	f
pa_asyncmsgq_write_before_poll	asyncmsgq.c	/^void pa_asyncmsgq_write_before_poll(pa_asyncmsgq *a) {$/;"	f
pa_asyncmsgq_write_fd	asyncmsgq.c	/^int pa_asyncmsgq_write_fd(pa_asyncmsgq *a) {$/;"	f
pa_asyncq	asyncq.c	/^struct pa_asyncq {$/;"	s	file:
pa_asyncq	asyncq.h	/^typedef struct pa_asyncq pa_asyncq;$/;"	t	typeref:struct:pa_asyncq
pa_asyncq_free	asyncq.c	/^void pa_asyncq_free(pa_asyncq *l, pa_free_cb_t free_cb) {$/;"	f
pa_asyncq_new	asyncq.c	/^pa_asyncq *pa_asyncq_new(unsigned size) {$/;"	f
pa_asyncq_pop	asyncq.c	/^void* pa_asyncq_pop(pa_asyncq*l, pa_bool_t wait_op) {$/;"	f
pa_asyncq_post	asyncq.c	/^void pa_asyncq_post(pa_asyncq*l, void *p) {$/;"	f
pa_asyncq_push	asyncq.c	/^int pa_asyncq_push(pa_asyncq*l, void *p, pa_bool_t wait_op) {$/;"	f
pa_asyncq_read_after_poll	asyncq.c	/^void pa_asyncq_read_after_poll(pa_asyncq *l) {$/;"	f
pa_asyncq_read_before_poll	asyncq.c	/^int pa_asyncq_read_before_poll(pa_asyncq *l) {$/;"	f
pa_asyncq_read_fd	asyncq.c	/^int pa_asyncq_read_fd(pa_asyncq *q) {$/;"	f
pa_asyncq_write_after_poll	asyncq.c	/^void pa_asyncq_write_after_poll(pa_asyncq *l) {$/;"	f
pa_asyncq_write_before_poll	asyncq.c	/^void pa_asyncq_write_before_poll(pa_asyncq *l) {$/;"	f
pa_asyncq_write_fd	asyncq.c	/^int pa_asyncq_write_fd(pa_asyncq *q) {$/;"	f
pa_atod	core-util.c	/^int pa_atod(const char *s, double *ret_d) {$/;"	f
pa_atoi	core-util.c	/^int pa_atoi(const char *s, int32_t *ret_i) {$/;"	f
pa_atomic	atomic.h	/^typedef struct pa_atomic {$/;"	s
pa_atomic_add	atomic.h	/^static inline int pa_atomic_add(pa_atomic_t *a, int i) {$/;"	f
pa_atomic_cmpxchg	atomic.h	/^static inline pa_bool_t pa_atomic_cmpxchg(pa_atomic_t *a, int old_i, int new_i) {$/;"	f
pa_atomic_dec	atomic.h	/^static inline int pa_atomic_dec(pa_atomic_t *a) {$/;"	f
pa_atomic_inc	atomic.h	/^static inline int pa_atomic_inc(pa_atomic_t *a) {$/;"	f
pa_atomic_load	atomic.h	/^static inline int pa_atomic_load(const pa_atomic_t *a) {$/;"	f
pa_atomic_ptr	atomic.h	/^typedef struct pa_atomic_ptr {$/;"	s
pa_atomic_ptr_cmpxchg	atomic.h	/^static inline pa_bool_t pa_atomic_ptr_cmpxchg(pa_atomic_ptr_t *a, void *old_p, void* new_p) {$/;"	f
pa_atomic_ptr_load	atomic.h	/^static inline void* pa_atomic_ptr_load(const pa_atomic_ptr_t *a) {$/;"	f
pa_atomic_ptr_store	atomic.h	/^static inline void pa_atomic_ptr_store(pa_atomic_ptr_t *a, void *p) {$/;"	f
pa_atomic_ptr_t	atomic.h	/^} pa_atomic_ptr_t;$/;"	t	typeref:struct:pa_atomic_ptr
pa_atomic_store	atomic.h	/^static inline void pa_atomic_store(pa_atomic_t *a, int i) {$/;"	f
pa_atomic_sub	atomic.h	/^static inline int pa_atomic_sub(pa_atomic_t *a, int i) {$/;"	f
pa_atomic_t	atomic.h	/^} pa_atomic_t;$/;"	t	typeref:struct:pa_atomic
pa_atou	core-util.c	/^int pa_atou(const char *s, uint32_t *ret_u) {$/;"	f
pa_aupdate	aupdate.c	/^struct pa_aupdate {$/;"	s	file:
pa_aupdate	aupdate.h	/^typedef struct pa_aupdate pa_aupdate;$/;"	t	typeref:struct:pa_aupdate
pa_aupdate_free	aupdate.c	/^void pa_aupdate_free(pa_aupdate *a) {$/;"	f
pa_aupdate_new	aupdate.c	/^pa_aupdate *pa_aupdate_new(void) {$/;"	f
pa_aupdate_read_begin	aupdate.c	/^unsigned pa_aupdate_read_begin(pa_aupdate *a) {$/;"	f
pa_aupdate_read_end	aupdate.c	/^void pa_aupdate_read_end(pa_aupdate *a) {$/;"	f
pa_aupdate_write_begin	aupdate.c	/^unsigned pa_aupdate_write_begin(pa_aupdate *a) {$/;"	f
pa_aupdate_write_end	aupdate.c	/^void pa_aupdate_write_end(pa_aupdate *a) {$/;"	f
pa_aupdate_write_swap	aupdate.c	/^unsigned pa_aupdate_write_swap(pa_aupdate *a) {$/;"	f
pa_auth_cookie	auth-cookie.c	/^struct pa_auth_cookie {$/;"	s	file:
pa_auth_cookie	auth-cookie.h	/^typedef struct pa_auth_cookie pa_auth_cookie;$/;"	t	typeref:struct:pa_auth_cookie
pa_auth_cookie_get	auth-cookie.c	/^pa_auth_cookie* pa_auth_cookie_get(pa_core *core, const char *cn, size_t size) {$/;"	f
pa_auth_cookie_read	auth-cookie.c	/^const uint8_t* pa_auth_cookie_read(pa_auth_cookie *c, size_t size) {$/;"	f
pa_auth_cookie_ref	auth-cookie.c	/^pa_auth_cookie* pa_auth_cookie_ref(pa_auth_cookie *c) {$/;"	f
pa_auth_cookie_unref	auth-cookie.c	/^void pa_auth_cookie_unref(pa_auth_cookie *c) {$/;"	f
pa_authkey_load	authkey.c	/^int pa_authkey_load(const char *path, void *data, size_t length) {$/;"	f
pa_authkey_load_auto	authkey.c	/^int pa_authkey_load_auto(const char *fn, void *data, size_t length) {$/;"	f
pa_authkey_save	authkey.c	/^int pa_authkey_save(const char *fn, const void *data, size_t length) {$/;"	f
pa_autospawn_lock_acquire	lock-autospawn.c	/^int pa_autospawn_lock_acquire(pa_bool_t block) {$/;"	f
pa_autospawn_lock_done	lock-autospawn.c	/^void pa_autospawn_lock_done(pa_bool_t after_fork) {$/;"	f
pa_autospawn_lock_init	lock-autospawn.c	/^int pa_autospawn_lock_init(void) {$/;"	f
pa_autospawn_lock_release	lock-autospawn.c	/^void pa_autospawn_lock_release(void) {$/;"	f
pa_avahi_poll	avahi-wrap.c	/^} pa_avahi_poll;$/;"	t	typeref:struct:__anon19	file:
pa_avahi_poll_free	avahi-wrap.c	/^void pa_avahi_poll_free(AvahiPoll *api) {$/;"	f
pa_avahi_poll_new	avahi-wrap.c	/^AvahiPoll* pa_avahi_poll_new(pa_mainloop_api *m) {$/;"	f
pa_bitset_equals	bitset.c	/^pa_bool_t pa_bitset_equals(const pa_bitset_t *b, unsigned n, ...) {$/;"	f
pa_bitset_get	bitset.c	/^pa_bool_t pa_bitset_get(const pa_bitset_t *b, unsigned k) {$/;"	f
pa_bitset_set	bitset.c	/^void pa_bitset_set(pa_bitset_t *b, unsigned k, pa_bool_t v) {$/;"	f
pa_bitset_t	bitset.h	/^typedef uint32_t pa_bitset_t;$/;"	t
pa_bool_t	macro.h	/^typedef _Bool pa_bool_t;$/;"	t
pa_bool_t	macro.h	/^typedef int pa_bool_t;$/;"	t
pa_bytes_to_usec_round_up	sample-util.c	/^pa_usec_t pa_bytes_to_usec_round_up(uint64_t length, const pa_sample_spec *spec) {$/;"	f
pa_calc_volume_func_t	sample-util.c	/^typedef void (*pa_calc_volume_func_t) (void *volumes, const pa_cvolume *volume);$/;"	t	file:
pa_card	card.h	/^struct pa_card {$/;"	s
pa_card	card.h	/^typedef struct pa_card pa_card;$/;"	t	typeref:struct:pa_card
pa_card_free	card.c	/^void pa_card_free(pa_card *c) {$/;"	f
pa_card_list_to_string	cli-text.c	/^char *pa_card_list_to_string(pa_core *c) {$/;"	f
pa_card_new	card.c	/^pa_card *pa_card_new(pa_core *core, pa_card_new_data *data) {$/;"	f
pa_card_new_data	card.h	/^typedef struct pa_card_new_data {$/;"	s
pa_card_new_data	card.h	/^} pa_card_new_data;$/;"	t	typeref:struct:pa_card_new_data
pa_card_new_data_done	card.c	/^void pa_card_new_data_done(pa_card_new_data *data) {$/;"	f
pa_card_new_data_init	card.c	/^pa_card_new_data* pa_card_new_data_init(pa_card_new_data *data) {$/;"	f
pa_card_new_data_set_name	card.c	/^void pa_card_new_data_set_name(pa_card_new_data *data, const char *name) {$/;"	f
pa_card_new_data_set_profile	card.c	/^void pa_card_new_data_set_profile(pa_card_new_data *data, const char *profile) {$/;"	f
pa_card_profile	card.h	/^typedef struct pa_card_profile {$/;"	s
pa_card_profile	card.h	/^} pa_card_profile;$/;"	t	typeref:struct:pa_card_profile
pa_card_profile_free	card.c	/^void pa_card_profile_free(pa_card_profile *c) {$/;"	f
pa_card_profile_new	card.c	/^pa_card_profile *pa_card_profile_new(const char *name, const char *description, size_t extra) {$/;"	f
pa_card_set_profile	card.c	/^int pa_card_set_profile(pa_card *c, const char *name, pa_bool_t save) {$/;"	f
pa_card_suspend	card.c	/^int pa_card_suspend(pa_card *c, pa_bool_t suspend, pa_suspend_cause_t cause) {$/;"	f
pa_check_in_group	core-util.c	/^int pa_check_in_group(gid_t g) {$/;"	f
pa_check_signal_is_blocked	core-util.c	/^void pa_check_signal_is_blocked(int sig) {$/;"	f
pa_cli	cli.c	/^struct pa_cli {$/;"	s	file:
pa_cli	cli.h	/^typedef struct pa_cli pa_cli;$/;"	t	typeref:struct:pa_cli
pa_cli_command_card_profile	cli-command.c	/^static int pa_cli_command_card_profile(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_cards	cli-command.c	/^static int pa_cli_command_cards(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_clients	cli-command.c	/^static int pa_cli_command_clients(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_describe	cli-command.c	/^static int pa_cli_command_describe(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_dump	cli-command.c	/^static int pa_cli_command_dump(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_execute	cli-command.c	/^int pa_cli_command_execute(pa_core *c, const char *s, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f
pa_cli_command_execute_file	cli-command.c	/^int pa_cli_command_execute_file(pa_core *c, const char *fn, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f
pa_cli_command_execute_file_stream	cli-command.c	/^int pa_cli_command_execute_file_stream(pa_core *c, FILE *f, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f
pa_cli_command_execute_line	cli-command.c	/^int pa_cli_command_execute_line(pa_core *c, const char *s, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f
pa_cli_command_execute_line_stateful	cli-command.c	/^int pa_cli_command_execute_line_stateful(pa_core *c, const char *s, pa_strbuf *buf, pa_bool_t *fail, int *ifstate) {$/;"	f
pa_cli_command_exit	cli-command.c	/^static int pa_cli_command_exit(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_help	cli-command.c	/^static int pa_cli_command_help(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_info	cli-command.c	/^static int pa_cli_command_info(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_kill_client	cli-command.c	/^static int pa_cli_command_kill_client(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_kill_sink_input	cli-command.c	/^static int pa_cli_command_kill_sink_input(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_kill_source_output	cli-command.c	/^static int pa_cli_command_kill_source_output(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_list_shared_props	cli-command.c	/^static int pa_cli_command_list_shared_props(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_load	cli-command.c	/^static int pa_cli_command_load(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_log_backtrace	cli-command.c	/^static int pa_cli_command_log_backtrace(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_log_level	cli-command.c	/^static int pa_cli_command_log_level(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_log_meta	cli-command.c	/^static int pa_cli_command_log_meta(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_log_time	cli-command.c	/^static int pa_cli_command_log_time(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_modules	cli-command.c	/^static int pa_cli_command_modules(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_move_sink_input	cli-command.c	/^static int pa_cli_command_move_sink_input(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_move_source_output	cli-command.c	/^static int pa_cli_command_move_source_output(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_play_file	cli-command.c	/^static int pa_cli_command_play_file(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_scache_list	cli-command.c	/^static int pa_cli_command_scache_list(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_scache_load	cli-command.c	/^static int pa_cli_command_scache_load(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_scache_load_dir	cli-command.c	/^static int pa_cli_command_scache_load_dir(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_scache_play	cli-command.c	/^static int pa_cli_command_scache_play(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_scache_remove	cli-command.c	/^static int pa_cli_command_scache_remove(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sink_default	cli-command.c	/^static int pa_cli_command_sink_default(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sink_input_mute	cli-command.c	/^static int pa_cli_command_sink_input_mute(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sink_input_volume	cli-command.c	/^static int pa_cli_command_sink_input_volume(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sink_inputs	cli-command.c	/^static int pa_cli_command_sink_inputs(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sink_mute	cli-command.c	/^static int pa_cli_command_sink_mute(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sink_port	cli-command.c	/^static int pa_cli_command_sink_port(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sink_volume	cli-command.c	/^static int pa_cli_command_sink_volume(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sinks	cli-command.c	/^static int pa_cli_command_sinks(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_source_default	cli-command.c	/^static int pa_cli_command_source_default(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_source_mute	cli-command.c	/^static int pa_cli_command_source_mute(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_source_outputs	cli-command.c	/^static int pa_cli_command_source_outputs(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_source_port	cli-command.c	/^static int pa_cli_command_source_port(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_source_volume	cli-command.c	/^static int pa_cli_command_source_volume(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_sources	cli-command.c	/^static int pa_cli_command_sources(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_stat	cli-command.c	/^static int pa_cli_command_stat(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_suspend	cli-command.c	/^static int pa_cli_command_suspend(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_suspend_sink	cli-command.c	/^static int pa_cli_command_suspend_sink(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_suspend_source	cli-command.c	/^static int pa_cli_command_suspend_source(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_unload	cli-command.c	/^static int pa_cli_command_unload(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_update_sink_input_proplist	cli-command.c	/^static int pa_cli_command_update_sink_input_proplist(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_update_sink_proplist	cli-command.c	/^static int pa_cli_command_update_sink_proplist(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_update_source_output_proplist	cli-command.c	/^static int pa_cli_command_update_source_output_proplist(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_update_source_proplist	cli-command.c	/^static int pa_cli_command_update_source_proplist(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_command_vacuum	cli-command.c	/^static int pa_cli_command_vacuum(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, pa_bool_t *fail) {$/;"	f	file:
pa_cli_eof_cb_t	cli.h	/^typedef void (*pa_cli_eof_cb_t)(pa_cli *c, void *userdata);$/;"	t
pa_cli_free	cli.c	/^void pa_cli_free(pa_cli *c) {$/;"	f
pa_cli_get_module	cli.c	/^pa_module *pa_cli_get_module(pa_cli *c) {$/;"	f
pa_cli_new	cli.c	/^pa_cli* pa_cli_new(pa_core *core, pa_iochannel *io, pa_module *m) {$/;"	f
pa_cli_protocol	protocol-cli.c	/^struct pa_cli_protocol {$/;"	s	file:
pa_cli_protocol	protocol-cli.h	/^typedef struct pa_cli_protocol pa_cli_protocol;$/;"	t	typeref:struct:pa_cli_protocol
pa_cli_protocol_connect	protocol-cli.c	/^void pa_cli_protocol_connect(pa_cli_protocol *p, pa_iochannel *io, pa_module *m) {$/;"	f
pa_cli_protocol_disconnect	protocol-cli.c	/^void pa_cli_protocol_disconnect(pa_cli_protocol *p, pa_module *m) {$/;"	f
pa_cli_protocol_get	protocol-cli.c	/^pa_cli_protocol* pa_cli_protocol_get(pa_core *c) {$/;"	f
pa_cli_protocol_ref	protocol-cli.c	/^pa_cli_protocol* pa_cli_protocol_ref(pa_cli_protocol *p) {$/;"	f
pa_cli_protocol_unref	protocol-cli.c	/^void pa_cli_protocol_unref(pa_cli_protocol *p) {$/;"	f
pa_cli_set_eof_callback	cli.c	/^void pa_cli_set_eof_callback(pa_cli *c, pa_cli_eof_cb_t cb, void *userdata) {$/;"	f
pa_client	client.h	/^struct pa_client {$/;"	s
pa_client	client.h	/^typedef struct pa_client pa_client;$/;"	t	typeref:struct:pa_client
pa_client_free	client.c	/^void pa_client_free(pa_client *c) {$/;"	f
pa_client_kill	client.c	/^void pa_client_kill(pa_client *c) {$/;"	f
pa_client_list_to_string	cli-text.c	/^char *pa_client_list_to_string(pa_core *c) {$/;"	f
pa_client_new	client.c	/^pa_client *pa_client_new(pa_core *core, pa_client_new_data *data) {$/;"	f
pa_client_new_data	client.h	/^typedef struct pa_client_new_data {$/;"	s
pa_client_new_data	client.h	/^} pa_client_new_data;$/;"	t	typeref:struct:pa_client_new_data
pa_client_new_data_done	client.c	/^void pa_client_new_data_done(pa_client_new_data *data) {$/;"	f
pa_client_new_data_init	client.c	/^pa_client_new_data* pa_client_new_data_init(pa_client_new_data *data) {$/;"	f
pa_client_send_event	client.c	/^void pa_client_send_event(pa_client *c, const char *event, pa_proplist *data) {$/;"	f
pa_client_send_event_hook_data	client.h	/^typedef struct pa_client_send_event_hook_data {$/;"	s
pa_client_send_event_hook_data	client.h	/^} pa_client_send_event_hook_data;$/;"	t	typeref:struct:pa_client_send_event_hook_data
pa_client_set_name	client.c	/^void pa_client_set_name(pa_client *c, const char *name) {$/;"	f
pa_client_update_proplist	client.c	/^void pa_client_update_proplist(pa_client *c, pa_update_mode_t mode, pa_proplist *p) {$/;"	f
pa_close	core-util.c	/^int pa_close(int fd) {$/;"	f
pa_close_all	core-util.c	/^int pa_close_all(int except_fd, ...) {$/;"	f
pa_close_allv	core-util.c	/^int pa_close_allv(const int except_fds[]) {$/;"	f
pa_close_pipe	core-util.c	/^void pa_close_pipe(int fds[2]) {$/;"	f
pa_compare_func_t	idxset.h	/^typedef int (*pa_compare_func_t)(const void *a, const void *b);$/;"	t
pa_cond	mutex-posix.c	/^struct pa_cond {$/;"	s	file:
pa_cond	mutex-win32.c	/^struct pa_cond {$/;"	s	file:
pa_cond	mutex.h	/^typedef struct pa_cond pa_cond;$/;"	t	typeref:struct:pa_cond
pa_cond_free	mutex-posix.c	/^void pa_cond_free(pa_cond *c) {$/;"	f
pa_cond_free	mutex-win32.c	/^void pa_cond_free(pa_cond *c) {$/;"	f
pa_cond_new	mutex-posix.c	/^pa_cond *pa_cond_new(void) {$/;"	f
pa_cond_new	mutex-win32.c	/^pa_cond *pa_cond_new(void) {$/;"	f
pa_cond_signal	mutex-posix.c	/^void pa_cond_signal(pa_cond *c, int broadcast) {$/;"	f
pa_cond_signal	mutex-win32.c	/^void pa_cond_signal(pa_cond *c, int broadcast) {$/;"	f
pa_cond_wait	mutex-posix.c	/^int pa_cond_wait(pa_cond *c, pa_mutex *m) {$/;"	f
pa_cond_wait	mutex-win32.c	/^int pa_cond_wait(pa_cond *c, pa_mutex *m) {$/;"	f
pa_config_item	conf-parser.h	/^typedef struct pa_config_item {$/;"	s
pa_config_item	conf-parser.h	/^} pa_config_item;$/;"	t	typeref:struct:pa_config_item
pa_config_parse	conf-parser.c	/^int pa_config_parse(const char *filename, FILE *f, const pa_config_item *t, void *userdata) {$/;"	f
pa_config_parse_bool	conf-parser.c	/^int pa_config_parse_bool(const char *filename, unsigned line, const char *section, const char *lvalue, const char *rvalue, void *data, void *userdata) {$/;"	f
pa_config_parse_int	conf-parser.c	/^int pa_config_parse_int(const char *filename, unsigned line, const char *section, const char *lvalue, const char *rvalue, void *data, void *userdata) {$/;"	f
pa_config_parse_not_bool	conf-parser.c	/^int pa_config_parse_not_bool($/;"	f
pa_config_parse_size	conf-parser.c	/^int pa_config_parse_size(const char *filename, unsigned line, const char *section, const char *lvalue, const char *rvalue, void *data, void *userdata) {$/;"	f
pa_config_parse_string	conf-parser.c	/^int pa_config_parse_string(const char *filename, unsigned line, const char *section, const char *lvalue, const char *rvalue, void *data, void *userdata) {$/;"	f
pa_config_parse_unsigned	conf-parser.c	/^int pa_config_parse_unsigned(const char *filename, unsigned line, const char *section, const char *lvalue, const char *rvalue, void *data, void *userdata) {$/;"	f
pa_config_parser_cb_t	conf-parser.h	/^typedef int (*pa_config_parser_cb_t)(const char *filename, unsigned line, const char *section, const char *lvalue, const char *rvalue, void *data, void *userdata);$/;"	t
pa_convert_func_init_sse	sconv_sse.c	/^void pa_convert_func_init_sse (pa_cpu_x86_flag_t flags) {$/;"	f
pa_convert_func_t	sconv.h	/^typedef void (*pa_convert_func_t)(unsigned n, const void *a, void *b);$/;"	t
pa_convert_size	sample-util.c	/^size_t pa_convert_size(size_t size, const pa_sample_spec *from, const pa_sample_spec *to) {$/;"	f
pa_core	core.h	/^PA_DECLARE_PUBLIC_CLASS(pa_core);$/;"	v
pa_core	core.h	/^struct pa_core {$/;"	s
pa_core	core.h	/^typedef struct pa_core pa_core;$/;"	t	typeref:struct:pa_core
pa_core_check_idle	core.c	/^void pa_core_check_idle(pa_core *c) {$/;"	f
pa_core_exit	core.c	/^int pa_core_exit(pa_core *c, pa_bool_t force, int retval) {$/;"	f
pa_core_hook	core.h	/^typedef enum pa_core_hook {$/;"	g
pa_core_hook_t	core.h	/^} pa_core_hook_t;$/;"	t	typeref:enum:pa_core_hook
pa_core_maybe_vacuum	core.c	/^void pa_core_maybe_vacuum(pa_core *c) {$/;"	f
pa_core_new	core.c	/^pa_core* pa_core_new(pa_mainloop_api *m, pa_bool_t shared, size_t shm_size) {$/;"	f
pa_core_rttime_new	core.c	/^pa_time_event* pa_core_rttime_new(pa_core *c, pa_usec_t usec, pa_time_event_cb_t cb, void *userdata) {$/;"	f
pa_core_rttime_restart	core.c	/^void pa_core_rttime_restart(pa_core *c, pa_time_event *e, pa_usec_t usec) {$/;"	f
pa_core_state	core.h	/^typedef enum pa_core_state {$/;"	g
pa_core_state_t	core.h	/^} pa_core_state_t;$/;"	t	typeref:enum:pa_core_state
pa_cpu_arm_flag	cpu-arm.h	/^typedef enum pa_cpu_arm_flag {$/;"	g
pa_cpu_arm_flag_t	cpu-arm.h	/^} pa_cpu_arm_flag_t;$/;"	t	typeref:enum:pa_cpu_arm_flag
pa_cpu_init_arm	cpu-arm.c	/^void pa_cpu_init_arm (void) {$/;"	f
pa_cpu_init_x86	cpu-x86.c	/^void pa_cpu_init_x86 (void) {$/;"	f
pa_cpu_x86_flag	cpu-x86.h	/^typedef enum pa_cpu_x86_flag {$/;"	g
pa_cpu_x86_flag_t	cpu-x86.h	/^} pa_cpu_x86_flag_t;$/;"	t	typeref:enum:pa_cpu_x86_flag
pa_creds	creds.h	/^struct pa_creds {$/;"	s
pa_creds	creds.h	/^typedef struct pa_creds pa_creds;$/;"	t	typeref:struct:pa_creds
pa_cstrerror	core-error.c	/^const char* pa_cstrerror(int errnum) {$/;"	f
pa_database	database.h	/^typedef struct pa_database pa_database;$/;"	t	typeref:struct:pa_database
pa_database_clear	database-gdbm.c	/^int pa_database_clear(pa_database *db) {$/;"	f
pa_database_clear	database-simple.c	/^int pa_database_clear(pa_database *database) {$/;"	f
pa_database_clear	database-tdb.c	/^int pa_database_clear(pa_database *db) {$/;"	f
pa_database_close	database-gdbm.c	/^void pa_database_close(pa_database *db) {$/;"	f
pa_database_close	database-simple.c	/^void pa_database_close(pa_database *database) {$/;"	f
pa_database_close	database-tdb.c	/^void pa_database_close(pa_database *db) {$/;"	f
pa_database_first	database-gdbm.c	/^pa_datum* pa_database_first(pa_database *db, pa_datum *key, pa_datum *data) {$/;"	f
pa_database_first	database-simple.c	/^pa_datum* pa_database_first(pa_database *database, pa_datum *key, pa_datum *data) {$/;"	f
pa_database_first	database-tdb.c	/^pa_datum* pa_database_first(pa_database *db, pa_datum *key, pa_datum *data) {$/;"	f
pa_database_get	database-gdbm.c	/^pa_datum* pa_database_get(pa_database *db, const pa_datum *key, pa_datum* data) {$/;"	f
pa_database_get	database-simple.c	/^pa_datum* pa_database_get(pa_database *database, const pa_datum *key, pa_datum* data) {$/;"	f
pa_database_get	database-tdb.c	/^pa_datum* pa_database_get(pa_database *db, const pa_datum *key, pa_datum* data) {$/;"	f
pa_database_next	database-gdbm.c	/^pa_datum* pa_database_next(pa_database *db, const pa_datum *key, pa_datum *next, pa_datum *data) {$/;"	f
pa_database_next	database-simple.c	/^pa_datum* pa_database_next(pa_database *database, const pa_datum *key, pa_datum *next, pa_datum *data) {$/;"	f
pa_database_next	database-tdb.c	/^pa_datum* pa_database_next(pa_database *db, const pa_datum *key, pa_datum *next, pa_datum *data) {$/;"	f
pa_database_open	database-gdbm.c	/^pa_database* pa_database_open(const char *fn, pa_bool_t for_write) {$/;"	f
pa_database_open	database-simple.c	/^pa_database* pa_database_open(const char *fn, pa_bool_t for_write) {$/;"	f
pa_database_open	database-tdb.c	/^pa_database* pa_database_open(const char *fn, pa_bool_t for_write) {$/;"	f
pa_database_set	database-gdbm.c	/^int pa_database_set(pa_database *db, const pa_datum *key, const pa_datum* data, pa_bool_t overwrite) {$/;"	f
pa_database_set	database-simple.c	/^int pa_database_set(pa_database *database, const pa_datum *key, const pa_datum* data, pa_bool_t overwrite) {$/;"	f
pa_database_set	database-tdb.c	/^int pa_database_set(pa_database *db, const pa_datum *key, const pa_datum* data, pa_bool_t overwrite) {$/;"	f
pa_database_size	database-gdbm.c	/^signed pa_database_size(pa_database *db) {$/;"	f
pa_database_size	database-simple.c	/^signed pa_database_size(pa_database *database) {$/;"	f
pa_database_size	database-tdb.c	/^signed pa_database_size(pa_database *db) {$/;"	f
pa_database_sync	database-gdbm.c	/^int pa_database_sync(pa_database *db) {$/;"	f
pa_database_sync	database-simple.c	/^int pa_database_sync(pa_database *database) {$/;"	f
pa_database_sync	database-tdb.c	/^int pa_database_sync(pa_database *db) {$/;"	f
pa_database_unset	database-gdbm.c	/^int pa_database_unset(pa_database *db, const pa_datum *key) {$/;"	f
pa_database_unset	database-simple.c	/^int pa_database_unset(pa_database *database, const pa_datum *key) {$/;"	f
pa_database_unset	database-tdb.c	/^int pa_database_unset(pa_database *db, const pa_datum *key) {$/;"	f
pa_datum	database.h	/^typedef struct pa_datum {$/;"	s
pa_datum	database.h	/^} pa_datum;$/;"	t	typeref:struct:pa_datum
pa_datum_free	database-gdbm.c	/^void pa_datum_free(pa_datum *d) {$/;"	f
pa_datum_free	database-simple.c	/^void pa_datum_free(pa_datum *d) {$/;"	f
pa_datum_free	database-tdb.c	/^void pa_datum_free(pa_datum *d) {$/;"	f
pa_dbus_add_matches	dbus-util.c	/^int pa_dbus_add_matches(DBusConnection *c, DBusError *error, ...) {$/;"	f
pa_dbus_bus_get	dbus-shared.c	/^pa_dbus_connection* pa_dbus_bus_get(pa_core *c, DBusBusType type, DBusError *error) {$/;"	f
pa_dbus_connection	dbus-shared.c	/^struct pa_dbus_connection {$/;"	s	file:
pa_dbus_connection	dbus-shared.h	/^typedef struct pa_dbus_connection pa_dbus_connection;$/;"	t	typeref:struct:pa_dbus_connection
pa_dbus_connection_get	dbus-shared.c	/^DBusConnection* pa_dbus_connection_get(pa_dbus_connection *c){$/;"	f
pa_dbus_connection_ref	dbus-shared.c	/^pa_dbus_connection* pa_dbus_connection_ref(pa_dbus_connection *c) {$/;"	f
pa_dbus_connection_unref	dbus-shared.c	/^void pa_dbus_connection_unref(pa_dbus_connection *c) {$/;"	f
pa_dbus_free_pending_list	dbus-util.c	/^void pa_dbus_free_pending_list(pa_dbus_pending **p) {$/;"	f
pa_dbus_pending	dbus-util.h	/^struct pa_dbus_pending {$/;"	s
pa_dbus_pending	dbus-util.h	/^typedef struct pa_dbus_pending pa_dbus_pending;$/;"	t	typeref:struct:pa_dbus_pending
pa_dbus_pending_free	dbus-util.c	/^void pa_dbus_pending_free(pa_dbus_pending *p) {$/;"	f
pa_dbus_pending_new	dbus-util.c	/^pa_dbus_pending *pa_dbus_pending_new($/;"	f
pa_dbus_remove_matches	dbus-util.c	/^void pa_dbus_remove_matches(DBusConnection *c, ...) {$/;"	f
pa_dbus_sync_pending_list	dbus-util.c	/^void pa_dbus_sync_pending_list(pa_dbus_pending **p) {$/;"	f
pa_dbus_wrap_connection	dbus-util.c	/^struct pa_dbus_wrap_connection {$/;"	s	file:
pa_dbus_wrap_connection	dbus-util.h	/^typedef struct pa_dbus_wrap_connection pa_dbus_wrap_connection;$/;"	t	typeref:struct:pa_dbus_wrap_connection
pa_dbus_wrap_connection_free	dbus-util.c	/^void pa_dbus_wrap_connection_free(pa_dbus_wrap_connection* c) {$/;"	f
pa_dbus_wrap_connection_get	dbus-util.c	/^DBusConnection* pa_dbus_wrap_connection_get(pa_dbus_wrap_connection *c) {$/;"	f
pa_dbus_wrap_connection_new	dbus-util.c	/^pa_dbus_wrap_connection* pa_dbus_wrap_connection_new(pa_mainloop_api *m, pa_bool_t use_rtclock, DBusBusType type, DBusError *error) {$/;"	f
pa_deinterleave	sample-util.c	/^void pa_deinterleave(const void *src, void *dst[], unsigned channels, size_t ss, unsigned n) {$/;"	f
pa_device_init_description	sink.c	/^pa_bool_t pa_device_init_description(pa_proplist *p) {$/;"	f
pa_device_init_icon	sink.c	/^pa_bool_t pa_device_init_icon(pa_proplist *p, pa_bool_t is_sink) {$/;"	f
pa_device_init_intended_roles	sink.c	/^pa_bool_t pa_device_init_intended_roles(pa_proplist *p) {$/;"	f
pa_device_init_priority	sink.c	/^unsigned pa_device_init_priority(pa_proplist *p) {$/;"	f
pa_device_port	sink.h	/^struct pa_device_port {$/;"	s
pa_device_port	sink.h	/^typedef struct pa_device_port pa_device_port;$/;"	t	typeref:struct:pa_device_port
pa_device_port_free	sink.c	/^void pa_device_port_free(pa_device_port *p) {$/;"	f
pa_device_port_new	sink.c	/^pa_device_port *pa_device_port_new(const char *name, const char *description, size_t extra) {$/;"	f
pa_disable_sigpipe	core-util.c	/^void pa_disable_sigpipe(void) {$/;"	f
pa_do_remap_func_t	remap.h	/^typedef void (*pa_do_remap_func_t) (pa_remap_t *m, void *d, const void *s, unsigned n);$/;"	t
pa_do_volume_func_t	sample-util.h	/^typedef void (*pa_do_volume_func_t) (void *samples, void *volumes, unsigned channels, unsigned length);$/;"	t
pa_dynarray	dynarray.c	/^struct pa_dynarray {$/;"	s	file:
pa_dynarray	dynarray.h	/^typedef struct pa_dynarray pa_dynarray;$/;"	t	typeref:struct:pa_dynarray
pa_dynarray_append	dynarray.c	/^unsigned pa_dynarray_append(pa_dynarray*a, void *p) {$/;"	f
pa_dynarray_free	dynarray.c	/^void pa_dynarray_free(pa_dynarray* a, pa_free2_cb_t free_func, void *userdata) {$/;"	f
pa_dynarray_get	dynarray.c	/^void *pa_dynarray_get(pa_dynarray*a, unsigned i) {$/;"	f
pa_dynarray_new	dynarray.c	/^pa_dynarray* pa_dynarray_new(void) {$/;"	f
pa_dynarray_put	dynarray.c	/^void pa_dynarray_put(pa_dynarray*a, unsigned i, void *p) {$/;"	f
pa_dynarray_size	dynarray.c	/^unsigned pa_dynarray_size(pa_dynarray*a) {$/;"	f
pa_endswith	core-util.c	/^pa_bool_t pa_endswith(const char *s, const char *sfx) {$/;"	f
pa_envelope	envelope.c	/^struct pa_envelope {$/;"	s	file:
pa_envelope	envelope.h	/^typedef struct pa_envelope pa_envelope;$/;"	t	typeref:struct:pa_envelope
pa_envelope_add	envelope.c	/^pa_envelope_item *pa_envelope_add(pa_envelope *e, const pa_envelope_def *def) {$/;"	f
pa_envelope_apply	envelope.c	/^void pa_envelope_apply(pa_envelope *e, pa_memchunk *chunk) {$/;"	f
pa_envelope_def	envelope.h	/^typedef struct pa_envelope_def {$/;"	s
pa_envelope_def	envelope.h	/^} pa_envelope_def;$/;"	t	typeref:struct:pa_envelope_def
pa_envelope_free	envelope.c	/^void pa_envelope_free(pa_envelope *e) {$/;"	f
pa_envelope_item	envelope.c	/^struct pa_envelope_item {$/;"	s	file:
pa_envelope_item	envelope.h	/^typedef struct pa_envelope_item pa_envelope_item;$/;"	t	typeref:struct:pa_envelope_item
pa_envelope_new	envelope.c	/^pa_envelope *pa_envelope_new(const pa_sample_spec *ss) {$/;"	f
pa_envelope_remove	envelope.c	/^void pa_envelope_remove(pa_envelope *e, pa_envelope_item *i) {$/;"	f
pa_envelope_replace	envelope.c	/^pa_envelope_item *pa_envelope_replace(pa_envelope *e, pa_envelope_item *i, const pa_envelope_def *def) {$/;"	f
pa_envelope_rewind	envelope.c	/^void pa_envelope_rewind(pa_envelope *e, size_t n_bytes) {$/;"	f
pa_esound_options	protocol-esound.h	/^typedef struct pa_esound_options {$/;"	s
pa_esound_options	protocol-esound.h	/^} pa_esound_options;$/;"	t	typeref:struct:pa_esound_options
pa_esound_options_new	protocol-esound.c	/^pa_esound_options* pa_esound_options_new(void) {$/;"	f
pa_esound_options_parse	protocol-esound.c	/^int pa_esound_options_parse(pa_esound_options *o, pa_core *c, pa_modargs *ma) {$/;"	f
pa_esound_options_ref	protocol-esound.c	/^pa_esound_options* pa_esound_options_ref(pa_esound_options *o) {$/;"	f
pa_esound_options_unref	protocol-esound.c	/^void pa_esound_options_unref(pa_esound_options *o) {$/;"	f
pa_esound_protocol	protocol-esound.c	/^struct pa_esound_protocol {$/;"	s	file:
pa_esound_protocol	protocol-esound.h	/^typedef struct pa_esound_protocol pa_esound_protocol;$/;"	t	typeref:struct:pa_esound_protocol
pa_esound_protocol_connect	protocol-esound.c	/^void pa_esound_protocol_connect(pa_esound_protocol *p, pa_iochannel *io, pa_esound_options *o) {$/;"	f
pa_esound_protocol_disconnect	protocol-esound.c	/^void pa_esound_protocol_disconnect(pa_esound_protocol *p, pa_module *m) {$/;"	f
pa_esound_protocol_get	protocol-esound.c	/^pa_esound_protocol* pa_esound_protocol_get(pa_core *c) {$/;"	f
pa_esound_protocol_ref	protocol-esound.c	/^pa_esound_protocol* pa_esound_protocol_ref(pa_esound_protocol *p) {$/;"	f
pa_esound_protocol_unref	protocol-esound.c	/^void pa_esound_protocol_unref(pa_esound_protocol *p) {$/;"	f
pa_fdsem	fdsem.c	/^struct pa_fdsem {$/;"	s	file:
pa_fdsem	fdsem.h	/^typedef struct pa_fdsem pa_fdsem;$/;"	t	typeref:struct:pa_fdsem
pa_fdsem_after_poll	fdsem.c	/^int pa_fdsem_after_poll(pa_fdsem *f) {$/;"	f
pa_fdsem_before_poll	fdsem.c	/^int pa_fdsem_before_poll(pa_fdsem *f) {$/;"	f
pa_fdsem_data	fdsem.h	/^typedef struct pa_fdsem_data {$/;"	s
pa_fdsem_data	fdsem.h	/^} pa_fdsem_data;$/;"	t	typeref:struct:pa_fdsem_data
pa_fdsem_free	fdsem.c	/^void pa_fdsem_free(pa_fdsem *f) {$/;"	f
pa_fdsem_get	fdsem.c	/^int pa_fdsem_get(pa_fdsem *f) {$/;"	f
pa_fdsem_new	fdsem.c	/^pa_fdsem *pa_fdsem_new(void) {$/;"	f
pa_fdsem_new_shm	fdsem.c	/^pa_fdsem *pa_fdsem_new_shm(pa_fdsem_data *data, int* event_fd) {$/;"	f
pa_fdsem_open_shm	fdsem.c	/^pa_fdsem *pa_fdsem_open_shm(pa_fdsem_data *data, int event_fd) {$/;"	f
pa_fdsem_post	fdsem.c	/^void pa_fdsem_post(pa_fdsem *f) {$/;"	f
pa_fdsem_try	fdsem.c	/^int pa_fdsem_try(pa_fdsem *f) {$/;"	f
pa_fdsem_wait	fdsem.c	/^void pa_fdsem_wait(pa_fdsem *f) {$/;"	f
pa_find_config_file	core-util.c	/^char *pa_find_config_file(const char *global, const char *local, const char *env) {$/;"	f
pa_flist	flist.c	/^struct pa_flist {$/;"	s	file:
pa_flist	flist.h	/^typedef struct pa_flist pa_flist;$/;"	t	typeref:struct:pa_flist
pa_flist_free	flist.c	/^void pa_flist_free(pa_flist *l, pa_free_cb_t free_cb) {$/;"	f
pa_flist_new	flist.c	/^pa_flist *pa_flist_new(unsigned size) {$/;"	f
pa_flist_pop	flist.c	/^void* pa_flist_pop(pa_flist*l) {$/;"	f
pa_flist_push	flist.c	/^int pa_flist_push(pa_flist*l, void *p) {$/;"	f
pa_float_vector	vector.h	/^typedef union pa_float_vector {$/;"	u
pa_float_vector_t	vector.h	/^} pa_float_vector_t;$/;"	t	typeref:union:pa_float_vector
pa_frame_align	sample-util.c	/^size_t pa_frame_align(size_t l, const pa_sample_spec *ss) {$/;"	f
pa_frame_aligned	sample-util.c	/^pa_bool_t pa_frame_aligned(size_t l, const pa_sample_spec *ss) {$/;"	f
pa_free2_cb_t	idxset.h	/^typedef void (*pa_free2_cb_t)(void *p, void *userdata);$/;"	t
pa_full_status_string	cli-text.c	/^char *pa_full_status_string(pa_core *c) {$/;"	f
pa_gcd	core-util.c	/^unsigned pa_gcd(unsigned a, unsigned b) {$/;"	f
pa_get_binary_name_malloc	core-util.c	/^char *pa_get_binary_name_malloc(void) {$/;"	f
pa_get_convert_from_float32ne_function	sconv.c	/^pa_convert_func_t pa_get_convert_from_float32ne_function(pa_sample_format_t f) {$/;"	f
pa_get_convert_from_s16ne_function	sconv.c	/^pa_convert_func_t pa_get_convert_from_s16ne_function(pa_sample_format_t f) {$/;"	f
pa_get_convert_to_float32ne_function	sconv.c	/^pa_convert_func_t pa_get_convert_to_float32ne_function(pa_sample_format_t f) {$/;"	f
pa_get_convert_to_s16ne_function	sconv.c	/^pa_convert_func_t pa_get_convert_to_s16ne_function(pa_sample_format_t f) {$/;"	f
pa_get_gid_of_group	core-util.c	/^gid_t pa_get_gid_of_group(const char *name) {$/;"	f
pa_get_home_dir_malloc	core-util.c	/^char *pa_get_home_dir_malloc(void) {$/;"	f
pa_get_host_name_malloc	core-util.c	/^char *pa_get_host_name_malloc(void) {$/;"	f
pa_get_init_remap_func	remap.c	/^pa_init_remap_func_t pa_get_init_remap_func(void) {$/;"	f
pa_get_runtime_dir	core-util.c	/^char *pa_get_runtime_dir(void) {$/;"	f
pa_get_state_dir	core-util.c	/^char *pa_get_state_dir(void) {$/;"	f
pa_get_temp_dir	core-util.c	/^const char *pa_get_temp_dir(void) {$/;"	f
pa_get_user_name_malloc	core-util.c	/^char *pa_get_user_name_malloc(void) {$/;"	f
pa_get_volume_func	svolume_c.c	/^pa_do_volume_func_t pa_get_volume_func(pa_sample_format_t f) {$/;"	f
pa_getcwd	core-util.c	/^char *pa_getcwd(void) {$/;"	f
pa_getgrgid_free	usergroup.c	/^void pa_getgrgid_free(struct group *grp) {$/;"	f
pa_getgrgid_malloc	usergroup.c	/^struct group *pa_getgrgid_malloc(gid_t gid) {$/;"	f
pa_getgrnam_free	usergroup.c	/^void pa_getgrnam_free(struct group *group) {$/;"	f
pa_getgrnam_malloc	usergroup.c	/^struct group *pa_getgrnam_malloc(const char *name) {$/;"	f
pa_getpwnam_free	usergroup.c	/^void pa_getpwnam_free(struct passwd *passwd) {$/;"	f
pa_getpwnam_malloc	usergroup.c	/^struct passwd *pa_getpwnam_malloc(const char *name) {$/;"	f
pa_getpwuid_free	usergroup.c	/^void pa_getpwuid_free(struct passwd *passwd) {$/;"	f
pa_getpwuid_malloc	usergroup.c	/^struct passwd *pa_getpwuid_malloc(uid_t uid) {$/;"	f
pa_hash_func_t	idxset.h	/^typedef unsigned (*pa_hash_func_t)(const void *p);$/;"	t
pa_hashmap	hashmap.c	/^struct pa_hashmap {$/;"	s	file:
pa_hashmap	hashmap.h	/^typedef struct pa_hashmap pa_hashmap;$/;"	t	typeref:struct:pa_hashmap
pa_hashmap_first	hashmap.c	/^void* pa_hashmap_first(pa_hashmap *h) {$/;"	f
pa_hashmap_free	hashmap.c	/^void pa_hashmap_free(pa_hashmap*h, pa_free2_cb_t free_cb, void *userdata) {$/;"	f
pa_hashmap_get	hashmap.c	/^void* pa_hashmap_get(pa_hashmap *h, const void *key) {$/;"	f
pa_hashmap_isempty	hashmap.c	/^pa_bool_t pa_hashmap_isempty(pa_hashmap *h) {$/;"	f
pa_hashmap_iterate	hashmap.c	/^void *pa_hashmap_iterate(pa_hashmap *h, void **state, const void **key) {$/;"	f
pa_hashmap_iterate_backwards	hashmap.c	/^void *pa_hashmap_iterate_backwards(pa_hashmap *h, void **state, const void **key) {$/;"	f
pa_hashmap_last	hashmap.c	/^void* pa_hashmap_last(pa_hashmap *h) {$/;"	f
pa_hashmap_new	hashmap.c	/^pa_hashmap *pa_hashmap_new(pa_hash_func_t hash_func, pa_compare_func_t compare_func) {$/;"	f
pa_hashmap_put	hashmap.c	/^int pa_hashmap_put(pa_hashmap *h, const void *key, void *value) {$/;"	f
pa_hashmap_remove	hashmap.c	/^void* pa_hashmap_remove(pa_hashmap *h, const void *key) {$/;"	f
pa_hashmap_size	hashmap.c	/^unsigned pa_hashmap_size(pa_hashmap *h) {$/;"	f
pa_hashmap_steal_first	hashmap.c	/^void* pa_hashmap_steal_first(pa_hashmap *h) {$/;"	f
pa_hexstr	core-util.c	/^char *pa_hexstr(const uint8_t* d, size_t dlength, char *s, size_t slength) {$/;"	f
pa_hook	hook-list.h	/^struct pa_hook {$/;"	s
pa_hook	hook-list.h	/^typedef struct pa_hook pa_hook;$/;"	t	typeref:struct:pa_hook
pa_hook_cb_t	hook-list.h	/^typedef pa_hook_result_t (*pa_hook_cb_t)($/;"	t
pa_hook_connect	hook-list.c	/^pa_hook_slot* pa_hook_connect(pa_hook *hook, pa_hook_priority_t prio, pa_hook_cb_t cb, void *data) {$/;"	f
pa_hook_done	hook-list.c	/^void pa_hook_done(pa_hook *hook) {$/;"	f
pa_hook_fire	hook-list.c	/^pa_hook_result_t pa_hook_fire(pa_hook *hook, void *data) {$/;"	f
pa_hook_init	hook-list.c	/^void pa_hook_init(pa_hook *hook, void *data) {$/;"	f
pa_hook_is_firing	hook-list.c	/^pa_bool_t pa_hook_is_firing(pa_hook *hook) {$/;"	f
pa_hook_priority	hook-list.h	/^typedef enum pa_hook_priority {$/;"	g
pa_hook_priority_t	hook-list.h	/^} pa_hook_priority_t;$/;"	t	typeref:enum:pa_hook_priority
pa_hook_result	hook-list.h	/^typedef enum pa_hook_result {$/;"	g
pa_hook_result_t	hook-list.h	/^} pa_hook_result_t;$/;"	t	typeref:enum:pa_hook_result
pa_hook_slot	hook-list.h	/^struct pa_hook_slot {$/;"	s
pa_hook_slot	hook-list.h	/^typedef struct pa_hook_slot pa_hook_slot;$/;"	t	typeref:struct:pa_hook_slot
pa_hook_slot_free	hook-list.c	/^void pa_hook_slot_free(pa_hook_slot *slot) {$/;"	f
pa_http_protocol	protocol-http.c	/^struct pa_http_protocol {$/;"	s	file:
pa_http_protocol	protocol-http.h	/^typedef struct pa_http_protocol pa_http_protocol;$/;"	t	typeref:struct:pa_http_protocol
pa_http_protocol_add_server_string	protocol-http.c	/^void pa_http_protocol_add_server_string(pa_http_protocol *p, const char *name) {$/;"	f
pa_http_protocol_connect	protocol-http.c	/^void pa_http_protocol_connect(pa_http_protocol *p, pa_iochannel *io, pa_module *m) {$/;"	f
pa_http_protocol_disconnect	protocol-http.c	/^void pa_http_protocol_disconnect(pa_http_protocol *p, pa_module *m) {$/;"	f
pa_http_protocol_get	protocol-http.c	/^pa_http_protocol* pa_http_protocol_get(pa_core *c) {$/;"	f
pa_http_protocol_ref	protocol-http.c	/^pa_http_protocol* pa_http_protocol_ref(pa_http_protocol *p) {$/;"	f
pa_http_protocol_remove_server_string	protocol-http.c	/^void pa_http_protocol_remove_server_string(pa_http_protocol *p, const char *name) {$/;"	f
pa_http_protocol_servers	protocol-http.c	/^pa_strlist *pa_http_protocol_servers(pa_http_protocol *p) {$/;"	f
pa_http_protocol_unref	protocol-http.c	/^void pa_http_protocol_unref(pa_http_protocol *p) {$/;"	f
pa_idxset	idxset.c	/^struct pa_idxset {$/;"	s	file:
pa_idxset	idxset.h	/^typedef struct pa_idxset pa_idxset;$/;"	t	typeref:struct:pa_idxset
pa_idxset_copy	idxset.c	/^pa_idxset *pa_idxset_copy(pa_idxset *s) {$/;"	f
pa_idxset_first	idxset.c	/^void* pa_idxset_first(pa_idxset *s, uint32_t *idx) {$/;"	f
pa_idxset_free	idxset.c	/^void pa_idxset_free(pa_idxset *s, pa_free2_cb_t free_cb, void *userdata) {$/;"	f
pa_idxset_get_by_data	idxset.c	/^void* pa_idxset_get_by_data(pa_idxset*s, const void *p, uint32_t *idx) {$/;"	f
pa_idxset_get_by_index	idxset.c	/^void* pa_idxset_get_by_index(pa_idxset*s, uint32_t idx) {$/;"	f
pa_idxset_isempty	idxset.c	/^pa_bool_t pa_idxset_isempty(pa_idxset *s) {$/;"	f
pa_idxset_iterate	idxset.c	/^void *pa_idxset_iterate(pa_idxset *s, void **state, uint32_t *idx) {$/;"	f
pa_idxset_new	idxset.c	/^pa_idxset* pa_idxset_new(pa_hash_func_t hash_func, pa_compare_func_t compare_func) {$/;"	f
pa_idxset_next	idxset.c	/^void *pa_idxset_next(pa_idxset *s, uint32_t *idx) {$/;"	f
pa_idxset_put	idxset.c	/^int pa_idxset_put(pa_idxset*s, void *p, uint32_t *idx) {$/;"	f
pa_idxset_remove_by_data	idxset.c	/^void* pa_idxset_remove_by_data(pa_idxset*s, const void *data, uint32_t *idx) {$/;"	f
pa_idxset_remove_by_index	idxset.c	/^void* pa_idxset_remove_by_index(pa_idxset*s, uint32_t idx) {$/;"	f
pa_idxset_rrobin	idxset.c	/^void* pa_idxset_rrobin(pa_idxset *s, uint32_t *idx) {$/;"	f
pa_idxset_size	idxset.c	/^unsigned pa_idxset_size(pa_idxset*s) {$/;"	f
pa_idxset_steal_first	idxset.c	/^void* pa_idxset_steal_first(pa_idxset *s, uint32_t *idx) {$/;"	f
pa_idxset_string_compare_func	idxset.c	/^int pa_idxset_string_compare_func(const void *a, const void *b) {$/;"	f
pa_idxset_string_hash_func	idxset.c	/^unsigned pa_idxset_string_hash_func(const void *p) {$/;"	f
pa_idxset_trivial_compare_func	idxset.c	/^int pa_idxset_trivial_compare_func(const void *a, const void *b) {$/;"	f
pa_idxset_trivial_hash_func	idxset.c	/^unsigned pa_idxset_trivial_hash_func(const void *p) {$/;"	f
pa_in_system_mode	core-util.c	/^pa_bool_t pa_in_system_mode(void) {$/;"	f
pa_in_valgrind	core-util.c	/^pa_bool_t pa_in_valgrind(void) {$/;"	f
pa_in_valgrind	core-util.h	/^static inline pa_bool_t pa_in_valgrind(void) {$/;"	f
pa_init_proplist	proplist-util.c	/^void pa_init_proplist(pa_proplist *p) {$/;"	f
pa_init_remap	remap.c	/^void pa_init_remap (pa_remap_t *m) {$/;"	f
pa_init_remap_func_t	remap.h	/^typedef void (*pa_init_remap_func_t) (pa_remap_t *m);$/;"	t
pa_int16_vector	vector.h	/^typedef union pa_int16_vector {$/;"	u
pa_int16_vector_t	vector.h	/^} pa_int16_vector_t;$/;"	t	typeref:union:pa_int16_vector
pa_int32_vector	vector.h	/^typedef union pa_int32_vector {$/;"	u
pa_int32_vector_t	vector.h	/^} pa_int32_vector_t;$/;"	t	typeref:union:pa_int32_vector
pa_interleave	sample-util.c	/^void pa_interleave(const void *src[], unsigned channels, void *dst, size_t ss, unsigned n) {$/;"	f
pa_iochannel	iochannel.c	/^struct pa_iochannel {$/;"	s	file:
pa_iochannel	iochannel.h	/^typedef struct pa_iochannel pa_iochannel;$/;"	t	typeref:struct:pa_iochannel
pa_iochannel_cb_t	iochannel.h	/^typedef void (*pa_iochannel_cb_t)(pa_iochannel*io, void *userdata);$/;"	t
pa_iochannel_creds_enable	iochannel.c	/^int pa_iochannel_creds_enable(pa_iochannel *io) {$/;"	f
pa_iochannel_creds_supported	iochannel.c	/^pa_bool_t pa_iochannel_creds_supported(pa_iochannel *io) {$/;"	f
pa_iochannel_free	iochannel.c	/^void pa_iochannel_free(pa_iochannel*io) {$/;"	f
pa_iochannel_get_mainloop_api	iochannel.c	/^pa_mainloop_api* pa_iochannel_get_mainloop_api(pa_iochannel *io) {$/;"	f
pa_iochannel_get_recv_fd	iochannel.c	/^int pa_iochannel_get_recv_fd(pa_iochannel *io) {$/;"	f
pa_iochannel_get_send_fd	iochannel.c	/^int pa_iochannel_get_send_fd(pa_iochannel *io) {$/;"	f
pa_iochannel_is_hungup	iochannel.c	/^pa_bool_t pa_iochannel_is_hungup(pa_iochannel*io) {$/;"	f
pa_iochannel_is_readable	iochannel.c	/^pa_bool_t pa_iochannel_is_readable(pa_iochannel*io) {$/;"	f
pa_iochannel_is_writable	iochannel.c	/^pa_bool_t pa_iochannel_is_writable(pa_iochannel*io) {$/;"	f
pa_iochannel_new	iochannel.c	/^pa_iochannel* pa_iochannel_new(pa_mainloop_api*m, int ifd, int ofd) {$/;"	f
pa_iochannel_read	iochannel.c	/^ssize_t pa_iochannel_read(pa_iochannel*io, void*data, size_t l) {$/;"	f
pa_iochannel_read_with_creds	iochannel.c	/^ssize_t pa_iochannel_read_with_creds(pa_iochannel*io, void*data, size_t l, pa_creds *creds, pa_bool_t *creds_valid) {$/;"	f
pa_iochannel_set_callback	iochannel.c	/^void pa_iochannel_set_callback(pa_iochannel*io, pa_iochannel_cb_t _callback, void *userdata) {$/;"	f
pa_iochannel_set_noclose	iochannel.c	/^void pa_iochannel_set_noclose(pa_iochannel*io, pa_bool_t b) {$/;"	f
pa_iochannel_socket_is_local	iochannel.c	/^pa_bool_t pa_iochannel_socket_is_local(pa_iochannel *io) {$/;"	f
pa_iochannel_socket_peer_to_string	iochannel.c	/^void pa_iochannel_socket_peer_to_string(pa_iochannel*io, char*s, size_t l) {$/;"	f
pa_iochannel_socket_set_rcvbuf	iochannel.c	/^int pa_iochannel_socket_set_rcvbuf(pa_iochannel *io, size_t l) {$/;"	f
pa_iochannel_socket_set_sndbuf	iochannel.c	/^int pa_iochannel_socket_set_sndbuf(pa_iochannel *io, size_t l) {$/;"	f
pa_iochannel_write	iochannel.c	/^ssize_t pa_iochannel_write(pa_iochannel*io, const void*data, size_t l) {$/;"	f
pa_iochannel_write_with_creds	iochannel.c	/^ssize_t pa_iochannel_write_with_creds(pa_iochannel*io, const void*data, size_t l, const pa_creds *ucred) {$/;"	f
pa_ioline	ioline.c	/^struct pa_ioline {$/;"	s	file:
pa_ioline	ioline.h	/^typedef struct pa_ioline pa_ioline;$/;"	t	typeref:struct:pa_ioline
pa_ioline_cb_t	ioline.h	/^typedef void (*pa_ioline_cb_t)(pa_ioline*io, const char *s, void *userdata);$/;"	t
pa_ioline_close	ioline.c	/^void pa_ioline_close(pa_ioline *l) {$/;"	f
pa_ioline_defer_close	ioline.c	/^void pa_ioline_defer_close(pa_ioline *l) {$/;"	f
pa_ioline_detach_iochannel	ioline.c	/^pa_iochannel* pa_ioline_detach_iochannel(pa_ioline *l) {$/;"	f
pa_ioline_drain_cb_t	ioline.h	/^typedef void (*pa_ioline_drain_cb_t)(pa_ioline *io, void *userdata);$/;"	t
pa_ioline_is_drained	ioline.c	/^pa_bool_t pa_ioline_is_drained(pa_ioline *l) {$/;"	f
pa_ioline_new	ioline.c	/^pa_ioline* pa_ioline_new(pa_iochannel *io) {$/;"	f
pa_ioline_printf	ioline.c	/^void pa_ioline_printf(pa_ioline *l, const char *format, ...) {$/;"	f
pa_ioline_puts	ioline.c	/^void pa_ioline_puts(pa_ioline *l, const char *c) {$/;"	f
pa_ioline_ref	ioline.c	/^pa_ioline* pa_ioline_ref(pa_ioline *l) {$/;"	f
pa_ioline_set_callback	ioline.c	/^void pa_ioline_set_callback(pa_ioline*l, pa_ioline_cb_t callback, void *userdata) {$/;"	f
pa_ioline_set_drain_callback	ioline.c	/^void pa_ioline_set_drain_callback(pa_ioline*l, pa_ioline_drain_cb_t callback, void *userdata) {$/;"	f
pa_ioline_unref	ioline.c	/^void pa_ioline_unref(pa_ioline *l) {$/;"	f
pa_ip_acl	ipacl.c	/^struct pa_ip_acl {$/;"	s	file:
pa_ip_acl	ipacl.h	/^typedef struct pa_ip_acl pa_ip_acl;$/;"	t	typeref:struct:pa_ip_acl
pa_ip_acl_check	ipacl.c	/^int pa_ip_acl_check(pa_ip_acl *acl, int fd) {$/;"	f
pa_ip_acl_free	ipacl.c	/^void pa_ip_acl_free(pa_ip_acl *acl) {$/;"	f
pa_ip_acl_new	ipacl.c	/^pa_ip_acl* pa_ip_acl_new(const char *s) {$/;"	f
pa_is_ip_address	parseaddr.c	/^pa_bool_t pa_is_ip_address(const char *a) {$/;"	f
pa_is_path_absolute	core-util.c	/^pa_bool_t pa_is_path_absolute(const char *fn) {$/;"	f
pa_is_power_of_two	core-util.h	/^static inline int pa_is_power_of_two(unsigned n) {$/;"	f
pa_load_sym	ltdl-helper.c	/^pa_void_func_t pa_load_sym(lt_dlhandle handle, const char *module, const char *symbol) {$/;"	f
pa_lock_fd	core-util.c	/^int pa_lock_fd(int fd, int b) {$/;"	f
pa_lock_lockfile	core-util.c	/^int pa_lock_lockfile(const char *fn) {$/;"	f
pa_log	log.h	136;"	d
pa_log_debug	log.h	111;"	d
pa_log_error	log.h	115;"	d
pa_log_flags	log.h	/^typedef enum pa_log_flags {$/;"	g
pa_log_flags_t	log.h	/^} pa_log_flags_t;$/;"	t	typeref:enum:pa_log_flags
pa_log_info	log.h	112;"	d
pa_log_level	log.c	/^void pa_log_level(pa_log_level_t level, const char *format, ...) {$/;"	f
pa_log_level	log.h	/^typedef enum pa_log_level {$/;"	g
pa_log_level_meta	log.c	/^void pa_log_level_meta($/;"	f
pa_log_level_t	log.h	/^} pa_log_level_t;$/;"	t	typeref:enum:pa_log_level
pa_log_levelv	log.c	/^void pa_log_levelv(pa_log_level_t level, const char *format, va_list ap) {$/;"	f
pa_log_levelv_meta	log.c	/^void pa_log_levelv_meta($/;"	f
pa_log_merge	log.h	/^typedef enum pa_log_merge {$/;"	g
pa_log_merge_t	log.h	/^} pa_log_merge_t;$/;"	t	typeref:enum:pa_log_merge
pa_log_notice	log.h	113;"	d
pa_log_ratelimit	log.c	/^pa_bool_t pa_log_ratelimit(void) {$/;"	f
pa_log_set_flags	log.c	/^void pa_log_set_flags(pa_log_flags_t _flags, pa_log_merge_t merge) {$/;"	f
pa_log_set_ident	log.c	/^void pa_log_set_ident(const char *p) {$/;"	f
pa_log_set_level	log.c	/^void pa_log_set_level(pa_log_level_t l) {$/;"	f
pa_log_set_show_backtrace	log.c	/^void pa_log_set_show_backtrace(unsigned nlevels) {$/;"	f
pa_log_set_skip_backtrace	log.c	/^void pa_log_set_skip_backtrace(unsigned nlevels) {$/;"	f
pa_log_set_target	log.c	/^void pa_log_set_target(pa_log_target_t t) {$/;"	f
pa_log_target	log.h	/^typedef enum pa_log_target {$/;"	g
pa_log_target_t	log.h	/^} pa_log_target_t;$/;"	t	typeref:enum:pa_log_target
pa_log_warn	log.h	114;"	d
pa_logl	log.h	116;"	d
pa_loop_read	core-util.c	/^ssize_t pa_loop_read(int fd, void*data, size_t size, int *type) {$/;"	f
pa_loop_write	core-util.c	/^ssize_t pa_loop_write(int fd, const void*data, size_t size, int *type) {$/;"	f
pa_machine_id	core-util.c	/^char *pa_machine_id(void) {$/;"	f
pa_make_fd_cloexec	core-util.c	/^void pa_make_fd_cloexec(int fd) {$/;"	f
pa_make_fd_nonblock	core-util.c	/^void pa_make_fd_nonblock(int fd) {$/;"	f
pa_make_path_absolute	core-util.c	/^char *pa_make_path_absolute(const char *p) {$/;"	f
pa_make_power_of_two	core-util.h	/^static inline unsigned pa_make_power_of_two(unsigned n) {$/;"	f
pa_make_realtime	core-util.c	/^int pa_make_realtime(int rtprio) {$/;"	f
pa_make_secure_dir	core-util.c	/^int pa_make_secure_dir(const char* dir, mode_t m, uid_t uid, gid_t gid) {$/;"	f
pa_make_secure_parent_dir	core-util.c	/^int pa_make_secure_parent_dir(const char *fn, mode_t m, uid_t uid, gid_t gid) {$/;"	f
pa_make_socket_low_delay	socket-util.c	/^void pa_make_socket_low_delay(int fd) {$/;"	f
pa_make_tcp_socket_low_delay	socket-util.c	/^void pa_make_tcp_socket_low_delay(int fd) {$/;"	f
pa_make_udp_socket_low_delay	socket-util.c	/^void pa_make_udp_socket_low_delay(int fd) {$/;"	f
pa_match	core-util.c	/^int pa_match(const char *expr, const char *v) {$/;"	f
pa_maybe_prefix_path	core-util.c	/^char* pa_maybe_prefix_path(const char *path, const char *prefix) {$/;"	f
pa_mcalign	mcalign.c	/^struct pa_mcalign {$/;"	s	file:
pa_mcalign	mcalign.h	/^typedef struct pa_mcalign pa_mcalign;$/;"	t	typeref:struct:pa_mcalign
pa_mcalign_csize	mcalign.c	/^size_t pa_mcalign_csize(pa_mcalign *m, size_t l) {$/;"	f
pa_mcalign_flush	mcalign.c	/^void pa_mcalign_flush(pa_mcalign *m) {$/;"	f
pa_mcalign_free	mcalign.c	/^void pa_mcalign_free(pa_mcalign *m) {$/;"	f
pa_mcalign_new	mcalign.c	/^pa_mcalign *pa_mcalign_new(size_t base) {$/;"	f
pa_mcalign_pop	mcalign.c	/^int pa_mcalign_pop(pa_mcalign *m, pa_memchunk *c) {$/;"	f
pa_mcalign_push	mcalign.c	/^void pa_mcalign_push(pa_mcalign *m, const pa_memchunk *c) {$/;"	f
pa_memblock	memblock.c	/^struct pa_memblock {$/;"	s	file:
pa_memblock	memblock.h	/^typedef struct pa_memblock pa_memblock;$/;"	t	typeref:struct:pa_memblock
pa_memblock_acquire	memblock.c	/^void* pa_memblock_acquire(pa_memblock *b) {$/;"	f
pa_memblock_get_length	memblock.c	/^size_t pa_memblock_get_length(pa_memblock *b) {$/;"	f
pa_memblock_get_pool	memblock.c	/^pa_mempool* pa_memblock_get_pool(pa_memblock *b) {$/;"	f
pa_memblock_is_read_only	memblock.c	/^pa_bool_t pa_memblock_is_read_only(pa_memblock *b) {$/;"	f
pa_memblock_is_silence	memblock.c	/^pa_bool_t pa_memblock_is_silence(pa_memblock *b) {$/;"	f
pa_memblock_new	memblock.c	/^pa_memblock *pa_memblock_new(pa_mempool *p, size_t length) {$/;"	f
pa_memblock_new_fixed	memblock.c	/^pa_memblock *pa_memblock_new_fixed(pa_mempool *p, void *d, size_t length, pa_bool_t read_only) {$/;"	f
pa_memblock_new_malloced	memblock.h	91;"	d
pa_memblock_new_pool	memblock.c	/^pa_memblock *pa_memblock_new_pool(pa_mempool *p, size_t length) {$/;"	f
pa_memblock_new_user	memblock.c	/^pa_memblock *pa_memblock_new_user(pa_mempool *p, void *d, size_t length, pa_free_cb_t free_cb, pa_bool_t read_only) {$/;"	f
pa_memblock_ref	memblock.c	/^pa_memblock* pa_memblock_ref(pa_memblock*b) {$/;"	f
pa_memblock_ref_is_one	memblock.c	/^pa_bool_t pa_memblock_ref_is_one(pa_memblock *b) {$/;"	f
pa_memblock_release	memblock.c	/^void pa_memblock_release(pa_memblock *b) {$/;"	f
pa_memblock_set_is_silence	memblock.c	/^void pa_memblock_set_is_silence(pa_memblock *b, pa_bool_t v) {$/;"	f
pa_memblock_type	memblock.h	/^typedef enum pa_memblock_type {$/;"	g
pa_memblock_type_t	memblock.h	/^} pa_memblock_type_t;$/;"	t	typeref:enum:pa_memblock_type
pa_memblock_unref	memblock.c	/^void pa_memblock_unref(pa_memblock*b) {$/;"	f
pa_memblock_unref_fixed	memblock.c	/^void pa_memblock_unref_fixed(pa_memblock *b) {$/;"	f
pa_memblock_will_need	memblock.c	/^pa_memblock *pa_memblock_will_need(pa_memblock *b) {$/;"	f
pa_memblockq	memblockq.c	/^struct pa_memblockq {$/;"	s	file:
pa_memblockq	memblockq.h	/^typedef struct pa_memblockq pa_memblockq;$/;"	t	typeref:struct:pa_memblockq
pa_memblockq_apply_attr	memblockq.c	/^void pa_memblockq_apply_attr(pa_memblockq *bq, const pa_buffer_attr *a) {$/;"	f
pa_memblockq_drop	memblockq.c	/^void pa_memblockq_drop(pa_memblockq *bq, size_t length) {$/;"	f
pa_memblockq_flush_read	memblockq.c	/^void pa_memblockq_flush_read(pa_memblockq *bq) {$/;"	f
pa_memblockq_flush_write	memblockq.c	/^void pa_memblockq_flush_write(pa_memblockq *bq) {$/;"	f
pa_memblockq_free	memblockq.c	/^void pa_memblockq_free(pa_memblockq* bq) {$/;"	f
pa_memblockq_get_attr	memblockq.c	/^void pa_memblockq_get_attr(pa_memblockq *bq, pa_buffer_attr *a) {$/;"	f
pa_memblockq_get_base	memblockq.c	/^size_t pa_memblockq_get_base(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_length	memblockq.c	/^size_t pa_memblockq_get_length(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_maxlength	memblockq.c	/^size_t pa_memblockq_get_maxlength(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_maxrewind	memblockq.c	/^size_t pa_memblockq_get_maxrewind(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_minreq	memblockq.c	/^size_t pa_memblockq_get_minreq(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_nblocks	memblockq.c	/^unsigned pa_memblockq_get_nblocks(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_prebuf	memblockq.c	/^size_t pa_memblockq_get_prebuf(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_read_index	memblockq.c	/^int64_t pa_memblockq_get_read_index(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_tlength	memblockq.c	/^size_t pa_memblockq_get_tlength(pa_memblockq *bq) {$/;"	f
pa_memblockq_get_write_index	memblockq.c	/^int64_t pa_memblockq_get_write_index(pa_memblockq *bq) {$/;"	f
pa_memblockq_is_empty	memblockq.c	/^pa_bool_t pa_memblockq_is_empty(pa_memblockq *bq) {$/;"	f
pa_memblockq_is_readable	memblockq.c	/^pa_bool_t pa_memblockq_is_readable(pa_memblockq *bq) {$/;"	f
pa_memblockq_missing	memblockq.c	/^size_t pa_memblockq_missing(pa_memblockq *bq) {$/;"	f
pa_memblockq_new	memblockq.c	/^pa_memblockq* pa_memblockq_new($/;"	f
pa_memblockq_peek	memblockq.c	/^int pa_memblockq_peek(pa_memblockq* bq, pa_memchunk *chunk) {$/;"	f
pa_memblockq_pop_missing	memblockq.c	/^size_t pa_memblockq_pop_missing(pa_memblockq *bq) {$/;"	f
pa_memblockq_prebuf_active	memblockq.c	/^pa_bool_t pa_memblockq_prebuf_active(pa_memblockq *bq) {$/;"	f
pa_memblockq_prebuf_disable	memblockq.c	/^void pa_memblockq_prebuf_disable(pa_memblockq *bq) {$/;"	f
pa_memblockq_prebuf_force	memblockq.c	/^void pa_memblockq_prebuf_force(pa_memblockq *bq) {$/;"	f
pa_memblockq_push	memblockq.c	/^int pa_memblockq_push(pa_memblockq* bq, const pa_memchunk *uchunk) {$/;"	f
pa_memblockq_push_align	memblockq.c	/^int pa_memblockq_push_align(pa_memblockq* bq, const pa_memchunk *chunk) {$/;"	f
pa_memblockq_rewind	memblockq.c	/^void pa_memblockq_rewind(pa_memblockq *bq, size_t length) {$/;"	f
pa_memblockq_seek	memblockq.c	/^void pa_memblockq_seek(pa_memblockq *bq, int64_t offset, pa_seek_mode_t seek, pa_bool_t account) {$/;"	f
pa_memblockq_set_maxlength	memblockq.c	/^void pa_memblockq_set_maxlength(pa_memblockq *bq, size_t maxlength) {$/;"	f
pa_memblockq_set_maxrewind	memblockq.c	/^void pa_memblockq_set_maxrewind(pa_memblockq *bq, size_t maxrewind) {$/;"	f
pa_memblockq_set_minreq	memblockq.c	/^void pa_memblockq_set_minreq(pa_memblockq *bq, size_t minreq) {$/;"	f
pa_memblockq_set_prebuf	memblockq.c	/^void pa_memblockq_set_prebuf(pa_memblockq *bq, size_t prebuf) {$/;"	f
pa_memblockq_set_silence	memblockq.c	/^void pa_memblockq_set_silence(pa_memblockq *bq, pa_memchunk *silence) {$/;"	f
pa_memblockq_set_tlength	memblockq.c	/^void pa_memblockq_set_tlength(pa_memblockq *bq, size_t tlength) {$/;"	f
pa_memblockq_silence	memblockq.c	/^void pa_memblockq_silence(pa_memblockq *bq) {$/;"	f
pa_memblockq_sink_input_new	play-memblockq.c	/^pa_sink_input* pa_memblockq_sink_input_new($/;"	f
pa_memblockq_sink_input_set_queue	play-memblockq.c	/^void pa_memblockq_sink_input_set_queue(pa_sink_input *i, pa_memblockq *q) {$/;"	f
pa_memblockq_splice	memblockq.c	/^int pa_memblockq_splice(pa_memblockq *bq, pa_memblockq *source) {$/;"	f
pa_memblockq_willneed	memblockq.c	/^void pa_memblockq_willneed(pa_memblockq *bq) {$/;"	f
pa_memchunk	memchunk.h	/^typedef struct pa_memchunk {$/;"	s
pa_memchunk	memchunk.h	/^} pa_memchunk;$/;"	t	typeref:struct:pa_memchunk
pa_memchunk_dump_to_file	sample-util.c	/^void pa_memchunk_dump_to_file(pa_memchunk *c, const char *fn) {$/;"	f
pa_memchunk_make_writable	memchunk.c	/^pa_memchunk* pa_memchunk_make_writable(pa_memchunk *c, size_t min) {$/;"	f
pa_memchunk_memcpy	memchunk.c	/^pa_memchunk* pa_memchunk_memcpy(pa_memchunk *dst, pa_memchunk *src) {$/;"	f
pa_memchunk_reset	memchunk.c	/^pa_memchunk* pa_memchunk_reset(pa_memchunk *c) {$/;"	f
pa_memchunk_sine	sample-util.c	/^void pa_memchunk_sine(pa_memchunk *c, pa_mempool *pool, unsigned rate, unsigned freq) {$/;"	f
pa_memchunk_will_need	memchunk.c	/^pa_memchunk *pa_memchunk_will_need(const pa_memchunk *c) {$/;"	f
pa_memexport	memblock.c	/^struct pa_memexport {$/;"	s	file:
pa_memexport	memblock.h	/^typedef struct pa_memexport pa_memexport;$/;"	t	typeref:struct:pa_memexport
pa_memexport_free	memblock.c	/^void pa_memexport_free(pa_memexport *e) {$/;"	f
pa_memexport_new	memblock.c	/^pa_memexport* pa_memexport_new(pa_mempool *p, pa_memexport_revoke_cb_t cb, void *userdata) {$/;"	f
pa_memexport_process_release	memblock.c	/^int pa_memexport_process_release(pa_memexport *e, uint32_t id) {$/;"	f
pa_memexport_put	memblock.c	/^int pa_memexport_put(pa_memexport *e, pa_memblock *b, uint32_t *block_id, uint32_t *shm_id, size_t *offset, size_t * size) {$/;"	f
pa_memexport_revoke_cb_t	memblock.h	/^typedef void (*pa_memexport_revoke_cb_t)(pa_memexport *e, uint32_t block_id, void *userdata);$/;"	t
pa_memimport	memblock.c	/^struct pa_memimport {$/;"	s	file:
pa_memimport	memblock.h	/^typedef struct pa_memimport pa_memimport;$/;"	t	typeref:struct:pa_memimport
pa_memimport_free	memblock.c	/^void pa_memimport_free(pa_memimport *i) {$/;"	f
pa_memimport_get	memblock.c	/^pa_memblock* pa_memimport_get(pa_memimport *i, uint32_t block_id, uint32_t shm_id, size_t offset, size_t size) {$/;"	f
pa_memimport_new	memblock.c	/^pa_memimport* pa_memimport_new(pa_mempool *p, pa_memimport_release_cb_t cb, void *userdata) {$/;"	f
pa_memimport_process_revoke	memblock.c	/^int pa_memimport_process_revoke(pa_memimport *i, uint32_t id) {$/;"	f
pa_memimport_release_cb_t	memblock.h	/^typedef void (*pa_memimport_release_cb_t)(pa_memimport *i, uint32_t block_id, void *userdata);$/;"	t
pa_memimport_segment	memblock.c	/^struct pa_memimport_segment {$/;"	s	file:
pa_memimport_segment	memblock.h	/^typedef struct pa_memimport_segment pa_memimport_segment;$/;"	t	typeref:struct:pa_memimport_segment
pa_memory_barrier	atomic.h	/^static inline void pa_memory_barrier(void) {$/;"	f
pa_mempool	memblock.c	/^struct pa_mempool {$/;"	s	file:
pa_mempool	memblock.h	/^typedef struct pa_mempool pa_mempool;$/;"	t	typeref:struct:pa_mempool
pa_mempool_block_size_max	memblock.c	/^size_t pa_mempool_block_size_max(pa_mempool *p) {$/;"	f
pa_mempool_free	memblock.c	/^void pa_mempool_free(pa_mempool *p) {$/;"	f
pa_mempool_get_shm_id	memblock.c	/^int pa_mempool_get_shm_id(pa_mempool *p, uint32_t *id) {$/;"	f
pa_mempool_get_stat	memblock.c	/^const pa_mempool_stat* pa_mempool_get_stat(pa_mempool *p) {$/;"	f
pa_mempool_is_shared	memblock.c	/^pa_bool_t pa_mempool_is_shared(pa_mempool *p) {$/;"	f
pa_mempool_new	memblock.c	/^pa_mempool* pa_mempool_new(pa_bool_t shared, size_t size) {$/;"	f
pa_mempool_stat	memblock.h	/^struct pa_mempool_stat {$/;"	s
pa_mempool_stat	memblock.h	/^typedef struct pa_mempool_stat pa_mempool_stat;$/;"	t	typeref:struct:pa_mempool_stat
pa_mempool_vacuum	memblock.c	/^void pa_mempool_vacuum(pa_mempool *p) {$/;"	f
pa_memtrap	memtrap.c	/^struct pa_memtrap {$/;"	s	file:
pa_memtrap	memtrap.h	/^typedef struct pa_memtrap pa_memtrap;$/;"	t	typeref:struct:pa_memtrap
pa_memtrap_add	memtrap.c	/^pa_memtrap* pa_memtrap_add(const void *start, size_t size) {$/;"	f
pa_memtrap_install	memtrap.c	/^void pa_memtrap_install(void) {$/;"	f
pa_memtrap_is_good	memtrap.c	/^pa_bool_t pa_memtrap_is_good(pa_memtrap *m) {$/;"	f
pa_memtrap_remove	memtrap.c	/^void pa_memtrap_remove(pa_memtrap *m) {$/;"	f
pa_memtrap_update	memtrap.c	/^pa_memtrap *pa_memtrap_update(pa_memtrap *m, const void *start, size_t size) {$/;"	f
pa_memzero	macro.h	304;"	d
pa_mix	sample-util.c	/^size_t pa_mix($/;"	f
pa_mix_info	sample-util.h	/^typedef struct pa_mix_info {$/;"	s
pa_mix_info	sample-util.h	/^} pa_mix_info;$/;"	t	typeref:struct:pa_mix_info
pa_modargs	modargs.h	/^typedef struct pa_modargs pa_modargs;$/;"	t	typeref:struct:pa_modargs
pa_modargs_free	modargs.c	/^void pa_modargs_free(pa_modargs*ma) {$/;"	f
pa_modargs_get_channel_map	modargs.c	/^int pa_modargs_get_channel_map(pa_modargs *ma, const char *name, pa_channel_map *rmap) {$/;"	f
pa_modargs_get_proplist	modargs.c	/^int pa_modargs_get_proplist(pa_modargs *ma, const char *name, pa_proplist *p, pa_update_mode_t m) {$/;"	f
pa_modargs_get_sample_spec	modargs.c	/^int pa_modargs_get_sample_spec(pa_modargs *ma, pa_sample_spec *rss) {$/;"	f
pa_modargs_get_sample_spec_and_channel_map	modargs.c	/^int pa_modargs_get_sample_spec_and_channel_map($/;"	f
pa_modargs_get_value	modargs.c	/^const char *pa_modargs_get_value(pa_modargs *ma, const char *key, const char *def) {$/;"	f
pa_modargs_get_value_boolean	modargs.c	/^int pa_modargs_get_value_boolean(pa_modargs *ma, const char *key, pa_bool_t *value) {$/;"	f
pa_modargs_get_value_s32	modargs.c	/^int pa_modargs_get_value_s32(pa_modargs *ma, const char *key, int32_t *value) {$/;"	f
pa_modargs_get_value_u32	modargs.c	/^int pa_modargs_get_value_u32(pa_modargs *ma, const char *key, uint32_t *value) {$/;"	f
pa_modargs_new	modargs.c	/^pa_modargs *pa_modargs_new(const char *args, const char* const* valid_keys) {$/;"	f
pa_modinfo	modinfo.h	/^typedef struct pa_modinfo {$/;"	s
pa_modinfo	modinfo.h	/^} pa_modinfo;$/;"	t	typeref:struct:pa_modinfo
pa_modinfo_free	modinfo.c	/^void pa_modinfo_free(pa_modinfo *i) {$/;"	f
pa_modinfo_get_by_handle	modinfo.c	/^pa_modinfo *pa_modinfo_get_by_handle(lt_dlhandle dl, const char *module_name) {$/;"	f
pa_modinfo_get_by_name	modinfo.c	/^pa_modinfo *pa_modinfo_get_by_name(const char *name) {$/;"	f
pa_module	module.h	/^struct pa_module {$/;"	s
pa_module	module.h	/^typedef struct pa_module pa_module;$/;"	t	typeref:struct:pa_module
pa_module_free	module.c	/^static void pa_module_free(pa_module *m) {$/;"	f	file:
pa_module_get_n_used	module.c	/^int pa_module_get_n_used(pa_module*m) {$/;"	f
pa_module_list_to_string	cli-text.c	/^char *pa_module_list_to_string(pa_core *c) {$/;"	f
pa_module_load	module.c	/^pa_module* pa_module_load(pa_core *c, const char *name, const char *argument) {$/;"	f
pa_module_unload	module.c	/^void pa_module_unload(pa_core *c, pa_module *m, pa_bool_t force) {$/;"	f
pa_module_unload_all	module.c	/^void pa_module_unload_all(pa_core *c) {$/;"	f
pa_module_unload_by_index	module.c	/^void pa_module_unload_by_index(pa_core *c, uint32_t idx, pa_bool_t force) {$/;"	f
pa_module_unload_request	module.c	/^void pa_module_unload_request(pa_module *m, pa_bool_t force) {$/;"	f
pa_module_unload_request_by_index	module.c	/^void pa_module_unload_request_by_index(pa_core *c, uint32_t idx, pa_bool_t force) {$/;"	f
pa_msgobject	msgobject.h	/^PA_DECLARE_PUBLIC_CLASS(pa_msgobject);$/;"	v
pa_msgobject	msgobject.h	/^struct pa_msgobject {$/;"	s
pa_msgobject	msgobject.h	/^typedef struct pa_msgobject pa_msgobject;$/;"	t	typeref:struct:pa_msgobject
pa_msgobject_free	msgobject.h	44;"	d
pa_msgobject_new	msgobject.h	43;"	d
pa_msgobject_new_internal	msgobject.c	/^pa_msgobject *pa_msgobject_new_internal(size_t size, const char *type_id, pa_bool_t (*check_type)(const char *type_name)) {$/;"	f
pa_mutex	mutex-posix.c	/^struct pa_mutex {$/;"	s	file:
pa_mutex	mutex-win32.c	/^struct pa_mutex {$/;"	s	file:
pa_mutex	mutex.h	/^typedef struct pa_mutex pa_mutex;$/;"	t	typeref:struct:pa_mutex
pa_mutex_free	mutex-posix.c	/^void pa_mutex_free(pa_mutex *m) {$/;"	f
pa_mutex_free	mutex-win32.c	/^void pa_mutex_free(pa_mutex *m) {$/;"	f
pa_mutex_lock	mutex-posix.c	/^void pa_mutex_lock(pa_mutex *m) {$/;"	f
pa_mutex_lock	mutex-win32.c	/^void pa_mutex_lock(pa_mutex *m) {$/;"	f
pa_mutex_new	mutex-posix.c	/^pa_mutex* pa_mutex_new(pa_bool_t recursive, pa_bool_t inherit_priority) {$/;"	f
pa_mutex_new	mutex-win32.c	/^pa_mutex* pa_mutex_new(pa_bool_t recursive, pa_bool_t inherit_priority) {$/;"	f
pa_mutex_try_lock	mutex-posix.c	/^pa_bool_t pa_mutex_try_lock(pa_mutex *m) {$/;"	f
pa_mutex_unlock	mutex-posix.c	/^void pa_mutex_unlock(pa_mutex *m) {$/;"	f
pa_mutex_unlock	mutex-win32.c	/^void pa_mutex_unlock(pa_mutex *m) {$/;"	f
pa_namereg_get	namereg.c	/^void* pa_namereg_get(pa_core *c, const char *name, pa_namereg_type_t type) {$/;"	f
pa_namereg_get_default_sink	namereg.c	/^pa_sink *pa_namereg_get_default_sink(pa_core *c) {$/;"	f
pa_namereg_get_default_source	namereg.c	/^pa_source *pa_namereg_get_default_source(pa_core *c) {$/;"	f
pa_namereg_is_valid_name	namereg.c	/^pa_bool_t pa_namereg_is_valid_name(const char *name) {$/;"	f
pa_namereg_is_valid_name_or_wildcard	namereg.c	/^pa_bool_t pa_namereg_is_valid_name_or_wildcard(const char *name, pa_namereg_type_t type) {$/;"	f
pa_namereg_make_valid_name	namereg.c	/^char* pa_namereg_make_valid_name(const char *name) {$/;"	f
pa_namereg_register	namereg.c	/^const char *pa_namereg_register(pa_core *c, const char *name, pa_namereg_type_t type, void *data, pa_bool_t fail) {$/;"	f
pa_namereg_set_default_sink	namereg.c	/^pa_sink* pa_namereg_set_default_sink(pa_core*c, pa_sink *s) {$/;"	f
pa_namereg_set_default_source	namereg.c	/^pa_source* pa_namereg_set_default_source(pa_core*c, pa_source *s) {$/;"	f
pa_namereg_type	namereg.h	/^typedef enum pa_namereg_type {$/;"	g
pa_namereg_type_t	namereg.h	/^} pa_namereg_type_t;$/;"	t	typeref:enum:pa_namereg_type
pa_namereg_unregister	namereg.c	/^void pa_namereg_unregister(pa_core *c, const char *name) {$/;"	f
pa_native_connection	protocol-native.c	/^struct pa_native_connection {$/;"	s	file:
pa_native_connection	protocol-native.h	/^typedef struct pa_native_connection pa_native_connection;$/;"	t	typeref:struct:pa_native_connection
pa_native_connection_get_client	protocol-native.c	/^pa_client* pa_native_connection_get_client(pa_native_connection *c) {$/;"	f
pa_native_connection_get_pstream	protocol-native.c	/^pa_pstream* pa_native_connection_get_pstream(pa_native_connection *c) {$/;"	f
pa_native_hook	protocol-native.h	/^typedef enum pa_native_hook {$/;"	g
pa_native_hook_t	protocol-native.h	/^} pa_native_hook_t;$/;"	t	typeref:enum:pa_native_hook
pa_native_options	protocol-native.h	/^typedef struct pa_native_options {$/;"	s
pa_native_options	protocol-native.h	/^} pa_native_options;$/;"	t	typeref:struct:pa_native_options
pa_native_options_new	protocol-native.c	/^pa_native_options* pa_native_options_new(void) {$/;"	f
pa_native_options_parse	protocol-native.c	/^int pa_native_options_parse(pa_native_options *o, pa_core *c, pa_modargs *ma) {$/;"	f
pa_native_options_ref	protocol-native.c	/^pa_native_options* pa_native_options_ref(pa_native_options *o) {$/;"	f
pa_native_options_unref	protocol-native.c	/^void pa_native_options_unref(pa_native_options *o) {$/;"	f
pa_native_protocol	protocol-native.c	/^struct pa_native_protocol {$/;"	s	file:
pa_native_protocol	protocol-native.h	/^typedef struct pa_native_protocol pa_native_protocol;$/;"	t	typeref:struct:pa_native_protocol
pa_native_protocol_add_server_string	protocol-native.c	/^void pa_native_protocol_add_server_string(pa_native_protocol *p, const char *name) {$/;"	f
pa_native_protocol_connect	protocol-native.c	/^void pa_native_protocol_connect(pa_native_protocol *p, pa_iochannel *io, pa_native_options *o) {$/;"	f
pa_native_protocol_disconnect	protocol-native.c	/^void pa_native_protocol_disconnect(pa_native_protocol *p, pa_module *m) {$/;"	f
pa_native_protocol_ext_cb_t	protocol-native.h	/^typedef int (*pa_native_protocol_ext_cb_t)($/;"	t
pa_native_protocol_get	protocol-native.c	/^pa_native_protocol* pa_native_protocol_get(pa_core *c) {$/;"	f
pa_native_protocol_hooks	protocol-native.c	/^pa_hook *pa_native_protocol_hooks(pa_native_protocol *p) {$/;"	f
pa_native_protocol_install_ext	protocol-native.c	/^int pa_native_protocol_install_ext(pa_native_protocol *p, pa_module *m, pa_native_protocol_ext_cb_t cb) {$/;"	f
pa_native_protocol_ref	protocol-native.c	/^pa_native_protocol* pa_native_protocol_ref(pa_native_protocol *p) {$/;"	f
pa_native_protocol_remove_ext	protocol-native.c	/^void pa_native_protocol_remove_ext(pa_native_protocol *p, pa_module *m) {$/;"	f
pa_native_protocol_remove_server_string	protocol-native.c	/^void pa_native_protocol_remove_server_string(pa_native_protocol *p, const char *name) {$/;"	f
pa_native_protocol_servers	protocol-native.c	/^pa_strlist *pa_native_protocol_servers(pa_native_protocol *p) {$/;"	f
pa_native_protocol_unref	protocol-native.c	/^void pa_native_protocol_unref(pa_native_protocol *p) {$/;"	f
pa_ncpus	core-util.c	/^unsigned pa_ncpus(void) {$/;"	f
pa_nop	macro.h	227;"	d
pa_object	object.h	/^struct pa_object {$/;"	s
pa_object	object.h	/^typedef struct pa_object pa_object;$/;"	t	typeref:struct:pa_object
pa_object_assert_ref	object.h	69;"	d
pa_object_cast	object.h	/^static inline pa_object* pa_object_cast(void *o) {$/;"	f
pa_object_check_type	object.c	/^pa_bool_t pa_object_check_type(const char *type_id) {$/;"	f
pa_object_free	object.h	45;"	d
pa_object_isinstance	object.h	/^static inline pa_bool_t pa_object_isinstance(void *o) {$/;"	f
pa_object_new	object.h	43;"	d
pa_object_new_internal	object.c	/^pa_object *pa_object_new_internal(size_t size, const char *type_id, pa_bool_t (*check_type)(const char *type_id)) {$/;"	f
pa_object_ref	object.c	/^pa_object *pa_object_ref(pa_object *o) {$/;"	f
pa_object_refcnt	object.h	/^static inline int pa_object_refcnt(pa_object *o) {$/;"	f
pa_object_type_id	object.c	/^const char pa_object_type_id[] = "pa_object";$/;"	v
pa_object_unref	object.c	/^void pa_object_unref(pa_object *o) {$/;"	f
pa_once	once.h	/^typedef struct pa_once {$/;"	s
pa_once	once.h	/^} pa_once;$/;"	t	typeref:struct:pa_once
pa_once_begin	once.c	/^pa_bool_t pa_once_begin(pa_once *control) {$/;"	f
pa_once_end	once.c	/^void pa_once_end(pa_once *control) {$/;"	f
pa_once_func_t	once.h	/^typedef void (*pa_once_func_t) (void);$/;"	t
pa_open_config_file	core-util.c	/^FILE *pa_open_config_file(const char *global, const char *local, const char *env, char **result) {$/;"	f
pa_own_uid_in_group	core-util.c	/^int pa_own_uid_in_group(const char *name, gid_t *gid) {$/;"	f
pa_packet	packet.h	/^typedef struct pa_packet {$/;"	s
pa_packet	packet.h	/^} pa_packet;$/;"	t	typeref:struct:pa_packet
pa_packet_new	packet.c	/^pa_packet* pa_packet_new(size_t length) {$/;"	f
pa_packet_new_dynamic	packet.c	/^pa_packet* pa_packet_new_dynamic(void* data, size_t length) {$/;"	f
pa_packet_ref	packet.c	/^pa_packet* pa_packet_ref(pa_packet *p) {$/;"	f
pa_packet_unref	packet.c	/^void pa_packet_unref(pa_packet *p) {$/;"	f
pa_parent_dir	core-util.c	/^char *pa_parent_dir(const char *fn) {$/;"	f
pa_parse_address	parseaddr.c	/^int pa_parse_address(const char *name, pa_parsed_address *ret_p) {$/;"	f
pa_parse_boolean	core-util.c	/^int pa_parse_boolean(const char *v) {$/;"	f
pa_parse_resample_method	resampler.c	/^pa_resample_method_t pa_parse_resample_method(const char *string) {$/;"	f
pa_parsed_address	parseaddr.h	/^typedef struct pa_parsed_address {$/;"	s
pa_parsed_address	parseaddr.h	/^} pa_parsed_address;$/;"	t	typeref:struct:pa_parsed_address
pa_parsed_address_type	parseaddr.h	/^typedef enum pa_parsed_address_type {$/;"	g
pa_parsed_address_type_t	parseaddr.h	/^} pa_parsed_address_type_t;$/;"	t	typeref:enum:pa_parsed_address_type
pa_parsehex	core-util.c	/^size_t pa_parsehex(const char *p, uint8_t *d, size_t dlength) {$/;"	f
pa_pdispatch	pdispatch.c	/^struct pa_pdispatch {$/;"	s	file:
pa_pdispatch	pdispatch.h	/^typedef struct pa_pdispatch pa_pdispatch;$/;"	t	typeref:struct:pa_pdispatch
pa_pdispatch_cb_t	pdispatch.h	/^typedef void (*pa_pdispatch_cb_t)(pa_pdispatch *pd, uint32_t command, uint32_t tag, pa_tagstruct *t, void *userdata);$/;"	t
pa_pdispatch_creds	pdispatch.c	/^const pa_creds * pa_pdispatch_creds(pa_pdispatch *pd) {$/;"	f
pa_pdispatch_drain_cb_t	pdispatch.h	/^typedef void (*pa_pdispatch_drain_cb_t)(pa_pdispatch *pd, void *userdata);$/;"	t
pa_pdispatch_is_pending	pdispatch.c	/^int pa_pdispatch_is_pending(pa_pdispatch *pd) {$/;"	f
pa_pdispatch_new	pdispatch.c	/^pa_pdispatch* pa_pdispatch_new(pa_mainloop_api *mainloop, pa_bool_t use_rtclock, const pa_pdispatch_cb_t *table, unsigned entries) {$/;"	f
pa_pdispatch_ref	pdispatch.c	/^pa_pdispatch* pa_pdispatch_ref(pa_pdispatch *pd) {$/;"	f
pa_pdispatch_register_reply	pdispatch.c	/^void pa_pdispatch_register_reply(pa_pdispatch *pd, uint32_t tag, int timeout, pa_pdispatch_cb_t cb, void *userdata, pa_free_cb_t free_cb) {$/;"	f
pa_pdispatch_run	pdispatch.c	/^int pa_pdispatch_run(pa_pdispatch *pd, pa_packet*packet, const pa_creds *creds, void *userdata) {$/;"	f
pa_pdispatch_set_drain_callback	pdispatch.c	/^void pa_pdispatch_set_drain_callback(pa_pdispatch *pd, pa_pdispatch_drain_cb_t cb, void *userdata) {$/;"	f
pa_pdispatch_unref	pdispatch.c	/^void pa_pdispatch_unref(pa_pdispatch *pd) {$/;"	f
pa_pdispatch_unregister_reply	pdispatch.c	/^void pa_pdispatch_unregister_reply(pa_pdispatch *pd, void *userdata) {$/;"	f
pa_pid_file_check_running	pid.c	/^int pa_pid_file_check_running(pid_t *pid, const char *procname) {$/;"	f
pa_pid_file_create	pid.c	/^int pa_pid_file_create(const char *procname) {$/;"	f
pa_pid_file_kill	pid.c	/^int pa_pid_file_kill(int sig, pid_t *pid, const char *exe_name) {$/;"	f
pa_pid_file_kill	pid.c	/^int pa_pid_file_kill(int sig, pid_t *pid, const char *procname) {$/;"	f
pa_pid_file_remove	pid.c	/^int pa_pid_file_remove(void) {$/;"	f
pa_pipe_buf	core-util.c	/^size_t pa_pipe_buf(int fd) {$/;"	f
pa_play_file	sound-file-stream.c	/^int pa_play_file($/;"	f
pa_play_memblockq	play-memblockq.c	/^int pa_play_memblockq($/;"	f
pa_play_memchunk	play-memchunk.c	/^int pa_play_memchunk($/;"	f
pa_prioq	prioq.c	/^struct pa_prioq {$/;"	s	file:
pa_prioq	prioq.h	/^typedef struct pa_prioq pa_prioq;$/;"	t	typeref:struct:pa_prioq
pa_prioq_free	prioq.c	/^void pa_prioq_free(pa_prioq *q, pa_free2_cb_t free_cb, void *userdata) {$/;"	f
pa_prioq_isempty	prioq.c	/^pa_bool_t pa_prioq_isempty(pa_prioq *q) {$/;"	f
pa_prioq_item	prioq.c	/^struct pa_prioq_item {$/;"	s	file:
pa_prioq_item	prioq.h	/^typedef struct pa_prioq_item pa_prioq_item;$/;"	t	typeref:struct:pa_prioq_item
pa_prioq_new	prioq.c	/^pa_prioq *pa_prioq_new(pa_compare_func_t compare_func) {$/;"	f
pa_prioq_peek	prioq.c	/^void* pa_prioq_peek(pa_prioq *q) {$/;"	f
pa_prioq_pop	prioq.c	/^void* pa_prioq_pop(pa_prioq *q){$/;"	f
pa_prioq_put	prioq.c	/^pa_prioq_item* pa_prioq_put(pa_prioq *q, void *p) {$/;"	f
pa_prioq_remove	prioq.c	/^void* pa_prioq_remove(pa_prioq *q, pa_prioq_item *i) {$/;"	f
pa_prioq_reshuffle	prioq.c	/^void pa_prioq_reshuffle(pa_prioq *q, pa_prioq_item *i) {$/;"	f
pa_prioq_size	prioq.c	/^unsigned pa_prioq_size(pa_prioq *q) {$/;"	f
pa_pstream	pstream.c	/^struct pa_pstream {$/;"	s	file:
pa_pstream	pstream.h	/^typedef struct pa_pstream pa_pstream;$/;"	t	typeref:struct:pa_pstream
pa_pstream_block_id_cb_t	pstream.h	/^typedef void (*pa_pstream_block_id_cb_t)(pa_pstream *p, uint32_t block_id, void *userdata);$/;"	t
pa_pstream_descriptor	pstream.c	/^typedef uint32_t pa_pstream_descriptor[PA_PSTREAM_DESCRIPTOR_MAX];$/;"	t	file:
pa_pstream_enable_shm	pstream.c	/^void pa_pstream_enable_shm(pa_pstream *p, pa_bool_t enable) {$/;"	f
pa_pstream_get_shm	pstream.c	/^pa_bool_t pa_pstream_get_shm(pa_pstream *p) {$/;"	f
pa_pstream_is_pending	pstream.c	/^pa_bool_t pa_pstream_is_pending(pa_pstream *p) {$/;"	f
pa_pstream_memblock_cb_t	pstream.h	/^typedef void (*pa_pstream_memblock_cb_t)(pa_pstream *p, uint32_t channel, int64_t offset, pa_seek_mode_t seek, const pa_memchunk *chunk, void *userdata);$/;"	t
pa_pstream_new	pstream.c	/^pa_pstream *pa_pstream_new(pa_mainloop_api *m, pa_iochannel *io, pa_mempool *pool) {$/;"	f
pa_pstream_notify_cb_t	pstream.h	/^typedef void (*pa_pstream_notify_cb_t)(pa_pstream *p, void *userdata);$/;"	t
pa_pstream_packet_cb_t	pstream.h	/^typedef void (*pa_pstream_packet_cb_t)(pa_pstream *p, pa_packet *packet, const pa_creds *creds, void *userdata);$/;"	t
pa_pstream_ref	pstream.c	/^pa_pstream* pa_pstream_ref(pa_pstream*p) {$/;"	f
pa_pstream_send_error	pstream-util.c	/^void pa_pstream_send_error(pa_pstream *p, uint32_t tag, uint32_t error) {$/;"	f
pa_pstream_send_memblock	pstream.c	/^void pa_pstream_send_memblock(pa_pstream*p, uint32_t channel, int64_t offset, pa_seek_mode_t seek_mode, const pa_memchunk *chunk) {$/;"	f
pa_pstream_send_packet	pstream.c	/^void pa_pstream_send_packet(pa_pstream*p, pa_packet *packet, const pa_creds *creds) {$/;"	f
pa_pstream_send_release	pstream.c	/^void pa_pstream_send_release(pa_pstream *p, uint32_t block_id) {$/;"	f
pa_pstream_send_revoke	pstream.c	/^void pa_pstream_send_revoke(pa_pstream *p, uint32_t block_id) {$/;"	f
pa_pstream_send_simple_ack	pstream-util.c	/^void pa_pstream_send_simple_ack(pa_pstream *p, uint32_t tag) {$/;"	f
pa_pstream_send_tagstruct	pstream-util.h	33;"	d
pa_pstream_send_tagstruct_with_creds	pstream-util.c	/^void pa_pstream_send_tagstruct_with_creds(pa_pstream *p, pa_tagstruct *t, const pa_creds *creds) {$/;"	f
pa_pstream_set_die_callback	pstream.c	/^void pa_pstream_set_die_callback(pa_pstream *p, pa_pstream_notify_cb_t cb, void *userdata) {$/;"	f
pa_pstream_set_drain_callback	pstream.c	/^void pa_pstream_set_drain_callback(pa_pstream *p, pa_pstream_notify_cb_t cb, void *userdata) {$/;"	f
pa_pstream_set_recieve_memblock_callback	pstream.c	/^void pa_pstream_set_recieve_memblock_callback(pa_pstream *p, pa_pstream_memblock_cb_t cb, void *userdata) {$/;"	f
pa_pstream_set_recieve_packet_callback	pstream.c	/^void pa_pstream_set_recieve_packet_callback(pa_pstream *p, pa_pstream_packet_cb_t cb, void *userdata) {$/;"	f
pa_pstream_set_release_callback	pstream.c	/^void pa_pstream_set_release_callback(pa_pstream *p, pa_pstream_block_id_cb_t cb, void *userdata) {$/;"	f
pa_pstream_set_revoke_callback	pstream.c	/^void pa_pstream_set_revoke_callback(pa_pstream *p, pa_pstream_block_id_cb_t cb, void *userdata) {$/;"	f
pa_pstream_unlink	pstream.c	/^void pa_pstream_unlink(pa_pstream *p) {$/;"	f
pa_pstream_unref	pstream.c	/^void pa_pstream_unref(pa_pstream*p) {$/;"	f
pa_queue	queue.c	/^struct pa_queue {$/;"	s	file:
pa_queue	queue.h	/^typedef struct pa_queue pa_queue;$/;"	t	typeref:struct:pa_queue
pa_queue_free	queue.c	/^void pa_queue_free(pa_queue* q, pa_free2_cb_t free_func, void *userdata) {$/;"	f
pa_queue_isempty	queue.c	/^int pa_queue_isempty(pa_queue *q) {$/;"	f
pa_queue_new	queue.c	/^pa_queue* pa_queue_new(void) {$/;"	f
pa_queue_pop	queue.c	/^void* pa_queue_pop(pa_queue *q) {$/;"	f
pa_queue_push	queue.c	/^void pa_queue_push(pa_queue *q, void *p) {$/;"	f
pa_raise_priority	core-util.c	/^int pa_raise_priority(int nice_level) {$/;"	f
pa_random	random.c	/^void pa_random(void *ret_data, size_t length) {$/;"	f
pa_random_seed	random.c	/^void pa_random_seed(void) {$/;"	f
pa_ratelimit	ratelimit.h	/^typedef struct pa_ratelimit {$/;"	s
pa_ratelimit	ratelimit.h	/^} pa_ratelimit;$/;"	t	typeref:struct:pa_ratelimit
pa_ratelimit_test	ratelimit.c	/^pa_bool_t pa_ratelimit_test(pa_ratelimit *r) {$/;"	f
pa_read	core-util.c	/^ssize_t pa_read(int fd, void *buf, size_t count, int *type) {$/;"	f
pa_read_line_from_file	core-util.c	/^char *pa_read_line_from_file(const char *fn) {$/;"	f
pa_readlink	core-util.c	/^char *pa_readlink(const char *p) {$/;"	f
pa_realpath	core-util.c	/^char *pa_realpath(const char *path) {$/;"	f
pa_reduce	core-util.c	/^void pa_reduce(unsigned *num, unsigned *den) {$/;"	f
pa_reg_x86	cpu-x86.h	/^typedef int32_t pa_reg_x86;$/;"	t
pa_reg_x86	cpu-x86.h	/^typedef int64_t pa_reg_x86;$/;"	t
pa_remap	remap.h	/^struct pa_remap {$/;"	s
pa_remap_func_init_mmx	remap_mmx.c	/^void pa_remap_func_init_mmx (pa_cpu_x86_flag_t flags) {$/;"	f
pa_remap_func_init_sse	remap_sse.c	/^void pa_remap_func_init_sse (pa_cpu_x86_flag_t flags) {$/;"	f
pa_remap_t	remap.h	/^typedef struct pa_remap pa_remap_t;$/;"	t	typeref:struct:pa_remap
pa_replace	core-util.c	/^char *pa_replace(const char*s, const char*a, const char *b) {$/;"	f
pa_resample_flags	resampler.h	/^typedef enum pa_resample_flags {$/;"	g
pa_resample_flags_t	resampler.h	/^} pa_resample_flags_t;$/;"	t	typeref:enum:pa_resample_flags
pa_resample_method	resampler.h	/^typedef enum pa_resample_method {$/;"	g
pa_resample_method_supported	resampler.c	/^int pa_resample_method_supported(pa_resample_method_t m) {$/;"	f
pa_resample_method_t	resampler.h	/^} pa_resample_method_t;$/;"	t	typeref:enum:pa_resample_method
pa_resample_method_to_string	resampler.c	/^const char *pa_resample_method_to_string(pa_resample_method_t m) {$/;"	f
pa_resampler	resampler.c	/^struct pa_resampler {$/;"	s	file:
pa_resampler	resampler.h	/^typedef struct pa_resampler pa_resampler;$/;"	t	typeref:struct:pa_resampler
pa_resampler_free	resampler.c	/^void pa_resampler_free(pa_resampler *r) {$/;"	f
pa_resampler_get_method	resampler.c	/^pa_resample_method_t pa_resampler_get_method(pa_resampler *r) {$/;"	f
pa_resampler_input_channel_map	resampler.c	/^const pa_channel_map* pa_resampler_input_channel_map(pa_resampler *r) {$/;"	f
pa_resampler_input_sample_spec	resampler.c	/^const pa_sample_spec* pa_resampler_input_sample_spec(pa_resampler *r) {$/;"	f
pa_resampler_max_block_size	resampler.c	/^size_t pa_resampler_max_block_size(pa_resampler *r) {$/;"	f
pa_resampler_new	resampler.c	/^pa_resampler* pa_resampler_new($/;"	f
pa_resampler_output_channel_map	resampler.c	/^const pa_channel_map* pa_resampler_output_channel_map(pa_resampler *r) {$/;"	f
pa_resampler_output_sample_spec	resampler.c	/^const pa_sample_spec* pa_resampler_output_sample_spec(pa_resampler *r) {$/;"	f
pa_resampler_request	resampler.c	/^size_t pa_resampler_request(pa_resampler *r, size_t out_length) {$/;"	f
pa_resampler_reset	resampler.c	/^void pa_resampler_reset(pa_resampler *r) {$/;"	f
pa_resampler_result	resampler.c	/^size_t pa_resampler_result(pa_resampler *r, size_t in_length) {$/;"	f
pa_resampler_run	resampler.c	/^void pa_resampler_run(pa_resampler *r, const pa_memchunk *in, pa_memchunk *out) {$/;"	f
pa_resampler_set_input_rate	resampler.c	/^void pa_resampler_set_input_rate(pa_resampler *r, uint32_t rate) {$/;"	f
pa_resampler_set_output_rate	resampler.c	/^void pa_resampler_set_output_rate(pa_resampler *r, uint32_t rate) {$/;"	f
pa_reset_personality	core-util.c	/^void pa_reset_personality(void) {$/;"	f
pa_reset_priority	core-util.c	/^void pa_reset_priority(void) {$/;"	f
pa_reset_sigs	core-util.c	/^int pa_reset_sigs(int except, ...) {$/;"	f
pa_reset_sigsv	core-util.c	/^int pa_reset_sigsv(const int except[]) {$/;"	f
pa_return_if_fail	macro.h	198;"	d
pa_return_null_if_fail	macro.h	214;"	d
pa_return_val_if_fail	macro.h	206;"	d
pa_rtclock_age	core-rtclock.c	/^pa_usec_t pa_rtclock_age(const struct timeval *tv) {$/;"	f
pa_rtclock_from_wallclock	core-rtclock.c	/^struct timeval* pa_rtclock_from_wallclock(struct timeval *tv) {$/;"	f
pa_rtclock_get	core-rtclock.c	/^struct timeval *pa_rtclock_get(struct timeval *tv) {$/;"	f
pa_rtclock_hrtimer	core-rtclock.c	/^pa_bool_t pa_rtclock_hrtimer(void) {$/;"	f
pa_rtclock_hrtimer_enable	core-rtclock.c	/^void pa_rtclock_hrtimer_enable(void) {$/;"	f
pa_rtpoll	rtpoll.c	/^struct pa_rtpoll {$/;"	s	file:
pa_rtpoll	rtpoll.h	/^typedef struct pa_rtpoll pa_rtpoll;$/;"	t	typeref:struct:pa_rtpoll
pa_rtpoll_free	rtpoll.c	/^void pa_rtpoll_free(pa_rtpoll *p) {$/;"	f
pa_rtpoll_item	rtpoll.c	/^struct pa_rtpoll_item {$/;"	s	file:
pa_rtpoll_item	rtpoll.h	/^typedef struct pa_rtpoll_item pa_rtpoll_item;$/;"	t	typeref:struct:pa_rtpoll_item
pa_rtpoll_item_free	rtpoll.c	/^void pa_rtpoll_item_free(pa_rtpoll_item *i) {$/;"	f
pa_rtpoll_item_get_pollfd	rtpoll.c	/^struct pollfd *pa_rtpoll_item_get_pollfd(pa_rtpoll_item *i, unsigned *n_fds) {$/;"	f
pa_rtpoll_item_get_userdata	rtpoll.c	/^void* pa_rtpoll_item_get_userdata(pa_rtpoll_item *i) {$/;"	f
pa_rtpoll_item_new	rtpoll.c	/^pa_rtpoll_item *pa_rtpoll_item_new(pa_rtpoll *p, pa_rtpoll_priority_t prio, unsigned n_fds) {$/;"	f
pa_rtpoll_item_new_asyncmsgq_read	rtpoll.c	/^pa_rtpoll_item *pa_rtpoll_item_new_asyncmsgq_read(pa_rtpoll *p, pa_rtpoll_priority_t prio, pa_asyncmsgq *q) {$/;"	f
pa_rtpoll_item_new_asyncmsgq_write	rtpoll.c	/^pa_rtpoll_item *pa_rtpoll_item_new_asyncmsgq_write(pa_rtpoll *p, pa_rtpoll_priority_t prio, pa_asyncmsgq *q) {$/;"	f
pa_rtpoll_item_new_fdsem	rtpoll.c	/^pa_rtpoll_item *pa_rtpoll_item_new_fdsem(pa_rtpoll *p, pa_rtpoll_priority_t prio, pa_fdsem *f) {$/;"	f
pa_rtpoll_item_set_after_callback	rtpoll.c	/^void pa_rtpoll_item_set_after_callback(pa_rtpoll_item *i, void (*after_cb)(pa_rtpoll_item *i)) {$/;"	f
pa_rtpoll_item_set_before_callback	rtpoll.c	/^void pa_rtpoll_item_set_before_callback(pa_rtpoll_item *i, int (*before_cb)(pa_rtpoll_item *i)) {$/;"	f
pa_rtpoll_item_set_userdata	rtpoll.c	/^void pa_rtpoll_item_set_userdata(pa_rtpoll_item *i, void *userdata) {$/;"	f
pa_rtpoll_item_set_work_callback	rtpoll.c	/^void pa_rtpoll_item_set_work_callback(pa_rtpoll_item *i, int (*work_cb)(pa_rtpoll_item *i)) {$/;"	f
pa_rtpoll_new	rtpoll.c	/^pa_rtpoll *pa_rtpoll_new(void) {$/;"	f
pa_rtpoll_priority	rtpoll.h	/^typedef enum pa_rtpoll_priority {$/;"	g
pa_rtpoll_priority_t	rtpoll.h	/^} pa_rtpoll_priority_t;$/;"	t	typeref:enum:pa_rtpoll_priority
pa_rtpoll_quit	rtpoll.c	/^void pa_rtpoll_quit(pa_rtpoll *p) {$/;"	f
pa_rtpoll_run	rtpoll.c	/^int pa_rtpoll_run(pa_rtpoll *p, pa_bool_t wait_op) {$/;"	f
pa_rtpoll_set_timer_absolute	rtpoll.c	/^void pa_rtpoll_set_timer_absolute(pa_rtpoll *p, pa_usec_t usec) {$/;"	f
pa_rtpoll_set_timer_disabled	rtpoll.c	/^void pa_rtpoll_set_timer_disabled(pa_rtpoll *p) {$/;"	f
pa_rtpoll_set_timer_relative	rtpoll.c	/^void pa_rtpoll_set_timer_relative(pa_rtpoll *p, pa_usec_t usec) {$/;"	f
pa_rtpoll_timer_elapsed	rtpoll.c	/^pa_bool_t pa_rtpoll_timer_elapsed(pa_rtpoll *p) {$/;"	f
pa_run_from_build_tree	core-util.c	/^pa_bool_t pa_run_from_build_tree(void) {$/;"	f
pa_run_once	once.c	/^void pa_run_once(pa_once *control, pa_once_func_t func) {$/;"	f
pa_running_in_vm	core-util.c	/^pa_bool_t pa_running_in_vm(void) {$/;"	f
pa_runtime_path	core-util.c	/^char *pa_runtime_path(const char *fn) {$/;"	f
pa_sample_clamp	sample-util.c	/^void pa_sample_clamp(pa_sample_format_t format, void *dst, size_t dstr, const void *src, size_t sstr, unsigned n) {$/;"	f
pa_sample_spec_is_mime	mime-type.c	/^pa_bool_t pa_sample_spec_is_mime(const pa_sample_spec *ss, const pa_channel_map *cm) {$/;"	f
pa_sample_spec_mimefy	mime-type.c	/^void pa_sample_spec_mimefy(pa_sample_spec *ss, pa_channel_map *cm) {$/;"	f
pa_sample_spec_to_mime_type	mime-type.c	/^char *pa_sample_spec_to_mime_type(const pa_sample_spec *ss, const pa_channel_map *cm) {$/;"	f
pa_sample_spec_to_mime_type_mimefy	mime-type.c	/^char *pa_sample_spec_to_mime_type_mimefy(const pa_sample_spec *_ss, const pa_channel_map *_cm) {$/;"	f
pa_scache_add_directory_lazy	core-scache.c	/^int pa_scache_add_directory_lazy(pa_core *c, const char *pathname) {$/;"	f
pa_scache_add_file	core-scache.c	/^int pa_scache_add_file(pa_core *c, const char *name, const char *filename, uint32_t *idx) {$/;"	f
pa_scache_add_file_lazy	core-scache.c	/^int pa_scache_add_file_lazy(pa_core *c, const char *name, const char *filename, uint32_t *idx) {$/;"	f
pa_scache_add_item	core-scache.c	/^int pa_scache_add_item($/;"	f
pa_scache_entry	core-scache.h	/^typedef struct pa_scache_entry {$/;"	s
pa_scache_entry	core-scache.h	/^} pa_scache_entry;$/;"	t	typeref:struct:pa_scache_entry
pa_scache_free_all	core-scache.c	/^void pa_scache_free_all(pa_core *c) {$/;"	f
pa_scache_get_id_by_name	core-scache.c	/^uint32_t pa_scache_get_id_by_name(pa_core *c, const char *name) {$/;"	f
pa_scache_get_name_by_id	core-scache.c	/^const char *pa_scache_get_name_by_id(pa_core *c, uint32_t id) {$/;"	f
pa_scache_list_to_string	cli-text.c	/^char *pa_scache_list_to_string(pa_core *c) {$/;"	f
pa_scache_play_item	core-scache.c	/^int pa_scache_play_item(pa_core *c, const char *name, pa_sink *sink, pa_volume_t volume, pa_proplist *p, uint32_t *sink_input_idx) {$/;"	f
pa_scache_play_item_by_name	core-scache.c	/^int pa_scache_play_item_by_name(pa_core *c, const char *name, const char*sink_name, pa_volume_t volume, pa_proplist *p, uint32_t *sink_input_idx) {$/;"	f
pa_scache_remove_item	core-scache.c	/^int pa_scache_remove_item(pa_core *c, const char *name) {$/;"	f
pa_scache_total_size	core-scache.c	/^size_t pa_scache_total_size(pa_core *c) {$/;"	f
pa_scache_unload_unused	core-scache.c	/^void pa_scache_unload_unused(pa_core *c) {$/;"	f
pa_sconv_float32be_from_s16ne	sconv-s16be.h	64;"	d
pa_sconv_float32be_from_s16ne	sconv-s16le.h	64;"	d
pa_sconv_float32be_to_s16ne	sconv-s16be.h	63;"	d
pa_sconv_float32be_to_s16ne	sconv-s16le.h	63;"	d
pa_sconv_float32le_from_s16ne	sconv-s16be.h	66;"	d
pa_sconv_float32le_from_s16ne	sconv-s16le.h	66;"	d
pa_sconv_float32le_to_s16ne	sconv-s16be.h	65;"	d
pa_sconv_float32le_to_s16ne	sconv-s16le.h	65;"	d
pa_sconv_s16le_from_f32ne_sse	sconv_sse.c	/^static void pa_sconv_s16le_from_f32ne_sse(unsigned n, const float *a, int16_t *b) {$/;"	f	file:
pa_sconv_s16le_from_f32ne_sse2	sconv_sse.c	/^static void pa_sconv_s16le_from_f32ne_sse2(unsigned n, const float *a, int16_t *b) {$/;"	f	file:
pa_sconv_s16le_from_float32ne	sconv-s16be.c	42;"	d	file:
pa_sconv_s16le_from_float32ne	sconv-s16le.c	/^void pa_sconv_s16le_from_float32ne(unsigned n, const float *a, int16_t *b) {$/;"	f
pa_sconv_s16le_from_float32re	sconv-s16be.c	44;"	d	file:
pa_sconv_s16le_from_float32re	sconv-s16le.c	/^void pa_sconv_s16le_from_float32re(unsigned n, const float *a, int16_t *b) {$/;"	f
pa_sconv_s16le_to_float32ne	sconv-s16be.c	41;"	d	file:
pa_sconv_s16le_to_float32ne	sconv-s16le.c	/^void pa_sconv_s16le_to_float32ne(unsigned n, const int16_t *a, float *b) {$/;"	f
pa_sconv_s16le_to_float32re	sconv-s16be.c	43;"	d	file:
pa_sconv_s16le_to_float32re	sconv-s16le.c	/^void pa_sconv_s16le_to_float32re(unsigned n, const int16_t *a, float *b) {$/;"	f
pa_sconv_s24_32le_from_float32ne	sconv-s16be.c	57;"	d	file:
pa_sconv_s24_32le_from_float32ne	sconv-s16le.c	/^void pa_sconv_s24_32le_from_float32ne(unsigned n, const float *a, uint32_t *b) {$/;"	f
pa_sconv_s24_32le_from_float32re	sconv-s16be.c	59;"	d	file:
pa_sconv_s24_32le_from_float32re	sconv-s16le.c	/^void pa_sconv_s24_32le_from_float32re(unsigned n, const float *a, uint32_t *b) {$/;"	f
pa_sconv_s24_32le_from_s16ne	sconv-s16be.c	72;"	d	file:
pa_sconv_s24_32le_from_s16ne	sconv-s16le.c	/^void pa_sconv_s24_32le_from_s16ne(unsigned n, const int16_t *a, uint32_t *b) {$/;"	f
pa_sconv_s24_32le_from_s16re	sconv-s16be.c	74;"	d	file:
pa_sconv_s24_32le_from_s16re	sconv-s16le.c	/^void pa_sconv_s24_32le_from_s16re(unsigned n, const int16_t *a, uint32_t *b) {$/;"	f
pa_sconv_s24_32le_to_float32ne	sconv-s16be.c	56;"	d	file:
pa_sconv_s24_32le_to_float32ne	sconv-s16le.c	/^void pa_sconv_s24_32le_to_float32ne(unsigned n, const uint32_t *a, float *b) {$/;"	f
pa_sconv_s24_32le_to_float32re	sconv-s16be.c	58;"	d	file:
pa_sconv_s24_32le_to_float32re	sconv-s16le.c	/^void pa_sconv_s24_32le_to_float32re(unsigned n, const uint32_t *a, float *b) {$/;"	f
pa_sconv_s24_32le_to_s16ne	sconv-s16be.c	71;"	d	file:
pa_sconv_s24_32le_to_s16ne	sconv-s16le.c	/^void pa_sconv_s24_32le_to_s16ne(unsigned n, const uint32_t *a, int16_t *b) {$/;"	f
pa_sconv_s24_32le_to_s16re	sconv-s16be.c	73;"	d	file:
pa_sconv_s24_32le_to_s16re	sconv-s16le.c	/^void pa_sconv_s24_32le_to_s16re(unsigned n, const uint32_t *a, int16_t *b) {$/;"	f
pa_sconv_s24le_from_float32ne	sconv-s16be.c	52;"	d	file:
pa_sconv_s24le_from_float32ne	sconv-s16le.c	/^void pa_sconv_s24le_from_float32ne(unsigned n, const float *a, uint8_t *b) {$/;"	f
pa_sconv_s24le_from_float32re	sconv-s16be.c	54;"	d	file:
pa_sconv_s24le_from_float32re	sconv-s16le.c	/^void pa_sconv_s24le_from_float32re(unsigned n, const float *a, uint8_t *b) {$/;"	f
pa_sconv_s24le_from_s16ne	sconv-s16be.c	67;"	d	file:
pa_sconv_s24le_from_s16ne	sconv-s16le.c	/^void pa_sconv_s24le_from_s16ne(unsigned n, const int16_t *a, uint8_t *b) {$/;"	f
pa_sconv_s24le_from_s16re	sconv-s16be.c	69;"	d	file:
pa_sconv_s24le_from_s16re	sconv-s16le.c	/^void pa_sconv_s24le_from_s16re(unsigned n, const int16_t *a, uint8_t *b) {$/;"	f
pa_sconv_s24le_to_float32ne	sconv-s16be.c	51;"	d	file:
pa_sconv_s24le_to_float32ne	sconv-s16le.c	/^void pa_sconv_s24le_to_float32ne(unsigned n, const uint8_t *a, float *b) {$/;"	f
pa_sconv_s24le_to_float32re	sconv-s16be.c	53;"	d	file:
pa_sconv_s24le_to_float32re	sconv-s16le.c	/^void pa_sconv_s24le_to_float32re(unsigned n, const uint8_t *a, float *b) {$/;"	f
pa_sconv_s24le_to_s16ne	sconv-s16be.c	66;"	d	file:
pa_sconv_s24le_to_s16ne	sconv-s16le.c	/^void pa_sconv_s24le_to_s16ne(unsigned n, const uint8_t *a, int16_t *b) {$/;"	f
pa_sconv_s24le_to_s16re	sconv-s16be.c	68;"	d	file:
pa_sconv_s24le_to_s16re	sconv-s16le.c	/^void pa_sconv_s24le_to_s16re(unsigned n, const uint8_t *a, int16_t *b) {$/;"	f
pa_sconv_s32le_from_float32ne	sconv-s16be.c	47;"	d	file:
pa_sconv_s32le_from_float32ne	sconv-s16le.c	/^void pa_sconv_s32le_from_float32ne(unsigned n, const float *a, int32_t *b) {$/;"	f
pa_sconv_s32le_from_float32re	sconv-s16be.c	49;"	d	file:
pa_sconv_s32le_from_float32re	sconv-s16le.c	/^void pa_sconv_s32le_from_float32re(unsigned n, const float *a, int32_t *b) {$/;"	f
pa_sconv_s32le_from_s16ne	sconv-s16be.c	62;"	d	file:
pa_sconv_s32le_from_s16ne	sconv-s16le.c	/^void pa_sconv_s32le_from_s16ne(unsigned n, const int16_t *a, int32_t *b) {$/;"	f
pa_sconv_s32le_from_s16re	sconv-s16be.c	64;"	d	file:
pa_sconv_s32le_from_s16re	sconv-s16le.c	/^void pa_sconv_s32le_from_s16re(unsigned n, const int16_t *a, int32_t *b) {$/;"	f
pa_sconv_s32le_to_float32ne	sconv-s16be.c	46;"	d	file:
pa_sconv_s32le_to_float32ne	sconv-s16le.c	/^void pa_sconv_s32le_to_float32ne(unsigned n, const int32_t *a, float *b) {$/;"	f
pa_sconv_s32le_to_float32re	sconv-s16be.c	48;"	d	file:
pa_sconv_s32le_to_float32re	sconv-s16le.c	/^void pa_sconv_s32le_to_float32re(unsigned n, const int32_t *a, float *b) {$/;"	f
pa_sconv_s32le_to_s16ne	sconv-s16be.c	61;"	d	file:
pa_sconv_s32le_to_s16ne	sconv-s16le.c	/^void pa_sconv_s32le_to_s16ne(unsigned n, const int32_t*a, int16_t *b) {$/;"	f
pa_sconv_s32le_to_s16re	sconv-s16be.c	63;"	d	file:
pa_sconv_s32le_to_s16re	sconv-s16le.c	/^void pa_sconv_s32le_to_s16re(unsigned n, const int32_t*a, int16_t *b) {$/;"	f
pa_semaphore	semaphore-posix.c	/^struct pa_semaphore {$/;"	s	file:
pa_semaphore	semaphore-win32.c	/^struct pa_semaphore$/;"	s	file:
pa_semaphore	semaphore.h	/^typedef struct pa_semaphore pa_semaphore;$/;"	t	typeref:struct:pa_semaphore
pa_semaphore_free	semaphore-posix.c	/^void pa_semaphore_free(pa_semaphore *s) {$/;"	f
pa_semaphore_free	semaphore-win32.c	/^void pa_semaphore_free(pa_semaphore *s) {$/;"	f
pa_semaphore_new	semaphore-posix.c	/^pa_semaphore* pa_semaphore_new(unsigned value) {$/;"	f
pa_semaphore_new	semaphore-win32.c	/^pa_semaphore* pa_semaphore_new(unsigned value) {$/;"	f
pa_semaphore_post	semaphore-posix.c	/^void pa_semaphore_post(pa_semaphore *s) {$/;"	f
pa_semaphore_post	semaphore-win32.c	/^void pa_semaphore_post(pa_semaphore *s) {$/;"	f
pa_semaphore_wait	semaphore-posix.c	/^void pa_semaphore_wait(pa_semaphore *s) {$/;"	f
pa_semaphore_wait	semaphore-win32.c	/^void pa_semaphore_wait(pa_semaphore *s) {$/;"	f
pa_session_id	core-util.c	/^char *pa_session_id(void) {$/;"	f
pa_set_convert_from_float32ne_function	sconv.c	/^void pa_set_convert_from_float32ne_function(pa_sample_format_t f, pa_convert_func_t func) {$/;"	f
pa_set_convert_from_s16ne_function	sconv.c	/^void pa_set_convert_from_s16ne_function(pa_sample_format_t f, pa_convert_func_t func) {$/;"	f
pa_set_convert_to_float32ne_function	sconv.c	/^void pa_set_convert_to_float32ne_function(pa_sample_format_t f, pa_convert_func_t func) {$/;"	f
pa_set_convert_to_s16ne_function	sconv.c	/^void pa_set_convert_to_s16ne_function(pa_sample_format_t f, pa_convert_func_t func) {$/;"	f
pa_set_env	core-util.c	/^void pa_set_env(const char *key, const char *value) {$/;"	f
pa_set_env_and_record	core-util.c	/^void pa_set_env_and_record(const char *key, const char *value) {$/;"	f
pa_set_init_remap_func	remap.c	/^void pa_set_init_remap_func(pa_init_remap_func_t func) {$/;"	f
pa_set_root	core-util.c	/^int pa_set_root(HANDLE handle) {$/;"	f
pa_set_volume_func	svolume_c.c	/^void pa_set_volume_func(pa_sample_format_t f, pa_do_volume_func_t func) {$/;"	f
pa_shared	shared.c	/^typedef struct pa_shared {$/;"	s	file:
pa_shared	shared.c	/^} pa_shared;$/;"	t	typeref:struct:pa_shared	file:
pa_shared_dump	shared.c	/^void pa_shared_dump(pa_core *c, pa_strbuf *s) {$/;"	f
pa_shared_get	shared.c	/^void* pa_shared_get(pa_core *c, const char *name) {$/;"	f
pa_shared_remove	shared.c	/^int pa_shared_remove(pa_core *c, const char *name) {$/;"	f
pa_shared_replace	shared.c	/^int pa_shared_replace(pa_core *c, const char *name, void *data) {$/;"	f
pa_shared_set	shared.c	/^int pa_shared_set(pa_core *c, const char *name, void *data) {$/;"	f
pa_shm	shm.h	/^typedef struct pa_shm {$/;"	s
pa_shm	shm.h	/^} pa_shm;$/;"	t	typeref:struct:pa_shm
pa_shm_attach_ro	shm.c	/^int pa_shm_attach_ro(pa_shm *m, unsigned id) {$/;"	f
pa_shm_cleanup	shm.c	/^int pa_shm_cleanup(void) {$/;"	f
pa_shm_create_rw	shm.c	/^int pa_shm_create_rw(pa_shm *m, size_t size, pa_bool_t shared, mode_t mode) {$/;"	f
pa_shm_free	shm.c	/^void pa_shm_free(pa_shm *m) {$/;"	f
pa_shm_punch	shm.c	/^void pa_shm_punch(pa_shm *m, size_t offset, size_t size) {$/;"	f
pa_sig2str	core-util.c	/^const char *pa_sig2str(int sig) {$/;"	f
pa_silence_cache	sample-util.h	/^typedef struct pa_silence_cache {$/;"	s
pa_silence_cache	sample-util.h	/^} pa_silence_cache;$/;"	t	typeref:struct:pa_silence_cache
pa_silence_cache_done	sample-util.c	/^void pa_silence_cache_done(pa_silence_cache *cache) {$/;"	f
pa_silence_cache_init	sample-util.c	/^void pa_silence_cache_init(pa_silence_cache *cache) {$/;"	f
pa_silence_memblock	sample-util.c	/^pa_memblock *pa_silence_memblock(pa_memblock* b, const pa_sample_spec *spec) {$/;"	f
pa_silence_memchunk	sample-util.c	/^pa_memchunk* pa_silence_memchunk(pa_memchunk *c, const pa_sample_spec *spec) {$/;"	f
pa_silence_memchunk_get	sample-util.c	/^pa_memchunk* pa_silence_memchunk_get(pa_silence_cache *cache, pa_mempool *pool, pa_memchunk* ret, const pa_sample_spec *spec, size_t length) {$/;"	f
pa_silence_memory	sample-util.c	/^void* pa_silence_memory(void *p, size_t length, const pa_sample_spec *spec) {$/;"	f
pa_simple_options	protocol-simple.h	/^typedef struct pa_simple_options {$/;"	s
pa_simple_options	protocol-simple.h	/^} pa_simple_options;$/;"	t	typeref:struct:pa_simple_options
pa_simple_options_new	protocol-simple.c	/^pa_simple_options* pa_simple_options_new(void) {$/;"	f
pa_simple_options_parse	protocol-simple.c	/^int pa_simple_options_parse(pa_simple_options *o, pa_core *c, pa_modargs *ma) {$/;"	f
pa_simple_options_ref	protocol-simple.c	/^pa_simple_options* pa_simple_options_ref(pa_simple_options *o) {$/;"	f
pa_simple_options_unref	protocol-simple.c	/^void pa_simple_options_unref(pa_simple_options *o) {$/;"	f
pa_simple_protocol	protocol-simple.c	/^struct pa_simple_protocol {$/;"	s	file:
pa_simple_protocol	protocol-simple.h	/^typedef struct pa_simple_protocol pa_simple_protocol;$/;"	t	typeref:struct:pa_simple_protocol
pa_simple_protocol_connect	protocol-simple.c	/^void pa_simple_protocol_connect(pa_simple_protocol *p, pa_iochannel *io, pa_simple_options *o) {$/;"	f
pa_simple_protocol_disconnect	protocol-simple.c	/^void pa_simple_protocol_disconnect(pa_simple_protocol *p, pa_module *m) {$/;"	f
pa_simple_protocol_get	protocol-simple.c	/^pa_simple_protocol* pa_simple_protocol_get(pa_core *c) {$/;"	f
pa_simple_protocol_ref	protocol-simple.c	/^pa_simple_protocol* pa_simple_protocol_ref(pa_simple_protocol *p) {$/;"	f
pa_simple_protocol_unref	protocol-simple.c	/^void pa_simple_protocol_unref(pa_simple_protocol *p) {$/;"	f
pa_sink	sink.h	/^PA_DECLARE_PUBLIC_CLASS(pa_sink);$/;"	v
pa_sink	sink.h	/^struct pa_sink {$/;"	s
pa_sink	sink.h	/^typedef struct pa_sink pa_sink;$/;"	t	typeref:struct:pa_sink
pa_sink_assert_io_context	sink.h	366;"	d
pa_sink_attach	sink.c	/^void pa_sink_attach(pa_sink *s) {$/;"	f
pa_sink_attach_within_thread	sink.c	/^void pa_sink_attach_within_thread(pa_sink *s) {$/;"	f
pa_sink_check_suspend	sink.c	/^unsigned pa_sink_check_suspend(pa_sink *s) {$/;"	f
pa_sink_detach	sink.c	/^void pa_sink_detach(pa_sink *s) {$/;"	f
pa_sink_detach_within_thread	sink.c	/^void pa_sink_detach_within_thread(pa_sink *s) {$/;"	f
pa_sink_get_fixed_latency	sink.c	/^pa_usec_t pa_sink_get_fixed_latency(pa_sink *s) {$/;"	f
pa_sink_get_latency	sink.c	/^pa_usec_t pa_sink_get_latency(pa_sink *s) {$/;"	f
pa_sink_get_latency_range	sink.c	/^void pa_sink_get_latency_range(pa_sink *s, pa_usec_t *min_latency, pa_usec_t *max_latency) {$/;"	f
pa_sink_get_latency_within_thread	sink.c	/^pa_usec_t pa_sink_get_latency_within_thread(pa_sink *s) {$/;"	f
pa_sink_get_max_request	sink.c	/^size_t pa_sink_get_max_request(pa_sink *s) {$/;"	f
pa_sink_get_max_rewind	sink.c	/^size_t pa_sink_get_max_rewind(pa_sink *s) {$/;"	f
pa_sink_get_mute	sink.c	/^pa_bool_t pa_sink_get_mute(pa_sink *s, pa_bool_t force_refresh) {$/;"	f
pa_sink_get_requested_latency	sink.c	/^pa_usec_t pa_sink_get_requested_latency(pa_sink *s) {$/;"	f
pa_sink_get_requested_latency_within_thread	sink.c	/^pa_usec_t pa_sink_get_requested_latency_within_thread(pa_sink *s) {$/;"	f
pa_sink_get_state	sink.h	323;"	d
pa_sink_get_volume	sink.c	/^const pa_cvolume *pa_sink_get_volume(pa_sink *s, pa_bool_t force_refresh) {$/;"	f
pa_sink_input	sink-input.h	/^PA_DECLARE_PUBLIC_CLASS(pa_sink_input);$/;"	v
pa_sink_input	sink-input.h	/^struct pa_sink_input {$/;"	s
pa_sink_input	sink-input.h	/^typedef struct pa_sink_input pa_sink_input;$/;"	t	typeref:struct:pa_sink_input
pa_sink_input_assert_io_context	sink-input.h	384;"	d
pa_sink_input_cork	sink-input.c	/^void pa_sink_input_cork(pa_sink_input *i, pa_bool_t b) {$/;"	f
pa_sink_input_drop	sink-input.c	/^void pa_sink_input_drop(pa_sink_input *i, size_t nbytes \/* in sink sample spec *\/) {$/;"	f
pa_sink_input_fail_move	sink-input.c	/^void pa_sink_input_fail_move(pa_sink_input *i) {$/;"	f
pa_sink_input_finish_move	sink-input.c	/^int pa_sink_input_finish_move(pa_sink_input *i, pa_sink *dest, pa_bool_t save) {$/;"	f
pa_sink_input_flags	sink-input.h	/^typedef enum pa_sink_input_flags {$/;"	g
pa_sink_input_flags_t	sink-input.h	/^} pa_sink_input_flags_t;$/;"	t	typeref:enum:pa_sink_input_flags
pa_sink_input_get_latency	sink-input.c	/^pa_usec_t pa_sink_input_get_latency(pa_sink_input *i, pa_usec_t *sink_latency) {$/;"	f
pa_sink_input_get_max_request	sink-input.c	/^size_t pa_sink_input_get_max_request(pa_sink_input *i) {$/;"	f
pa_sink_input_get_max_rewind	sink-input.c	/^size_t pa_sink_input_get_max_rewind(pa_sink_input *i) {$/;"	f
pa_sink_input_get_mute	sink-input.c	/^pa_bool_t pa_sink_input_get_mute(pa_sink_input *i) {$/;"	f
pa_sink_input_get_requested_latency	sink-input.c	/^pa_usec_t pa_sink_input_get_requested_latency(pa_sink_input *i) {$/;"	f
pa_sink_input_get_resample_method	sink-input.c	/^pa_resample_method_t pa_sink_input_get_resample_method(pa_sink_input *i) {$/;"	f
pa_sink_input_get_silence	sink-input.c	/^pa_memchunk* pa_sink_input_get_silence(pa_sink_input *i, pa_memchunk *ret) {$/;"	f
pa_sink_input_get_state	sink-input.c	/^pa_sink_input_state_t pa_sink_input_get_state(pa_sink_input *i) {$/;"	f
pa_sink_input_get_volume	sink-input.c	/^pa_cvolume *pa_sink_input_get_volume(pa_sink_input *i, pa_cvolume *volume, pa_bool_t absolute) {$/;"	f
pa_sink_input_kill	sink-input.c	/^void pa_sink_input_kill(pa_sink_input*i) {$/;"	f
pa_sink_input_list_to_string	cli-text.c	/^char *pa_sink_input_list_to_string(pa_core *c) {$/;"	f
pa_sink_input_may_move	sink-input.c	/^pa_bool_t pa_sink_input_may_move(pa_sink_input *i) {$/;"	f
pa_sink_input_may_move_to	sink-input.c	/^pa_bool_t pa_sink_input_may_move_to(pa_sink_input *i, pa_sink *dest) {$/;"	f
pa_sink_input_move_to	sink-input.c	/^int pa_sink_input_move_to(pa_sink_input *i, pa_sink *dest, pa_bool_t save) {$/;"	f
pa_sink_input_new	sink-input.c	/^int pa_sink_input_new($/;"	f
pa_sink_input_new_data	sink-input.h	/^typedef struct pa_sink_input_new_data {$/;"	s
pa_sink_input_new_data	sink-input.h	/^} pa_sink_input_new_data;$/;"	t	typeref:struct:pa_sink_input_new_data
pa_sink_input_new_data_apply_volume_factor	sink-input.c	/^void pa_sink_input_new_data_apply_volume_factor(pa_sink_input_new_data *data, const pa_cvolume *volume_factor) {$/;"	f
pa_sink_input_new_data_apply_volume_factor_sink	sink-input.c	/^void pa_sink_input_new_data_apply_volume_factor_sink(pa_sink_input_new_data *data, const pa_cvolume *volume_factor) {$/;"	f
pa_sink_input_new_data_done	sink-input.c	/^void pa_sink_input_new_data_done(pa_sink_input_new_data *data) {$/;"	f
pa_sink_input_new_data_init	sink-input.c	/^pa_sink_input_new_data* pa_sink_input_new_data_init(pa_sink_input_new_data *data) {$/;"	f
pa_sink_input_new_data_set_channel_map	sink-input.c	/^void pa_sink_input_new_data_set_channel_map(pa_sink_input_new_data *data, const pa_channel_map *map) {$/;"	f
pa_sink_input_new_data_set_muted	sink-input.c	/^void pa_sink_input_new_data_set_muted(pa_sink_input_new_data *data, pa_bool_t mute) {$/;"	f
pa_sink_input_new_data_set_sample_spec	sink-input.c	/^void pa_sink_input_new_data_set_sample_spec(pa_sink_input_new_data *data, const pa_sample_spec *spec) {$/;"	f
pa_sink_input_new_data_set_volume	sink-input.c	/^void pa_sink_input_new_data_set_volume(pa_sink_input_new_data *data, const pa_cvolume *volume) {$/;"	f
pa_sink_input_peek	sink-input.c	/^void pa_sink_input_peek(pa_sink_input *i, size_t slength \/* in sink frames *\/, pa_memchunk *chunk, pa_cvolume *volume) {$/;"	f
pa_sink_input_process_msg	sink-input.c	/^int pa_sink_input_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f
pa_sink_input_process_rewind	sink-input.c	/^void pa_sink_input_process_rewind(pa_sink_input *i, size_t nbytes \/* in sink sample spec *\/) {$/;"	f
pa_sink_input_put	sink-input.c	/^void pa_sink_input_put(pa_sink_input *i) {$/;"	f
pa_sink_input_request_rewind	sink-input.c	/^void pa_sink_input_request_rewind($/;"	f
pa_sink_input_safe_to_remove	sink-input.c	/^pa_bool_t pa_sink_input_safe_to_remove(pa_sink_input *i) {$/;"	f
pa_sink_input_send_event	sink-input.c	/^void pa_sink_input_send_event(pa_sink_input *i, const char *event, pa_proplist *data) {$/;"	f
pa_sink_input_send_event_hook_data	sink-input.h	/^typedef struct pa_sink_input_send_event_hook_data {$/;"	s
pa_sink_input_send_event_hook_data	sink-input.h	/^} pa_sink_input_send_event_hook_data;$/;"	t	typeref:struct:pa_sink_input_send_event_hook_data
pa_sink_input_set_mute	sink-input.c	/^void pa_sink_input_set_mute(pa_sink_input *i, pa_bool_t mute, pa_bool_t save) {$/;"	f
pa_sink_input_set_name	sink-input.c	/^void pa_sink_input_set_name(pa_sink_input *i, const char *name) {$/;"	f
pa_sink_input_set_rate	sink-input.c	/^int pa_sink_input_set_rate(pa_sink_input *i, uint32_t rate) {$/;"	f
pa_sink_input_set_requested_latency	sink-input.c	/^pa_usec_t pa_sink_input_set_requested_latency(pa_sink_input *i, pa_usec_t usec) {$/;"	f
pa_sink_input_set_requested_latency_within_thread	sink-input.c	/^pa_usec_t pa_sink_input_set_requested_latency_within_thread(pa_sink_input *i, pa_usec_t usec) {$/;"	f
pa_sink_input_set_state_within_thread	sink-input.c	/^void pa_sink_input_set_state_within_thread(pa_sink_input *i, pa_sink_input_state_t state) {$/;"	f
pa_sink_input_set_volume	sink-input.c	/^void pa_sink_input_set_volume(pa_sink_input *i, const pa_cvolume *volume, pa_bool_t save, pa_bool_t absolute) {$/;"	f
pa_sink_input_start_move	sink-input.c	/^int pa_sink_input_start_move(pa_sink_input *i) {$/;"	f
pa_sink_input_state	sink-input.h	/^typedef enum pa_sink_input_state {$/;"	g
pa_sink_input_state_t	sink-input.h	/^} pa_sink_input_state_t;$/;"	t	typeref:enum:pa_sink_input_state
pa_sink_input_unlink	sink-input.c	/^void pa_sink_input_unlink(pa_sink_input *i) {$/;"	f
pa_sink_input_update_max_request	sink-input.c	/^void pa_sink_input_update_max_request(pa_sink_input *i, size_t nbytes  \/* in the sink's sample spec *\/) {$/;"	f
pa_sink_input_update_max_rewind	sink-input.c	/^void pa_sink_input_update_max_rewind(pa_sink_input *i, size_t nbytes  \/* in the sink's sample spec *\/) {$/;"	f
pa_sink_input_update_proplist	sink-input.c	/^void pa_sink_input_update_proplist(pa_sink_input *i, pa_update_mode_t mode, pa_proplist *p) {$/;"	f
pa_sink_invalidate_requested_latency	sink.c	/^void pa_sink_invalidate_requested_latency(pa_sink *s, pa_bool_t dynamic) {$/;"	f
pa_sink_linked_by	sink.c	/^unsigned pa_sink_linked_by(pa_sink *s) {$/;"	f
pa_sink_list_to_string	cli-text.c	/^char *pa_sink_list_to_string(pa_core *c) {$/;"	f
pa_sink_message	sink.h	/^typedef enum pa_sink_message {$/;"	g
pa_sink_message_t	sink.h	/^} pa_sink_message_t;$/;"	t	typeref:enum:pa_sink_message
pa_sink_move_all_fail	sink.c	/^void pa_sink_move_all_fail(pa_queue *q) {$/;"	f
pa_sink_move_all_finish	sink.c	/^void pa_sink_move_all_finish(pa_sink *s, pa_queue *q, pa_bool_t save) {$/;"	f
pa_sink_move_all_start	sink.c	/^pa_queue *pa_sink_move_all_start(pa_sink *s, pa_queue *q) {$/;"	f
pa_sink_mute_changed	sink.c	/^void pa_sink_mute_changed(pa_sink *s, pa_bool_t new_muted) {$/;"	f
pa_sink_new	sink.c	/^pa_sink* pa_sink_new($/;"	f
pa_sink_new_data	sink.h	/^typedef struct pa_sink_new_data {$/;"	s
pa_sink_new_data	sink.h	/^} pa_sink_new_data;$/;"	t	typeref:struct:pa_sink_new_data
pa_sink_new_data_done	sink.c	/^void pa_sink_new_data_done(pa_sink_new_data *data) {$/;"	f
pa_sink_new_data_init	sink.c	/^pa_sink_new_data* pa_sink_new_data_init(pa_sink_new_data *data) {$/;"	f
pa_sink_new_data_set_channel_map	sink.c	/^void pa_sink_new_data_set_channel_map(pa_sink_new_data *data, const pa_channel_map *map) {$/;"	f
pa_sink_new_data_set_muted	sink.c	/^void pa_sink_new_data_set_muted(pa_sink_new_data *data, pa_bool_t mute) {$/;"	f
pa_sink_new_data_set_name	sink.c	/^void pa_sink_new_data_set_name(pa_sink_new_data *data, const char *name) {$/;"	f
pa_sink_new_data_set_port	sink.c	/^void pa_sink_new_data_set_port(pa_sink_new_data *data, const char *port) {$/;"	f
pa_sink_new_data_set_sample_spec	sink.c	/^void pa_sink_new_data_set_sample_spec(pa_sink_new_data *data, const pa_sample_spec *spec) {$/;"	f
pa_sink_new_data_set_volume	sink.c	/^void pa_sink_new_data_set_volume(pa_sink_new_data *data, const pa_cvolume *volume) {$/;"	f
pa_sink_process_msg	sink.c	/^int pa_sink_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f
pa_sink_process_rewind	sink.c	/^void pa_sink_process_rewind(pa_sink *s, size_t nbytes) {$/;"	f
pa_sink_put	sink.c	/^void pa_sink_put(pa_sink* s) {$/;"	f
pa_sink_render	sink.c	/^void pa_sink_render(pa_sink*s, size_t length, pa_memchunk *result) {$/;"	f
pa_sink_render_full	sink.c	/^void pa_sink_render_full(pa_sink *s, size_t length, pa_memchunk *result) {$/;"	f
pa_sink_render_into	sink.c	/^void pa_sink_render_into(pa_sink*s, pa_memchunk *target) {$/;"	f
pa_sink_render_into_full	sink.c	/^void pa_sink_render_into_full(pa_sink *s, pa_memchunk *target) {$/;"	f
pa_sink_request_rewind	sink.c	/^void pa_sink_request_rewind(pa_sink*s, size_t nbytes) {$/;"	f
pa_sink_set_asyncmsgq	sink.c	/^void pa_sink_set_asyncmsgq(pa_sink *s, pa_asyncmsgq *q) {$/;"	f
pa_sink_set_description	sink.c	/^void pa_sink_set_description(pa_sink *s, const char *description) {$/;"	f
pa_sink_set_fixed_latency	sink.c	/^void pa_sink_set_fixed_latency(pa_sink *s, pa_usec_t latency) {$/;"	f
pa_sink_set_fixed_latency_within_thread	sink.c	/^void pa_sink_set_fixed_latency_within_thread(pa_sink *s, pa_usec_t latency) {$/;"	f
pa_sink_set_latency_range	sink.c	/^void pa_sink_set_latency_range(pa_sink *s, pa_usec_t min_latency, pa_usec_t max_latency) {$/;"	f
pa_sink_set_latency_range_within_thread	sink.c	/^void pa_sink_set_latency_range_within_thread(pa_sink *s, pa_usec_t min_latency, pa_usec_t max_latency) {$/;"	f
pa_sink_set_max_request	sink.c	/^void pa_sink_set_max_request(pa_sink *s, size_t max_request) {$/;"	f
pa_sink_set_max_request_within_thread	sink.c	/^void pa_sink_set_max_request_within_thread(pa_sink *s, size_t max_request) {$/;"	f
pa_sink_set_max_rewind	sink.c	/^void pa_sink_set_max_rewind(pa_sink *s, size_t max_rewind) {$/;"	f
pa_sink_set_max_rewind_within_thread	sink.c	/^void pa_sink_set_max_rewind_within_thread(pa_sink *s, size_t max_rewind) {$/;"	f
pa_sink_set_mute	sink.c	/^void pa_sink_set_mute(pa_sink *s, pa_bool_t mute, pa_bool_t save) {$/;"	f
pa_sink_set_port	sink.c	/^int pa_sink_set_port(pa_sink *s, const char *name, pa_bool_t save) {$/;"	f
pa_sink_set_rtpoll	sink.c	/^void pa_sink_set_rtpoll(pa_sink *s, pa_rtpoll *p) {$/;"	f
pa_sink_set_soft_volume	sink.c	/^void pa_sink_set_soft_volume(pa_sink *s, const pa_cvolume *volume) {$/;"	f
pa_sink_set_volume	sink.c	/^void pa_sink_set_volume($/;"	f
pa_sink_suspend	sink.c	/^int pa_sink_suspend(pa_sink *s, pa_bool_t suspend, pa_suspend_cause_t cause) {$/;"	f
pa_sink_suspend_all	sink.c	/^int pa_sink_suspend_all(pa_core *c, pa_bool_t suspend, pa_suspend_cause_t cause) {$/;"	f
pa_sink_unlink	sink.c	/^void pa_sink_unlink(pa_sink* s) {$/;"	f
pa_sink_update_flags	sink.c	/^void pa_sink_update_flags(pa_sink *s, pa_sink_flags_t mask, pa_sink_flags_t value) {$/;"	f
pa_sink_update_proplist	sink.c	/^pa_bool_t pa_sink_update_proplist(pa_sink *s, pa_update_mode_t mode, pa_proplist *p) {$/;"	f
pa_sink_update_status	sink.c	/^int pa_sink_update_status(pa_sink*s) {$/;"	f
pa_sink_used_by	sink.c	/^unsigned pa_sink_used_by(pa_sink *s) {$/;"	f
pa_sink_volume_changed	sink.c	/^void pa_sink_volume_changed(pa_sink *s, const pa_cvolume *new_real_volume) {$/;"	f
pa_smoother	time-smoother.c	/^struct pa_smoother {$/;"	s	file:
pa_smoother	time-smoother.h	/^typedef struct pa_smoother pa_smoother;$/;"	t	typeref:struct:pa_smoother
pa_smoother_fix_now	time-smoother.c	/^void pa_smoother_fix_now(pa_smoother *s) {$/;"	f
pa_smoother_free	time-smoother.c	/^void pa_smoother_free(pa_smoother* s) {$/;"	f
pa_smoother_get	time-smoother.c	/^pa_usec_t pa_smoother_get(pa_smoother *s, pa_usec_t x) {$/;"	f
pa_smoother_new	time-smoother.c	/^pa_smoother* pa_smoother_new($/;"	f
pa_smoother_pause	time-smoother.c	/^void pa_smoother_pause(pa_smoother *s, pa_usec_t x) {$/;"	f
pa_smoother_put	time-smoother.c	/^void pa_smoother_put(pa_smoother *s, pa_usec_t x, pa_usec_t y) {$/;"	f
pa_smoother_reset	time-smoother.c	/^void pa_smoother_reset(pa_smoother *s, pa_usec_t time_offset, pa_bool_t paused) {$/;"	f
pa_smoother_resume	time-smoother.c	/^void pa_smoother_resume(pa_smoother *s, pa_usec_t x, pa_bool_t fix_now) {$/;"	f
pa_smoother_set_time_offset	time-smoother.c	/^void pa_smoother_set_time_offset(pa_smoother *s, pa_usec_t offset) {$/;"	f
pa_smoother_translate	time-smoother.c	/^pa_usec_t pa_smoother_translate(pa_smoother *s, pa_usec_t x, pa_usec_t y_delay) {$/;"	f
pa_sndfile_dump_formats	sndfile-util.c	/^void pa_sndfile_dump_formats(void) {$/;"	f
pa_sndfile_format_from_string	sndfile-util.c	/^int pa_sndfile_format_from_string(const char *name) {$/;"	f
pa_sndfile_init_proplist	sndfile-util.c	/^void pa_sndfile_init_proplist(SNDFILE *sf, pa_proplist *p) {$/;"	f
pa_sndfile_read_channel_map	sndfile-util.c	/^int pa_sndfile_read_channel_map(SNDFILE *sf, pa_channel_map *cm) {$/;"	f
pa_sndfile_read_sample_spec	sndfile-util.c	/^int pa_sndfile_read_sample_spec(SNDFILE *sf, pa_sample_spec *ss) {$/;"	f
pa_sndfile_readf_function	sndfile-util.c	/^pa_sndfile_readf_t pa_sndfile_readf_function(const pa_sample_spec *ss) {$/;"	f
pa_sndfile_readf_t	sndfile-util.h	/^typedef sf_count_t (*pa_sndfile_readf_t)(SNDFILE *sndfile, void *ptr, sf_count_t frames);$/;"	t
pa_sndfile_write_channel_map	sndfile-util.c	/^int pa_sndfile_write_channel_map(SNDFILE *sf, pa_channel_map *cm) {$/;"	f
pa_sndfile_write_sample_spec	sndfile-util.c	/^int pa_sndfile_write_sample_spec(SF_INFO *sfi, pa_sample_spec *ss) {$/;"	f
pa_sndfile_writef_function	sndfile-util.c	/^pa_sndfile_writef_t pa_sndfile_writef_function(const pa_sample_spec *ss) {$/;"	f
pa_sndfile_writef_t	sndfile-util.h	/^typedef sf_count_t (*pa_sndfile_writef_t)(SNDFILE *sndfile, const void *ptr, sf_count_t frames);$/;"	t
pa_snprintf	core-util.c	/^size_t pa_snprintf(char *str, size_t size, const char *format, ...) {$/;"	f
pa_socket_address_is_local	socket-util.c	/^pa_bool_t pa_socket_address_is_local(const struct sockaddr *sa) {$/;"	f
pa_socket_client	socket-client.c	/^struct pa_socket_client {$/;"	s	file:
pa_socket_client	socket-client.h	/^typedef struct pa_socket_client pa_socket_client;$/;"	t	typeref:struct:pa_socket_client
pa_socket_client_cb_t	socket-client.h	/^typedef void (*pa_socket_client_cb_t)(pa_socket_client *c, pa_iochannel*io, void *userdata);$/;"	t
pa_socket_client_is_local	socket-client.c	/^pa_bool_t pa_socket_client_is_local(pa_socket_client *c) {$/;"	f
pa_socket_client_new_ipv4	socket-client.c	/^pa_socket_client* pa_socket_client_new_ipv4(pa_mainloop_api *m, uint32_t address, uint16_t port) {$/;"	f
pa_socket_client_new_ipv6	socket-client.c	/^pa_socket_client* pa_socket_client_new_ipv6(pa_mainloop_api *m, uint8_t address[16], uint16_t port) {$/;"	f
pa_socket_client_new_sockaddr	socket-client.c	/^pa_socket_client* pa_socket_client_new_sockaddr(pa_mainloop_api *m, const struct sockaddr *sa, size_t salen) {$/;"	f
pa_socket_client_new_string	socket-client.c	/^pa_socket_client* pa_socket_client_new_string(pa_mainloop_api *m, pa_bool_t use_rtclock, const char*name, uint16_t default_port) {$/;"	f
pa_socket_client_new_unix	socket-client.c	/^pa_socket_client* pa_socket_client_new_unix(pa_mainloop_api *m, const char *filename) {$/;"	f
pa_socket_client_ref	socket-client.c	/^pa_socket_client* pa_socket_client_ref(pa_socket_client *c) {$/;"	f
pa_socket_client_set_callback	socket-client.c	/^void pa_socket_client_set_callback(pa_socket_client *c, pa_socket_client_cb_t on_connection, void *userdata) {$/;"	f
pa_socket_client_unref	socket-client.c	/^void pa_socket_client_unref(pa_socket_client *c) {$/;"	f
pa_socket_is_local	socket-util.c	/^pa_bool_t pa_socket_is_local(int fd) {$/;"	f
pa_socket_peer_to_string	socket-util.c	/^void pa_socket_peer_to_string(int fd, char *c, size_t l) {$/;"	f
pa_socket_server	socket-server.c	/^struct pa_socket_server {$/;"	s	file:
pa_socket_server	socket-server.h	/^typedef struct pa_socket_server pa_socket_server;$/;"	t	typeref:struct:pa_socket_server
pa_socket_server_get_address	socket-server.c	/^char *pa_socket_server_get_address(pa_socket_server *s, char *c, size_t l) {$/;"	f
pa_socket_server_new	socket-server.c	/^pa_socket_server* pa_socket_server_new(pa_mainloop_api *m, int fd) {$/;"	f
pa_socket_server_new_ipv4	socket-server.c	/^pa_socket_server* pa_socket_server_new_ipv4(pa_mainloop_api *m, uint32_t address, uint16_t port, const char *tcpwrap_service) {$/;"	f
pa_socket_server_new_ipv4_any	socket-server.c	/^pa_socket_server* pa_socket_server_new_ipv4_any(pa_mainloop_api *m, uint16_t port, const char *tcpwrap_service) {$/;"	f
pa_socket_server_new_ipv4_loopback	socket-server.c	/^pa_socket_server* pa_socket_server_new_ipv4_loopback(pa_mainloop_api *m, uint16_t port, const char *tcpwrap_service) {$/;"	f
pa_socket_server_new_ipv4_string	socket-server.c	/^pa_socket_server* pa_socket_server_new_ipv4_string(pa_mainloop_api *m, const char *name, uint16_t port, const char *tcpwrap_service) {$/;"	f
pa_socket_server_new_ipv6	socket-server.c	/^pa_socket_server* pa_socket_server_new_ipv6(pa_mainloop_api *m, const uint8_t address[16], uint16_t port, const char *tcpwrap_service) {$/;"	f
pa_socket_server_new_ipv6_any	socket-server.c	/^pa_socket_server* pa_socket_server_new_ipv6_any(pa_mainloop_api *m, uint16_t port, const char *tcpwrap_service) {$/;"	f
pa_socket_server_new_ipv6_loopback	socket-server.c	/^pa_socket_server* pa_socket_server_new_ipv6_loopback(pa_mainloop_api *m, uint16_t port, const char *tcpwrap_service) {$/;"	f
pa_socket_server_new_ipv6_string	socket-server.c	/^pa_socket_server* pa_socket_server_new_ipv6_string(pa_mainloop_api *m, const char *name, uint16_t port, const char *tcpwrap_service) {$/;"	f
pa_socket_server_new_unix	socket-server.c	/^pa_socket_server* pa_socket_server_new_unix(pa_mainloop_api *m, const char *filename) {$/;"	f
pa_socket_server_on_connection_cb_t	socket-server.h	/^typedef void (*pa_socket_server_on_connection_cb_t)(pa_socket_server*s, pa_iochannel *io, void *userdata);$/;"	t
pa_socket_server_ref	socket-server.c	/^pa_socket_server* pa_socket_server_ref(pa_socket_server *s) {$/;"	f
pa_socket_server_set_callback	socket-server.c	/^void pa_socket_server_set_callback(pa_socket_server*s, pa_socket_server_on_connection_cb_t on_connection, void *userdata) {$/;"	f
pa_socket_server_unref	socket-server.c	/^void pa_socket_server_unref(pa_socket_server *s) {$/;"	f
pa_socket_set_rcvbuf	socket-util.c	/^int pa_socket_set_rcvbuf(int fd, size_t l) {$/;"	f
pa_socket_set_sndbuf	socket-util.c	/^int pa_socket_set_sndbuf(int fd, size_t l) {$/;"	f
pa_sound_file_load	sound-file.c	/^int pa_sound_file_load($/;"	f
pa_sound_file_too_big_to_cache	sound-file.c	/^int pa_sound_file_too_big_to_cache(const char *fname) {$/;"	f
pa_source	source.h	/^PA_DECLARE_PUBLIC_CLASS(pa_source);$/;"	v
pa_source	source.h	/^struct pa_source {$/;"	s
pa_source	source.h	/^typedef struct pa_source pa_source;$/;"	t	typeref:struct:pa_source
pa_source_assert_io_context	source.h	310;"	d
pa_source_attach	source.c	/^void pa_source_attach(pa_source *s) {$/;"	f
pa_source_attach_within_thread	source.c	/^void pa_source_attach_within_thread(pa_source *s) {$/;"	f
pa_source_check_suspend	source.c	/^unsigned pa_source_check_suspend(pa_source *s) {$/;"	f
pa_source_detach	source.c	/^void pa_source_detach(pa_source *s) {$/;"	f
pa_source_detach_within_thread	source.c	/^void pa_source_detach_within_thread(pa_source *s) {$/;"	f
pa_source_get_fixed_latency	source.c	/^pa_usec_t pa_source_get_fixed_latency(pa_source *s) {$/;"	f
pa_source_get_latency	source.c	/^pa_usec_t pa_source_get_latency(pa_source *s) {$/;"	f
pa_source_get_latency_range	source.c	/^void pa_source_get_latency_range(pa_source *s, pa_usec_t *min_latency, pa_usec_t *max_latency) {$/;"	f
pa_source_get_latency_within_thread	source.c	/^pa_usec_t pa_source_get_latency_within_thread(pa_source *s) {$/;"	f
pa_source_get_max_rewind	source.c	/^size_t pa_source_get_max_rewind(pa_source *s) {$/;"	f
pa_source_get_mute	source.c	/^pa_bool_t pa_source_get_mute(pa_source *s, pa_bool_t force_refresh) {$/;"	f
pa_source_get_requested_latency	source.c	/^pa_usec_t pa_source_get_requested_latency(pa_source *s) {$/;"	f
pa_source_get_requested_latency_within_thread	source.c	/^pa_usec_t pa_source_get_requested_latency_within_thread(pa_source *s) {$/;"	f
pa_source_get_state	source.h	280;"	d
pa_source_get_volume	source.c	/^const pa_cvolume *pa_source_get_volume(pa_source *s, pa_bool_t force_refresh) {$/;"	f
pa_source_invalidate_requested_latency	source.c	/^void pa_source_invalidate_requested_latency(pa_source *s, pa_bool_t dynamic) {$/;"	f
pa_source_linked_by	source.c	/^unsigned pa_source_linked_by(pa_source *s) {$/;"	f
pa_source_list_to_string	cli-text.c	/^char *pa_source_list_to_string(pa_core *c) {$/;"	f
pa_source_message	source.h	/^typedef enum pa_source_message {$/;"	g
pa_source_message_t	source.h	/^} pa_source_message_t;$/;"	t	typeref:enum:pa_source_message
pa_source_move_all_fail	source.c	/^void pa_source_move_all_fail(pa_queue *q) {$/;"	f
pa_source_move_all_finish	source.c	/^void pa_source_move_all_finish(pa_source *s, pa_queue *q, pa_bool_t save) {$/;"	f
pa_source_move_all_start	source.c	/^pa_queue *pa_source_move_all_start(pa_source *s, pa_queue *q) {$/;"	f
pa_source_mute_changed	source.c	/^void pa_source_mute_changed(pa_source *s, pa_bool_t new_muted) {$/;"	f
pa_source_new	source.c	/^pa_source* pa_source_new($/;"	f
pa_source_new_data	source.h	/^typedef struct pa_source_new_data {$/;"	s
pa_source_new_data	source.h	/^} pa_source_new_data;$/;"	t	typeref:struct:pa_source_new_data
pa_source_new_data_done	source.c	/^void pa_source_new_data_done(pa_source_new_data *data) {$/;"	f
pa_source_new_data_init	source.c	/^pa_source_new_data* pa_source_new_data_init(pa_source_new_data *data) {$/;"	f
pa_source_new_data_set_channel_map	source.c	/^void pa_source_new_data_set_channel_map(pa_source_new_data *data, const pa_channel_map *map) {$/;"	f
pa_source_new_data_set_muted	source.c	/^void pa_source_new_data_set_muted(pa_source_new_data *data, pa_bool_t mute) {$/;"	f
pa_source_new_data_set_name	source.c	/^void pa_source_new_data_set_name(pa_source_new_data *data, const char *name) {$/;"	f
pa_source_new_data_set_port	source.c	/^void pa_source_new_data_set_port(pa_source_new_data *data, const char *port) {$/;"	f
pa_source_new_data_set_sample_spec	source.c	/^void pa_source_new_data_set_sample_spec(pa_source_new_data *data, const pa_sample_spec *spec) {$/;"	f
pa_source_new_data_set_volume	source.c	/^void pa_source_new_data_set_volume(pa_source_new_data *data, const pa_cvolume *volume) {$/;"	f
pa_source_output	source-output.h	/^PA_DECLARE_PUBLIC_CLASS(pa_source_output);$/;"	v
pa_source_output	source-output.h	/^struct pa_source_output {$/;"	s
pa_source_output	source-output.h	/^typedef struct pa_source_output pa_source_output;$/;"	t	typeref:struct:pa_source_output
pa_source_output_assert_io_context	source-output.h	291;"	d
pa_source_output_cork	source-output.c	/^void pa_source_output_cork(pa_source_output *o, pa_bool_t b) {$/;"	f
pa_source_output_fail_move	source-output.c	/^void pa_source_output_fail_move(pa_source_output *o) {$/;"	f
pa_source_output_finish_move	source-output.c	/^int pa_source_output_finish_move(pa_source_output *o, pa_source *dest, pa_bool_t save) {$/;"	f
pa_source_output_flags	source-output.h	/^typedef enum pa_source_output_flags {$/;"	g
pa_source_output_flags_t	source-output.h	/^} pa_source_output_flags_t;$/;"	t	typeref:enum:pa_source_output_flags
pa_source_output_get_latency	source-output.c	/^pa_usec_t pa_source_output_get_latency(pa_source_output *o, pa_usec_t *source_latency) {$/;"	f
pa_source_output_get_max_rewind	source-output.c	/^size_t pa_source_output_get_max_rewind(pa_source_output *o) {$/;"	f
pa_source_output_get_requested_latency	source-output.c	/^pa_usec_t pa_source_output_get_requested_latency(pa_source_output *o) {$/;"	f
pa_source_output_get_resample_method	source-output.c	/^pa_resample_method_t pa_source_output_get_resample_method(pa_source_output *o) {$/;"	f
pa_source_output_get_state	source-output.h	275;"	d
pa_source_output_kill	source-output.c	/^void pa_source_output_kill(pa_source_output*o) {$/;"	f
pa_source_output_list_to_string	cli-text.c	/^char *pa_source_output_list_to_string(pa_core *c) {$/;"	f
pa_source_output_may_move	source-output.c	/^pa_bool_t pa_source_output_may_move(pa_source_output *o) {$/;"	f
pa_source_output_may_move_to	source-output.c	/^pa_bool_t pa_source_output_may_move_to(pa_source_output *o, pa_source *dest) {$/;"	f
pa_source_output_move_to	source-output.c	/^int pa_source_output_move_to(pa_source_output *o, pa_source *dest, pa_bool_t save) {$/;"	f
pa_source_output_new	source-output.c	/^int pa_source_output_new($/;"	f
pa_source_output_new_data	source-output.h	/^typedef struct pa_source_output_new_data {$/;"	s
pa_source_output_new_data	source-output.h	/^} pa_source_output_new_data;$/;"	t	typeref:struct:pa_source_output_new_data
pa_source_output_new_data_done	source-output.c	/^void pa_source_output_new_data_done(pa_source_output_new_data *data) {$/;"	f
pa_source_output_new_data_init	source-output.c	/^pa_source_output_new_data* pa_source_output_new_data_init(pa_source_output_new_data *data) {$/;"	f
pa_source_output_new_data_set_channel_map	source-output.c	/^void pa_source_output_new_data_set_channel_map(pa_source_output_new_data *data, const pa_channel_map *map) {$/;"	f
pa_source_output_new_data_set_sample_spec	source-output.c	/^void pa_source_output_new_data_set_sample_spec(pa_source_output_new_data *data, const pa_sample_spec *spec) {$/;"	f
pa_source_output_process_msg	source-output.c	/^int pa_source_output_process_msg(pa_msgobject *mo, int code, void *userdata, int64_t offset, pa_memchunk* chunk) {$/;"	f
pa_source_output_process_rewind	source-output.c	/^void pa_source_output_process_rewind(pa_source_output *o, size_t nbytes \/* in source sample spec *\/) {$/;"	f
pa_source_output_push	source-output.c	/^void pa_source_output_push(pa_source_output *o, const pa_memchunk *chunk) {$/;"	f
pa_source_output_put	source-output.c	/^void pa_source_output_put(pa_source_output *o) {$/;"	f
pa_source_output_send_event	source-output.c	/^void pa_source_output_send_event(pa_source_output *o, const char *event, pa_proplist *data) {$/;"	f
pa_source_output_send_event_hook_data	source-output.h	/^typedef struct pa_source_output_send_event_hook_data {$/;"	s
pa_source_output_send_event_hook_data	source-output.h	/^} pa_source_output_send_event_hook_data;$/;"	t	typeref:struct:pa_source_output_send_event_hook_data
pa_source_output_set_name	source-output.c	/^void pa_source_output_set_name(pa_source_output *o, const char *name) {$/;"	f
pa_source_output_set_rate	source-output.c	/^int pa_source_output_set_rate(pa_source_output *o, uint32_t rate) {$/;"	f
pa_source_output_set_requested_latency	source-output.c	/^pa_usec_t pa_source_output_set_requested_latency(pa_source_output *o, pa_usec_t usec) {$/;"	f
pa_source_output_set_requested_latency_within_thread	source-output.c	/^pa_usec_t pa_source_output_set_requested_latency_within_thread(pa_source_output *o, pa_usec_t usec) {$/;"	f
pa_source_output_set_state_within_thread	source-output.c	/^void pa_source_output_set_state_within_thread(pa_source_output *o, pa_source_output_state_t state) {$/;"	f
pa_source_output_start_move	source-output.c	/^int pa_source_output_start_move(pa_source_output *o) {$/;"	f
pa_source_output_state	source-output.h	/^typedef enum pa_source_output_state {$/;"	g
pa_source_output_state_t	source-output.h	/^} pa_source_output_state_t;$/;"	t	typeref:enum:pa_source_output_state
pa_source_output_unlink	source-output.c	/^void pa_source_output_unlink(pa_source_output*o) {$/;"	f
pa_source_output_update_max_rewind	source-output.c	/^void pa_source_output_update_max_rewind(pa_source_output *o, size_t nbytes  \/* in the source's sample spec *\/) {$/;"	f
pa_source_output_update_proplist	source-output.c	/^void pa_source_output_update_proplist(pa_source_output *o, pa_update_mode_t mode, pa_proplist *p) {$/;"	f
pa_source_post	source.c	/^void pa_source_post(pa_source*s, const pa_memchunk *chunk) {$/;"	f
pa_source_post_direct	source.c	/^void pa_source_post_direct(pa_source*s, pa_source_output *o, const pa_memchunk *chunk) {$/;"	f
pa_source_process_msg	source.c	/^int pa_source_process_msg(pa_msgobject *object, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f
pa_source_process_rewind	source.c	/^void pa_source_process_rewind(pa_source *s, size_t nbytes) {$/;"	f
pa_source_put	source.c	/^void pa_source_put(pa_source *s) {$/;"	f
pa_source_set_asyncmsgq	source.c	/^void pa_source_set_asyncmsgq(pa_source *s, pa_asyncmsgq *q) {$/;"	f
pa_source_set_description	source.c	/^void pa_source_set_description(pa_source *s, const char *description) {$/;"	f
pa_source_set_fixed_latency	source.c	/^void pa_source_set_fixed_latency(pa_source *s, pa_usec_t latency) {$/;"	f
pa_source_set_fixed_latency_within_thread	source.c	/^void pa_source_set_fixed_latency_within_thread(pa_source *s, pa_usec_t latency) {$/;"	f
pa_source_set_latency_range	source.c	/^void pa_source_set_latency_range(pa_source *s, pa_usec_t min_latency, pa_usec_t max_latency) {$/;"	f
pa_source_set_latency_range_within_thread	source.c	/^void pa_source_set_latency_range_within_thread(pa_source *s, pa_usec_t min_latency, pa_usec_t max_latency) {$/;"	f
pa_source_set_max_rewind	source.c	/^void pa_source_set_max_rewind(pa_source *s, size_t max_rewind) {$/;"	f
pa_source_set_max_rewind_within_thread	source.c	/^void pa_source_set_max_rewind_within_thread(pa_source *s, size_t max_rewind) {$/;"	f
pa_source_set_mute	source.c	/^void pa_source_set_mute(pa_source *s, pa_bool_t mute, pa_bool_t save) {$/;"	f
pa_source_set_port	source.c	/^int pa_source_set_port(pa_source *s, const char *name, pa_bool_t save) {$/;"	f
pa_source_set_rtpoll	source.c	/^void pa_source_set_rtpoll(pa_source *s, pa_rtpoll *p) {$/;"	f
pa_source_set_soft_volume	source.c	/^void pa_source_set_soft_volume(pa_source *s, const pa_cvolume *volume) {$/;"	f
pa_source_set_volume	source.c	/^void pa_source_set_volume($/;"	f
pa_source_suspend	source.c	/^int pa_source_suspend(pa_source *s, pa_bool_t suspend, pa_suspend_cause_t cause) {$/;"	f
pa_source_suspend_all	source.c	/^int pa_source_suspend_all(pa_core *c, pa_bool_t suspend, pa_suspend_cause_t cause) {$/;"	f
pa_source_sync_suspend	source.c	/^int pa_source_sync_suspend(pa_source *s) {$/;"	f
pa_source_unlink	source.c	/^void pa_source_unlink(pa_source *s) {$/;"	f
pa_source_update_flags	source.c	/^void pa_source_update_flags(pa_source *s, pa_source_flags_t mask, pa_source_flags_t value) {$/;"	f
pa_source_update_proplist	source.c	/^pa_bool_t pa_source_update_proplist(pa_source *s, pa_update_mode_t mode, pa_proplist *p) {$/;"	f
pa_source_update_status	source.c	/^int pa_source_update_status(pa_source*s) {$/;"	f
pa_source_used_by	source.c	/^unsigned pa_source_used_by(pa_source *s) {$/;"	f
pa_source_volume_changed	source.c	/^void pa_source_volume_changed(pa_source *s, const pa_cvolume *new_volume) {$/;"	f
pa_split	core-util.c	/^char *pa_split(const char *c, const char *delimiter, const char**state) {$/;"	f
pa_split_spaces	core-util.c	/^char *pa_split_spaces(const char *c, const char **state) {$/;"	f
pa_split_spaces_strv	core-util.c	/^char **pa_split_spaces_strv(const char *s) {$/;"	f
pa_sprintf_malloc	core-util.c	/^char *pa_sprintf_malloc(const char *format, ...) {$/;"	f
pa_start_child_for_read	start-child.c	/^int pa_start_child_for_read(const char *name, const char *argv1, pid_t *pid) {$/;"	f
pa_startswith	core-util.c	/^pa_bool_t pa_startswith(const char *s, const char *pfx) {$/;"	f
pa_state_path	core-util.c	/^char *pa_state_path(const char *fn, pa_bool_t appendmid) {$/;"	f
pa_static_mutex	mutex.h	/^typedef struct pa_static_mutex {$/;"	s
pa_static_mutex	mutex.h	/^} pa_static_mutex;$/;"	t	typeref:struct:pa_static_mutex
pa_static_mutex_get	mutex-posix.c	/^pa_mutex* pa_static_mutex_get(pa_static_mutex *s, pa_bool_t recursive, pa_bool_t inherit_priority) {$/;"	f
pa_static_semaphore	semaphore.h	/^typedef struct pa_static_semaphore {$/;"	s
pa_static_semaphore	semaphore.h	/^} pa_static_semaphore;$/;"	t	typeref:struct:pa_static_semaphore
pa_static_semaphore_get	semaphore-posix.c	/^pa_semaphore* pa_static_semaphore_get(pa_static_semaphore *s, unsigned value) {$/;"	f
pa_stdio_acquire	sioman.c	/^int pa_stdio_acquire(void) {$/;"	f
pa_stdio_release	sioman.c	/^void pa_stdio_release(void) {$/;"	f
pa_strbuf	strbuf.c	/^struct pa_strbuf {$/;"	s	file:
pa_strbuf	strbuf.h	/^typedef struct pa_strbuf pa_strbuf;$/;"	t	typeref:struct:pa_strbuf
pa_strbuf_free	strbuf.c	/^void pa_strbuf_free(pa_strbuf *sb) {$/;"	f
pa_strbuf_isempty	strbuf.c	/^pa_bool_t pa_strbuf_isempty(pa_strbuf *sb) {$/;"	f
pa_strbuf_new	strbuf.c	/^pa_strbuf *pa_strbuf_new(void) {$/;"	f
pa_strbuf_printf	strbuf.c	/^size_t pa_strbuf_printf(pa_strbuf *sb, const char *format, ...) {$/;"	f
pa_strbuf_putc	strbuf.c	/^void pa_strbuf_putc(pa_strbuf *sb, char c) {$/;"	f
pa_strbuf_puts	strbuf.c	/^void pa_strbuf_puts(pa_strbuf *sb, const char *t) {$/;"	f
pa_strbuf_putsn	strbuf.c	/^void pa_strbuf_putsn(pa_strbuf *sb, const char *t, size_t l) {$/;"	f
pa_strbuf_tostring	strbuf.c	/^char *pa_strbuf_tostring(pa_strbuf *sb) {$/;"	f
pa_strbuf_tostring_free	strbuf.c	/^char *pa_strbuf_tostring_free(pa_strbuf *sb) {$/;"	f
pa_strempty	core-util.h	/^static inline const char *pa_strempty(const char *x) {$/;"	f
pa_streq	core-util.h	203;"	d
pa_strip_nl	core-util.c	/^char* pa_strip_nl(char *s) {$/;"	f
pa_strlcpy	core-util.c	/^char *pa_strlcpy(char *b, const char *s, size_t l) {$/;"	f
pa_strlist	strlist.c	/^struct pa_strlist {$/;"	s	file:
pa_strlist	strlist.h	/^typedef struct pa_strlist pa_strlist;$/;"	t	typeref:struct:pa_strlist
pa_strlist_data	strlist.c	/^const char *pa_strlist_data(pa_strlist *s) {$/;"	f
pa_strlist_free	strlist.c	/^void pa_strlist_free(pa_strlist *l) {$/;"	f
pa_strlist_next	strlist.c	/^pa_strlist *pa_strlist_next(pa_strlist *s) {$/;"	f
pa_strlist_parse	strlist.c	/^pa_strlist* pa_strlist_parse(const char *s) {$/;"	f
pa_strlist_pop	strlist.c	/^pa_strlist* pa_strlist_pop(pa_strlist *l, char **s) {$/;"	f
pa_strlist_prepend	strlist.c	/^pa_strlist* pa_strlist_prepend(pa_strlist *l, const char *s) {$/;"	f
pa_strlist_remove	strlist.c	/^pa_strlist* pa_strlist_remove(pa_strlist *l, const char *s) {$/;"	f
pa_strlist_reverse	strlist.c	/^pa_strlist *pa_strlist_reverse(pa_strlist *l) {$/;"	f
pa_strlist_tostring	strlist.c	/^char *pa_strlist_tostring(pa_strlist *l) {$/;"	f
pa_strna	core-util.h	/^static inline const char *pa_strna(const char *x) {$/;"	f
pa_strnull	core-util.h	/^static inline const char *pa_strnull(const char *x) {$/;"	f
pa_subscription	core-subscribe.c	/^struct pa_subscription {$/;"	s	file:
pa_subscription	core-subscribe.h	/^typedef struct pa_subscription pa_subscription;$/;"	t	typeref:struct:pa_subscription
pa_subscription_cb_t	core-subscribe.h	/^typedef void (*pa_subscription_cb_t)(pa_core *c, pa_subscription_event_type_t t, uint32_t idx, void *userdata);$/;"	t
pa_subscription_event	core-subscribe.c	/^struct pa_subscription_event {$/;"	s	file:
pa_subscription_event	core-subscribe.h	/^typedef struct pa_subscription_event pa_subscription_event;$/;"	t	typeref:struct:pa_subscription_event
pa_subscription_free	core-subscribe.c	/^void pa_subscription_free(pa_subscription*s) {$/;"	f
pa_subscription_free_all	core-subscribe.c	/^void pa_subscription_free_all(pa_core *c) {$/;"	f
pa_subscription_new	core-subscribe.c	/^pa_subscription* pa_subscription_new(pa_core *c, pa_subscription_mask_t m, pa_subscription_cb_t callback, void *userdata) {$/;"	f
pa_subscription_post	core-subscribe.c	/^void pa_subscription_post(pa_core *c, pa_subscription_event_type_t t, uint32_t idx) {$/;"	f
pa_suspend_cause	core.h	/^typedef enum pa_suspend_cause {$/;"	g
pa_suspend_cause_t	core.h	/^} pa_suspend_cause_t;$/;"	t	typeref:enum:pa_suspend_cause
pa_tagstruct	tagstruct.c	/^struct pa_tagstruct {$/;"	s	file:
pa_tagstruct	tagstruct.h	/^typedef struct pa_tagstruct pa_tagstruct;$/;"	t	typeref:struct:pa_tagstruct
pa_tagstruct_data	tagstruct.c	/^const uint8_t* pa_tagstruct_data(pa_tagstruct*t, size_t *l) {$/;"	f
pa_tagstruct_eof	tagstruct.c	/^int pa_tagstruct_eof(pa_tagstruct*t) {$/;"	f
pa_tagstruct_free	tagstruct.c	/^void pa_tagstruct_free(pa_tagstruct*t) {$/;"	f
pa_tagstruct_free_data	tagstruct.c	/^uint8_t* pa_tagstruct_free_data(pa_tagstruct*t, size_t *l) {$/;"	f
pa_tagstruct_get	tagstruct.c	/^int pa_tagstruct_get(pa_tagstruct *t, ...) {$/;"	f
pa_tagstruct_get_arbitrary	tagstruct.c	/^int pa_tagstruct_get_arbitrary(pa_tagstruct *t, const void **p, size_t length) {$/;"	f
pa_tagstruct_get_boolean	tagstruct.c	/^int pa_tagstruct_get_boolean(pa_tagstruct*t, pa_bool_t *b) {$/;"	f
pa_tagstruct_get_channel_map	tagstruct.c	/^int pa_tagstruct_get_channel_map(pa_tagstruct *t, pa_channel_map *map) {$/;"	f
pa_tagstruct_get_cvolume	tagstruct.c	/^int pa_tagstruct_get_cvolume(pa_tagstruct *t, pa_cvolume *cvolume) {$/;"	f
pa_tagstruct_get_proplist	tagstruct.c	/^int pa_tagstruct_get_proplist(pa_tagstruct *t, pa_proplist *p) {$/;"	f
pa_tagstruct_get_sample_spec	tagstruct.c	/^int pa_tagstruct_get_sample_spec(pa_tagstruct *t, pa_sample_spec *ss) {$/;"	f
pa_tagstruct_get_timeval	tagstruct.c	/^int pa_tagstruct_get_timeval(pa_tagstruct*t, struct timeval *tv) {$/;"	f
pa_tagstruct_get_usec	tagstruct.c	/^int pa_tagstruct_get_usec(pa_tagstruct*t, pa_usec_t *u) {$/;"	f
pa_tagstruct_get_volume	tagstruct.c	/^int pa_tagstruct_get_volume(pa_tagstruct*t, pa_volume_t *vol) {$/;"	f
pa_tagstruct_gets	tagstruct.c	/^int pa_tagstruct_gets(pa_tagstruct*t, const char **s) {$/;"	f
pa_tagstruct_gets64	tagstruct.c	/^int pa_tagstruct_gets64(pa_tagstruct*t, int64_t *u) {$/;"	f
pa_tagstruct_getu32	tagstruct.c	/^int pa_tagstruct_getu32(pa_tagstruct*t, uint32_t *i) {$/;"	f
pa_tagstruct_getu64	tagstruct.c	/^int pa_tagstruct_getu64(pa_tagstruct*t, uint64_t *u) {$/;"	f
pa_tagstruct_getu8	tagstruct.c	/^int pa_tagstruct_getu8(pa_tagstruct*t, uint8_t *c) {$/;"	f
pa_tagstruct_new	tagstruct.c	/^pa_tagstruct *pa_tagstruct_new(const uint8_t* data, size_t length) {$/;"	f
pa_tagstruct_put	tagstruct.c	/^void pa_tagstruct_put(pa_tagstruct *t, ...) {$/;"	f
pa_tagstruct_put_arbitrary	tagstruct.c	/^void pa_tagstruct_put_arbitrary(pa_tagstruct *t, const void *p, size_t length) {$/;"	f
pa_tagstruct_put_boolean	tagstruct.c	/^void pa_tagstruct_put_boolean(pa_tagstruct*t, pa_bool_t b) {$/;"	f
pa_tagstruct_put_channel_map	tagstruct.c	/^void pa_tagstruct_put_channel_map(pa_tagstruct *t, const pa_channel_map *map) {$/;"	f
pa_tagstruct_put_cvolume	tagstruct.c	/^void pa_tagstruct_put_cvolume(pa_tagstruct *t, const pa_cvolume *cvolume) {$/;"	f
pa_tagstruct_put_proplist	tagstruct.c	/^void pa_tagstruct_put_proplist(pa_tagstruct *t, pa_proplist *p) {$/;"	f
pa_tagstruct_put_sample_spec	tagstruct.c	/^void pa_tagstruct_put_sample_spec(pa_tagstruct *t, const pa_sample_spec *ss) {$/;"	f
pa_tagstruct_put_timeval	tagstruct.c	/^void pa_tagstruct_put_timeval(pa_tagstruct*t, const struct timeval *tv) {$/;"	f
pa_tagstruct_put_usec	tagstruct.c	/^void pa_tagstruct_put_usec(pa_tagstruct*t, pa_usec_t u) {$/;"	f
pa_tagstruct_put_volume	tagstruct.c	/^void pa_tagstruct_put_volume(pa_tagstruct *t, pa_volume_t vol) {$/;"	f
pa_tagstruct_puts	tagstruct.c	/^void pa_tagstruct_puts(pa_tagstruct*t, const char *s) {$/;"	f
pa_tagstruct_puts64	tagstruct.c	/^void pa_tagstruct_puts64(pa_tagstruct*t, int64_t u) {$/;"	f
pa_tagstruct_putu32	tagstruct.c	/^void pa_tagstruct_putu32(pa_tagstruct*t, uint32_t i) {$/;"	f
pa_tagstruct_putu64	tagstruct.c	/^void pa_tagstruct_putu64(pa_tagstruct*t, uint64_t u) {$/;"	f
pa_tagstruct_putu8	tagstruct.c	/^void pa_tagstruct_putu8(pa_tagstruct*t, uint8_t c) {$/;"	f
pa_thread	thread-posix.c	/^struct pa_thread {$/;"	s	file:
pa_thread	thread-win32.c	/^struct pa_thread {$/;"	s	file:
pa_thread	thread.h	/^typedef struct pa_thread pa_thread;$/;"	t	typeref:struct:pa_thread
pa_thread_free	thread-posix.c	/^void pa_thread_free(pa_thread *t) {$/;"	f
pa_thread_free	thread-win32.c	/^void pa_thread_free(pa_thread *t) {$/;"	f
pa_thread_func_t	thread.h	/^typedef void (*pa_thread_func_t) (void *userdata);$/;"	t
pa_thread_get_data	thread-posix.c	/^void* pa_thread_get_data(pa_thread *t) {$/;"	f
pa_thread_is_running	thread-posix.c	/^int pa_thread_is_running(pa_thread *t) {$/;"	f
pa_thread_is_running	thread-win32.c	/^int pa_thread_is_running(pa_thread *t) {$/;"	f
pa_thread_join	thread-posix.c	/^int pa_thread_join(pa_thread *t) {$/;"	f
pa_thread_join	thread-win32.c	/^int pa_thread_join(pa_thread *t) {$/;"	f
pa_thread_mq	thread-mq.h	/^typedef struct pa_thread_mq {$/;"	s
pa_thread_mq	thread-mq.h	/^} pa_thread_mq;$/;"	t	typeref:struct:pa_thread_mq
pa_thread_mq_done	thread-mq.c	/^void pa_thread_mq_done(pa_thread_mq *q) {$/;"	f
pa_thread_mq_get	thread-mq.c	/^pa_thread_mq *pa_thread_mq_get(void) {$/;"	f
pa_thread_mq_init	thread-mq.c	/^void pa_thread_mq_init(pa_thread_mq *q, pa_mainloop_api *mainloop, pa_rtpoll *rtpoll) {$/;"	f
pa_thread_mq_install	thread-mq.c	/^void pa_thread_mq_install(pa_thread_mq *q) {$/;"	f
pa_thread_new	thread-posix.c	/^pa_thread* pa_thread_new(pa_thread_func_t thread_func, void *userdata) {$/;"	f
pa_thread_new	thread-win32.c	/^pa_thread* pa_thread_new(pa_thread_func_t thread_func, void *userdata) {$/;"	f
pa_thread_self	thread-posix.c	/^pa_thread* pa_thread_self(void) {$/;"	f
pa_thread_self	thread-win32.c	/^pa_thread* pa_thread_self(void) {$/;"	f
pa_thread_set_data	thread-posix.c	/^void pa_thread_set_data(pa_thread *t, void *userdata) {$/;"	f
pa_thread_yield	thread-posix.c	/^void pa_thread_yield(void) {$/;"	f
pa_thread_yield	thread-win32.c	/^void pa_thread_yield(void) {$/;"	f
pa_timespec_load	core-rtclock.c	/^pa_usec_t pa_timespec_load(const struct timespec *ts) {$/;"	f
pa_timespec_store	core-rtclock.c	/^struct timespec* pa_timespec_store(struct timespec *ts, pa_usec_t v) {$/;"	f
pa_timeval_rtstore	core-rtclock.c	/^struct timeval* pa_timeval_rtstore(struct timeval *tv, pa_usec_t v, pa_bool_t rtclock) {$/;"	f
pa_tls	thread-posix.c	/^struct pa_tls {$/;"	s	file:
pa_tls	thread-win32.c	/^struct pa_tls {$/;"	s	file:
pa_tls	thread.h	/^typedef struct pa_tls pa_tls;$/;"	t	typeref:struct:pa_tls
pa_tls_free	thread-posix.c	/^void pa_tls_free(pa_tls *t) {$/;"	f
pa_tls_free	thread-win32.c	/^void pa_tls_free(pa_tls *t) {$/;"	f
pa_tls_get	thread-posix.c	/^void *pa_tls_get(pa_tls *t) {$/;"	f
pa_tls_get	thread-win32.c	/^void *pa_tls_get(pa_tls *t) {$/;"	f
pa_tls_monitor	thread-win32.c	/^struct pa_tls_monitor {$/;"	s	file:
pa_tls_new	thread-posix.c	/^pa_tls* pa_tls_new(pa_free_cb_t free_cb) {$/;"	f
pa_tls_new	thread-win32.c	/^pa_tls* pa_tls_new(pa_free_cb_t free_cb) {$/;"	f
pa_tls_set	thread-posix.c	/^void *pa_tls_set(pa_tls *t, void *userdata) {$/;"	f
pa_tls_set	thread-win32.c	/^void *pa_tls_set(pa_tls *t, void *userdata) {$/;"	f
pa_tokenizer	tokenizer.h	/^typedef struct pa_tokenizer pa_tokenizer;$/;"	t	typeref:struct:pa_tokenizer
pa_tokenizer_free	tokenizer.c	/^void pa_tokenizer_free(pa_tokenizer *t) {$/;"	f
pa_tokenizer_get	tokenizer.c	/^const char *pa_tokenizer_get(pa_tokenizer *t, unsigned i) {$/;"	f
pa_tokenizer_new	tokenizer.c	/^pa_tokenizer* pa_tokenizer_new(const char *s, unsigned args) {$/;"	f
pa_truncate_utf8	core-util.c	/^char *pa_truncate_utf8(char *c, size_t l) {$/;"	f
pa_uid_in_group	core-util.c	/^int pa_uid_in_group(uid_t uid, const char *name) {$/;"	f
pa_uint8_vector	vector.h	/^typedef union pa_uint8_vector {$/;"	u
pa_uint8_vector_t	vector.h	/^} pa_uint8_vector_t;$/;"	t	typeref:union:pa_uint8_vector
pa_ulog2	core-util.h	/^static inline unsigned pa_ulog2(unsigned n) {$/;"	f
pa_uname_string	core-util.c	/^char *pa_uname_string(void) {$/;"	f
pa_unblock_sigs	core-util.c	/^int pa_unblock_sigs(int except, ...) {$/;"	f
pa_unblock_sigsv	core-util.c	/^int pa_unblock_sigsv(const int except[]) {$/;"	f
pa_unescape	core-util.c	/^char *pa_unescape(char *p) {$/;"	f
pa_unix_socket_is_stale	socket-util.c	/^int pa_unix_socket_is_stale(const char *fn) {$/;"	f
pa_unix_socket_remove_stale	socket-util.c	/^int pa_unix_socket_remove_stale(const char *fn) {$/;"	f
pa_unlock_lockfile	core-util.c	/^int pa_unlock_lockfile(const char *fn, int fd) {$/;"	f
pa_unset_env_recorded	core-util.c	/^void pa_unset_env_recorded(void) {$/;"	f
pa_usec_to_bytes_round_up	sample-util.c	/^size_t pa_usec_to_bytes_round_up(pa_usec_t t, const pa_sample_spec *spec) {$/;"	f
pa_v16qi	vector.h	/^typedef uint8_t pa_v16qi __attribute__ ((vector_size (PA_UINT8_VECTOR_SIZE * sizeof(uint8_t))));$/;"	t
pa_v4sf	vector.h	/^typedef float pa_v4sf __attribute__ ((vector_size (PA_FLOAT_VECTOR_SIZE * sizeof(float))));$/;"	t
pa_v4si	vector.h	/^typedef int32_t pa_v4si __attribute__ ((vector_size (PA_INT32_VECTOR_SIZE * sizeof(int32_t))));$/;"	t
pa_v8hi	vector.h	/^typedef int16_t pa_v8hi __attribute__ ((vector_size (PA_INT16_VECTOR_SIZE * sizeof(int16_t))));$/;"	t
pa_void_func_t	ltdl-helper.h	/^typedef void (*pa_void_func_t)(void);$/;"	t
pa_volume_alaw_c	svolume_c.c	/^pa_volume_alaw_c (uint8_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_float32ne_c	svolume_c.c	/^pa_volume_float32ne_c (float *samples, float *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_float32re_c	svolume_c.c	/^pa_volume_float32re_c (float *samples, float *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_func_init_arm	svolume_arm.c	/^void pa_volume_func_init_arm (pa_cpu_arm_flag_t flags) {$/;"	f
pa_volume_func_init_mmx	svolume_mmx.c	/^void pa_volume_func_init_mmx (pa_cpu_x86_flag_t flags) {$/;"	f
pa_volume_func_init_sse	svolume_sse.c	/^void pa_volume_func_init_sse (pa_cpu_x86_flag_t flags) {$/;"	f
pa_volume_memchunk	sample-util.c	/^void pa_volume_memchunk($/;"	f
pa_volume_s16ne_arm	svolume_arm.c	/^pa_volume_s16ne_arm (int16_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s16ne_c	svolume_c.c	/^pa_volume_s16ne_c (int16_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s16ne_mmx	svolume_mmx.c	/^pa_volume_s16ne_mmx (int16_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s16ne_sse2	svolume_sse.c	/^pa_volume_s16ne_sse2 (int16_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s16re_c	svolume_c.c	/^pa_volume_s16re_c (int16_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s16re_mmx	svolume_mmx.c	/^pa_volume_s16re_mmx (int16_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s16re_sse2	svolume_sse.c	/^pa_volume_s16re_sse2 (int16_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s24_32ne_c	svolume_c.c	/^pa_volume_s24_32ne_c (uint32_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s24_32re_c	svolume_c.c	/^pa_volume_s24_32re_c (uint32_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s24ne_c	svolume_c.c	/^pa_volume_s24ne_c (uint8_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s24re_c	svolume_c.c	/^pa_volume_s24re_c (uint8_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s32ne_c	svolume_c.c	/^pa_volume_s32ne_c (int32_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_s32re_c	svolume_c.c	/^pa_volume_s32re_c (int32_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_u8_c	svolume_c.c	/^pa_volume_u8_c (uint8_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_volume_ulaw_c	svolume_c.c	/^pa_volume_ulaw_c (uint8_t *samples, int32_t *volumes, unsigned channels, unsigned length)$/;"	f	file:
pa_vsnprintf	core-util.c	/^size_t pa_vsnprintf(char *str, size_t size, const char *format, va_list ap) {$/;"	f
pa_vsprintf_malloc	core-util.c	/^char *pa_vsprintf_malloc(const char *format, va_list ap) {$/;"	f
pa_will_need	core-util.c	/^void *pa_will_need(const void *p, size_t l) {$/;"	f
pa_write	core-util.c	/^ssize_t pa_write(int fd, const void *buf, size_t count, int *type) {$/;"	f
pa_x11_client	x11wrap.c	/^struct pa_x11_client {$/;"	s	file:
pa_x11_client	x11wrap.h	/^typedef struct pa_x11_client pa_x11_client;$/;"	t	typeref:struct:pa_x11_client
pa_x11_client_free	x11wrap.c	/^void pa_x11_client_free(pa_x11_client *c) {$/;"	f
pa_x11_client_new	x11wrap.c	/^pa_x11_client* pa_x11_client_new(pa_x11_wrapper *w, pa_x11_event_cb_t event_cb, pa_x11_kill_cb_t kill_cb, void *userdata) {$/;"	f
pa_x11_del_prop	x11prop.c	/^void pa_x11_del_prop(Display *d, const char *name) {$/;"	f
pa_x11_event_cb_t	x11wrap.h	/^typedef int (*pa_x11_event_cb_t)(pa_x11_wrapper *w, XEvent *e, void *userdata);$/;"	t
pa_x11_get_prop	x11prop.c	/^char* pa_x11_get_prop(Display *d, const char *name, char *p, size_t l) {$/;"	f
pa_x11_internal	x11wrap.c	/^struct pa_x11_internal {$/;"	s	file:
pa_x11_internal	x11wrap.c	/^typedef struct pa_x11_internal pa_x11_internal;$/;"	t	typeref:struct:pa_x11_internal	file:
pa_x11_kill_cb_t	x11wrap.h	/^typedef void (*pa_x11_kill_cb_t)(pa_x11_wrapper *w, void *userdata);$/;"	t
pa_x11_set_prop	x11prop.c	/^void pa_x11_set_prop(Display *d, const char *name, const char *data) {$/;"	f
pa_x11_wrapper	x11wrap.c	/^struct pa_x11_wrapper {$/;"	s	file:
pa_x11_wrapper	x11wrap.h	/^typedef struct pa_x11_wrapper pa_x11_wrapper;$/;"	t	typeref:struct:pa_x11_wrapper
pa_x11_wrapper_get	x11wrap.c	/^pa_x11_wrapper* pa_x11_wrapper_get(pa_core *c, const char *name) {$/;"	f
pa_x11_wrapper_get_display	x11wrap.c	/^Display *pa_x11_wrapper_get_display(pa_x11_wrapper *w) {$/;"	f
pa_x11_wrapper_kill	x11wrap.c	/^void pa_x11_wrapper_kill(pa_x11_wrapper *w) {$/;"	f
pa_x11_wrapper_ref	x11wrap.c	/^pa_x11_wrapper* pa_x11_wrapper_ref(pa_x11_wrapper *w) {$/;"	f
pa_x11_wrapper_unref	x11wrap.c	/^void pa_x11_wrapper_unref(pa_x11_wrapper* w) {$/;"	f
pa_xfreev	core-util.c	/^void pa_xfreev(void**a) {$/;"	f
pa_xstrfreev	core-util.h	/^static inline void pa_xstrfreev(char **a) {$/;"	f
pa_yes_no	core-util.h	/^static inline const char *pa_yes_no(pa_bool_t b) {$/;"	f
pa_zero	macro.h	305;"	d
packet	pstream.c	/^        pa_packet *packet;$/;"	m	struct:pa_pstream::__anon35	file:
packet	pstream.c	/^    pa_packet *packet;$/;"	m	struct:item_info	file:
parent	core.h	/^    pa_msgobject parent;$/;"	m	struct:pa_core
parent	msgobject.h	/^    pa_object parent;$/;"	m	struct:pa_msgobject
parent	play-memblockq.c	/^    pa_msgobject parent;$/;"	m	struct:memblockq_stream	file:
parent	protocol-esound.c	/^    pa_msgobject parent;$/;"	m	struct:connection	file:
parent	protocol-native.c	/^    output_stream parent;$/;"	m	struct:playback_stream	file:
parent	protocol-native.c	/^    output_stream parent;$/;"	m	struct:upload_stream	file:
parent	protocol-native.c	/^    pa_msgobject parent;$/;"	m	struct:output_stream	file:
parent	protocol-native.c	/^    pa_msgobject parent;$/;"	m	struct:pa_native_connection	file:
parent	protocol-native.c	/^    pa_msgobject parent;$/;"	m	struct:record_stream	file:
parent	protocol-simple.c	/^    pa_msgobject parent;$/;"	m	struct:connection	file:
parent	sink-input.h	/^    pa_msgobject parent;$/;"	m	struct:pa_sink_input
parent	sink.h	/^    pa_msgobject parent;$/;"	m	struct:pa_sink
parent	sound-file-stream.c	/^    pa_msgobject parent;$/;"	m	struct:file_stream	file:
parent	source-output.h	/^    pa_msgobject parent;$/;"	m	struct:pa_source_output
parent	source.h	/^    pa_msgobject parent;$/;"	m	struct:pa_source
parse	conf-parser.h	/^    pa_config_parser_cb_t parse; \/* Function that is called to parse the variable's value *\/$/;"	m	struct:pa_config_item
parse	tokenizer.c	/^static void parse(pa_dynarray*a, const char *s, unsigned args) {$/;"	f	file:
parse_host	parseaddr.c	/^static char *parse_host(const char *s, uint16_t *ret_port) {$/;"	f	file:
parse_index	cli-command.c	/^static uint32_t parse_index(const char *n) {$/;"	f	file:
parse_line	conf-parser.c	/^static int parse_line(const char *filename, unsigned line, char **section, const pa_config_item *t, char *l, void *userdata) {$/;"	f	file:
path_or_host	parseaddr.h	/^    char *path_or_host;$/;"	m	struct:pa_parsed_address
pause_time	time-smoother.c	/^    pa_usec_t pause_time;$/;"	m	struct:pa_smoother	file:
paused	time-smoother.c	/^    pa_bool_t paused:1;$/;"	m	struct:pa_smoother	file:
pdispatch	pdispatch.c	/^    pa_pdispatch *pdispatch;$/;"	m	struct:reply_info	file:
pdispatch	protocol-native.c	/^    pa_pdispatch *pdispatch;$/;"	m	struct:pa_native_connection	file:
pdispatch_free	pdispatch.c	/^static void pdispatch_free(pa_pdispatch *pd) {$/;"	f	file:
peaks	resampler.c	/^    } peaks;$/;"	m	struct:pa_resampler	typeref:struct:pa_resampler::__anon38	file:
peaks_init	resampler.c	/^static int peaks_init(pa_resampler*r) {$/;"	f	file:
peaks_resample	resampler.c	/^static void peaks_resample(pa_resampler *r, const pa_memchunk *input, unsigned in_n_frames, pa_memchunk *output, unsigned *out_n_frames) {$/;"	f	file:
peaks_update_rates_or_reset	resampler.c	/^static void peaks_update_rates_or_reset(pa_resampler *r) {$/;"	f	file:
pending	dbus-util.h	/^    DBusPendingCall *pending;$/;"	m	struct:pa_dbus_pending
per_type	memblock.c	/^    } per_type;$/;"	m	struct:pa_memblock	typeref:union:pa_memblock::__anon4	file:
phase_mask	ffmpeg/resample2.c	/^    int phase_mask;$/;"	m	struct:AVResampleContext	file:
phase_shift	ffmpeg/resample2.c	/^    int phase_shift;$/;"	m	struct:AVResampleContext	file:
pid	shm.c	/^    pa_atomic_t pid;$/;"	m	struct:shm_marker	file:
ping	lock-autospawn.c	/^static void ping(void) {$/;"	f	file:
pipe	pipe.c	/^int pipe(int filedes[2]) {$/;"	f
pipe_fd	lock-autospawn.c	/^static int pipe_fd[2] = { -1, -1 };$/;"	v	file:
playback	protocol-esound.c	/^    } playback;$/;"	m	struct:connection	typeref:struct:connection::__anon11	file:
playback	protocol-simple.c	/^    } playback;$/;"	m	struct:connection	typeref:struct:connection::__anon8	file:
playback	protocol-simple.h	/^    pa_bool_t playback:1;$/;"	m	struct:pa_simple_options
playback_stream	protocol-native.c	/^typedef struct playback_stream {$/;"	s	file:
playback_stream	protocol-native.c	/^} playback_stream;$/;"	t	typeref:struct:playback_stream	file:
playback_stream_free	protocol-native.c	/^static void playback_stream_free(pa_object* o) {$/;"	f	file:
playback_stream_new	protocol-native.c	/^static playback_stream* playback_stream_new($/;"	f	file:
playback_stream_process_msg	protocol-native.c	/^static int playback_stream_process_msg(pa_msgobject *o, int code, void*userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
playback_stream_request_bytes	protocol-native.c	/^static void playback_stream_request_bytes(playback_stream *s) {$/;"	f	file:
playback_stream_send_killed	protocol-native.c	/^static void playback_stream_send_killed(playback_stream *p) {$/;"	f	file:
playback_stream_unlink	protocol-native.c	/^static void playback_stream_unlink(playback_stream *s) {$/;"	f	file:
player_list	esound.h	/^    esd_player_info_t *player_list;$/;"	m	struct:esd_info
playing_for	protocol-native.c	/^    uint64_t playing_for, underrun_for;$/;"	m	struct:playback_stream	file:
playing_for	sink-input.h	/^        uint64_t underrun_for, playing_for;$/;"	m	struct:pa_sink_input::__anon27
please_signal	memblock.c	/^    pa_atomic_t please_signal;$/;"	m	struct:pa_memblock	file:
points	envelope.c	/^    } points[2];$/;"	m	struct:pa_envelope	typeref:struct:pa_envelope::__anon23	file:
points_x	envelope.h	/^    pa_usec_t points_x[PA_ENVELOPE_POINTS_MAX];$/;"	m	struct:pa_envelope_def
points_y	envelope.h	/^    } points_y;$/;"	m	struct:pa_envelope_def	typeref:struct:pa_envelope_def::__anon21
poll	poll.c	/^int poll (struct pollfd *fds, unsigned long int nfds, int timeout) {$/;"	f
pollfd	poll.h	/^struct pollfd$/;"	s
pollfd	rtpoll.c	/^    struct pollfd *pollfd, *pollfd2;$/;"	m	struct:pa_rtpoll	typeref:struct:pa_rtpoll::pollfd	file:
pollfd	rtpoll.c	/^    struct pollfd *pollfd;$/;"	m	struct:pa_rtpoll_item	typeref:struct:pa_rtpoll_item::pollfd	file:
pollfd2	rtpoll.c	/^    struct pollfd *pollfd, *pollfd2;$/;"	m	struct:pa_rtpoll	typeref:struct:pa_rtpoll::	file:
pool	memblock.c	/^    pa_mempool *pool;$/;"	m	struct:pa_memblock	file:
pool	memblock.c	/^    pa_mempool *pool;$/;"	m	struct:pa_memexport	file:
pool	memblock.c	/^    pa_mempool *pool;$/;"	m	struct:pa_memimport	file:
pop	sink-input.h	/^    int (*pop) (pa_sink_input *i, size_t request_nbytes, pa_memchunk *chunk); \/* may NOT be NULL *\/$/;"	m	struct:pa_sink_input
port	parseaddr.h	/^    uint16_t port;$/;"	m	struct:pa_parsed_address
ports	sink.h	/^    pa_hashmap *ports;$/;"	m	struct:pa_sink
ports	sink.h	/^    pa_hashmap *ports;$/;"	m	struct:pa_sink_new_data
ports	source.h	/^    pa_hashmap *ports;$/;"	m	struct:pa_source
ports	source.h	/^    pa_hashmap *ports;$/;"	m	struct:pa_source_new_data
prebuf	memblockq.c	/^    size_t maxlength, tlength, base, prebuf, minreq, maxrewind;$/;"	m	struct:pa_memblockq	file:
prepare_next_write_item	pstream.c	/^static void prepare_next_write_item(pa_pstream *p) {$/;"	f	file:
prev	memblockq.c	/^    struct list_item *next, *prev;$/;"	m	struct:list_item	typeref:struct:list_item::	file:
prev	memtrap.c	/^    pa_memtrap *next[2], *prev[2];$/;"	m	struct:pa_memtrap	file:
priority	card.h	/^    unsigned priority;$/;"	m	struct:pa_card_profile
priority	hook-list.h	/^    pa_hook_priority_t priority;$/;"	m	struct:pa_hook_slot
priority	rtpoll.c	/^    pa_rtpoll_priority_t priority;$/;"	m	struct:pa_rtpoll_item	file:
priority	sink.h	/^    unsigned priority;$/;"	m	struct:pa_device_port
priority	sink.h	/^    unsigned priority;$/;"	m	struct:pa_sink
priority	source.h	/^    unsigned priority;$/;"	m	struct:pa_source
proc	cli-command.c	/^    int (*proc) (pa_core *c, pa_tokenizer*t, pa_strbuf *buf, pa_bool_t *fail);$/;"	m	struct:command	file:
proc	protocol-esound.c	/^    int (*proc)(connection *c, esd_proto_t request, const void *data, size_t length);$/;"	m	struct:proto_handler	file:
proc_name_ours	pid.c	/^static int proc_name_ours(pid_t pid, const char *procname) {$/;"	f	file:
process_msg	msgobject.h	/^    int (*process_msg)(pa_msgobject *o, int code, void *userdata, int64_t offset, pa_memchunk *chunk);$/;"	m	struct:pa_msgobject
process_rewind	sink-input.h	/^    void (*process_rewind) (pa_sink_input *i, size_t nbytes);     \/* may NOT be NULL *\/$/;"	m	struct:pa_sink_input
process_rewind	source-output.h	/^    void (*process_rewind)(pa_source_output *o, size_t nbytes); \/* may be NULL *\/$/;"	m	struct:pa_source_output
profiles	card.h	/^    pa_hashmap *profiles;$/;"	m	struct:pa_card
profiles	card.h	/^    pa_hashmap *profiles;$/;"	m	struct:pa_card_new_data
propagate_real_volume	sink.c	/^static void propagate_real_volume(pa_sink *s, const pa_cvolume *old_real_volume) {$/;"	f	file:
propagate_reference_volume	sink.c	/^static void propagate_reference_volume(pa_sink *s) {$/;"	f	file:
property_name	dbus-shared.c	/^    const char *property_name;$/;"	m	struct:pa_dbus_connection	file:
property_name	x11wrap.c	/^    char *property_name;$/;"	m	struct:pa_x11_wrapper	file:
proplist	card.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_card
proplist	card.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_card_new_data
proplist	client.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_client
proplist	client.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_client_new_data
proplist	core-scache.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_scache_entry
proplist	module.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_module
proplist	protocol-native.c	/^    pa_proplist *proplist;$/;"	m	struct:upload_stream	file:
proplist	sink-input.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_sink_input
proplist	sink-input.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_sink_input_new_data
proplist	sink.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_sink
proplist	sink.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_sink_new_data
proplist	source-output.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_source_output
proplist	source-output.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_source_output_new_data
proplist	source.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_source
proplist	source.h	/^    pa_proplist *proplist;$/;"	m	struct:pa_source_new_data
proto_handler	protocol-esound.c	/^typedef struct proto_handler {$/;"	s	file:
proto_map	protocol-esound.c	/^static struct proto_handler proto_map[ESD_PROTO_MAX] = {$/;"	v	typeref:struct:proto_handler	file:
protocol	protocol-esound.c	/^    pa_esound_protocol *protocol;$/;"	m	struct:connection	file:
protocol	protocol-http.c	/^    pa_http_protocol *protocol;$/;"	m	struct:connection	file:
protocol	protocol-native.c	/^    pa_native_protocol *protocol;$/;"	m	struct:pa_native_connection	file:
protocol	protocol-simple.c	/^    pa_simple_protocol *protocol;$/;"	m	struct:connection	file:
protocol_error	protocol-native.c	/^static void protocol_error(pa_native_connection *c) {$/;"	f	file:
pstream	protocol-native.c	/^    pa_pstream *pstream;$/;"	m	struct:pa_native_connection	file:
pstream_die_callback	protocol-native.c	/^static void pstream_die_callback(pa_pstream *p, void *userdata) {$/;"	f	file:
pstream_drain_callback	protocol-native.c	/^static void pstream_drain_callback(pa_pstream *p, void *userdata) {$/;"	f	file:
pstream_free	pstream.c	/^static void pstream_free(pa_pstream *p) {$/;"	f	file:
pstream_memblock_callback	protocol-native.c	/^static void pstream_memblock_callback(pa_pstream *p, uint32_t channel, int64_t offset, pa_seek_mode_t seek, const pa_memchunk *chunk, void *userdata) {$/;"	f	file:
pstream_packet_callback	protocol-native.c	/^static void pstream_packet_callback(pa_pstream *p, pa_packet *packet, const pa_creds *creds, void *userdata) {$/;"	f	file:
pstream_release_callback	protocol-native.c	/^static void pstream_release_callback(pa_pstream *p, uint32_t block_id, void *userdata) {$/;"	f	file:
pstream_revoke_callback	protocol-native.c	/^static void pstream_revoke_callback(pa_pstream *p, uint32_t block_id, void *userdata) {$/;"	f	file:
ptr	mutex.h	/^    pa_atomic_ptr_t ptr;$/;"	m	struct:pa_static_mutex
ptr	sample-util.h	/^    void *ptr;$/;"	m	struct:pa_mix_info
ptr	semaphore.h	/^    pa_atomic_ptr_t ptr;$/;"	m	struct:pa_static_semaphore
ptr	shm.h	/^    void *ptr;$/;"	m	struct:pa_shm
push	asyncq.c	/^static int push(pa_asyncq*l, void *p, pa_bool_t wait_op) {$/;"	f	file:
push	source-output.h	/^    void (*push)(pa_source_output *o, const pa_memchunk *chunk); \/* may NOT be NULL *\/$/;"	m	struct:pa_source_output
px	time-smoother.c	/^    pa_usec_t px, py;     \/* Point p, where we want to reach stability *\/$/;"	m	struct:pa_smoother	file:
py	time-smoother.c	/^    pa_usec_t px, py;     \/* Point p, where we want to reach stability *\/$/;"	m	struct:pa_smoother	file:
queue_entry	queue.c	/^struct queue_entry {$/;"	s	file:
quit	rtpoll.c	/^    pa_bool_t quit:1;$/;"	m	struct:pa_rtpoll	file:
random_proper	random.c	/^static int random_proper(void *ret_data, size_t length) {$/;"	f	file:
rate	esound.h	/^    int rate;                   \/* sample rate *\/$/;"	m	struct:esd_player_info
rate	esound.h	/^    int rate;                   \/* sample rate *\/$/;"	m	struct:esd_sample_info
rate	esound.h	/^    int rate;                   \/* sample rate *\/$/;"	m	struct:esd_server_info
rbuf	ioline.c	/^    char *rbuf;$/;"	m	struct:pa_ioline	file:
rbuf_index	ioline.c	/^    size_t rbuf_length, rbuf_index, rbuf_valid_length;$/;"	m	struct:pa_ioline	file:
rbuf_length	ioline.c	/^    size_t rbuf_length, rbuf_index, rbuf_valid_length;$/;"	m	struct:pa_ioline	file:
rbuf_valid_length	ioline.c	/^    size_t rbuf_length, rbuf_index, rbuf_valid_length;$/;"	m	struct:pa_ioline	file:
read	pstream.c	/^    } read;$/;"	m	struct:pa_pstream	typeref:struct:pa_pstream::__anon35	file:
read_creds	pstream.c	/^    pa_creds read_creds, write_creds;$/;"	m	struct:pa_pstream	file:
read_creds_valid	pstream.c	/^    pa_bool_t read_creds_valid, send_creds_now;$/;"	m	struct:pa_pstream	file:
read_data	database-simple.c	/^static int read_data(FILE *f, void **data, ssize_t *length) {$/;"	f	file:
read_data	protocol-esound.c	/^    void *read_data;$/;"	m	struct:connection	file:
read_data_alloc	protocol-esound.c	/^    size_t read_data_alloc, read_data_length;$/;"	m	struct:connection	file:
read_data_length	protocol-esound.c	/^    size_t read_data_alloc, read_data_length;$/;"	m	struct:connection	file:
read_event	thread-mq.h	/^    pa_io_event *read_event, *write_event;$/;"	m	struct:pa_thread_mq
read_fdsem	asyncq.c	/^    pa_fdsem *read_fdsem, *write_fdsem;$/;"	m	struct:pa_asyncq	file:
read_idx	asyncq.c	/^    unsigned read_idx;$/;"	m	struct:pa_asyncq	file:
read_idx	flist.c	/^    pa_atomic_t read_idx;$/;"	m	struct:pa_flist	file:
read_index	memblockq.c	/^    int64_t read_index, write_index;$/;"	m	struct:pa_memblockq	file:
read_index	protocol-native.c	/^    int64_t read_index, write_index;$/;"	m	struct:playback_stream	file:
read_lock	aupdate.c	/^    pa_atomic_t read_lock;$/;"	m	struct:pa_aupdate	file:
read_only	database-simple.c	/^    pa_bool_t read_only;$/;"	m	struct:simple_data	file:
read_only	memblock.c	/^    pa_bool_t read_only:1;$/;"	m	struct:pa_memblock	file:
read_pid	pid.c	/^static pid_t read_pid(const char *fn, int fd) {$/;"	f	file:
read_uint	database-simple.c	/^static int read_uint(FILE *f, uint32_t *res) {$/;"	f	file:
readable	iochannel.c	/^    pa_bool_t readable;$/;"	m	struct:pa_iochannel	file:
readf_function	sound-file-stream.c	/^    sf_count_t (*readf_function)(SNDFILE *sndfile, void *ptr, sf_count_t frames);$/;"	m	struct:file_stream	file:
real_ratio	sink-input.h	/^    pa_cvolume real_ratio;         \/* The ratio of the stream's volume to the sink's real volume *\/$/;"	m	struct:pa_sink_input
real_volume	sink.h	/^    pa_cvolume real_volume;      \/* The volume that the hardware is configured to  *\/$/;"	m	struct:pa_sink
realtime_priority	core.h	/^    int realtime_priority;$/;"	m	struct:pa_core
realtime_scheduling	core.h	/^    pa_bool_t realtime_scheduling:1;$/;"	m	struct:pa_core
rebuild_needed	rtpoll.c	/^    pa_bool_t rebuild_needed:1;$/;"	m	struct:pa_rtpoll	file:
recieve_memblock_callback	pstream.c	/^    pa_pstream_memblock_cb_t recieve_memblock_callback;$/;"	m	struct:pa_pstream	file:
recieve_memblock_callback_userdata	pstream.c	/^    void *recieve_memblock_callback_userdata;$/;"	m	struct:pa_pstream	file:
recieve_packet_callback	pstream.c	/^    pa_pstream_packet_cb_t recieve_packet_callback;$/;"	m	struct:pa_pstream	file:
recieve_packet_callback_userdata	pstream.c	/^    void *recieve_packet_callback_userdata;$/;"	m	struct:pa_pstream	file:
record	protocol-simple.h	/^    pa_bool_t record:1;$/;"	m	struct:pa_simple_options
record_stream	protocol-native.c	/^typedef struct record_stream {$/;"	s	file:
record_stream	protocol-native.c	/^} record_stream;$/;"	t	typeref:struct:record_stream	file:
record_stream_free	protocol-native.c	/^static void record_stream_free(pa_object *o) {$/;"	f	file:
record_stream_new	protocol-native.c	/^static record_stream* record_stream_new($/;"	f	file:
record_stream_process_msg	protocol-native.c	/^static int record_stream_process_msg(pa_msgobject *o, int code, void*userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
record_stream_send_killed	protocol-native.c	/^static void record_stream_send_killed(record_stream *r) {$/;"	f	file:
record_stream_unlink	protocol-native.c	/^static void record_stream_unlink(record_stream *s) {$/;"	f	file:
record_streams	protocol-native.c	/^    pa_idxset *record_streams, *output_streams;$/;"	m	struct:pa_native_connection	file:
recorded_env	core-util.c	/^static pa_strlist *recorded_env = NULL;$/;"	v	file:
reduce	asyncq.c	/^static unsigned reduce(pa_asyncq *l, unsigned value) {$/;"	f	file:
reduce	flist.c	/^static unsigned reduce(pa_flist *l, unsigned value) {$/;"	f	file:
ref	lock-autospawn.c	/^static int ref(void) {$/;"	f	file:
ref	once.h	/^    pa_atomic_t ref, done;$/;"	m	struct:pa_once
reference_ratio	sink-input.h	/^    pa_cvolume reference_ratio;    \/* The ratio of the stream's volume to the sink's reference volume *\/$/;"	m	struct:pa_sink_input
reference_volume	sink.h	/^    pa_cvolume reference_volume; \/* The volume exported and taken as reference base for relative sink input volumes *\/$/;"	m	struct:pa_sink
refresh_muted	sink.h	/^    pa_bool_t refresh_muted:1;$/;"	m	struct:pa_sink
refresh_muted	source.h	/^    pa_bool_t refresh_muted:1;$/;"	m	struct:pa_source
refresh_volume	sink.h	/^    pa_bool_t refresh_volume:1;$/;"	m	struct:pa_sink
refresh_volume	source.h	/^    pa_bool_t refresh_volume:1;$/;"	m	struct:pa_source
release_callback	pstream.c	/^    pa_pstream_block_id_cb_t release_callback;$/;"	m	struct:pa_pstream	file:
release_callback_userdata	pstream.c	/^    void *release_callback_userdata;$/;"	m	struct:pa_pstream	file:
release_cb	memblock.c	/^    pa_memimport_release_cb_t release_cb;$/;"	m	struct:pa_memimport	file:
remap	resampler.c	/^    pa_remap_t remap;$/;"	m	struct:pa_resampler	file:
remap_channels	resampler.c	/^static pa_memchunk *remap_channels(pa_resampler *r, pa_memchunk *input) {$/;"	f	file:
remap_channels_matrix_c	remap.c	/^static void remap_channels_matrix_c (pa_remap_t *m, void *dst, const void *src, unsigned n) {$/;"	f	file:
remap_func	remap.c	/^static pa_init_remap_func_t remap_func = init_remap_c;$/;"	v	file:
remap_mono_to_stereo_c	remap.c	/^static void remap_mono_to_stereo_c (pa_remap_t *m, void *dst, const void *src, unsigned n) {$/;"	f	file:
remap_mono_to_stereo_mmx	remap_mmx.c	/^static void remap_mono_to_stereo_mmx (pa_remap_t *m, void *dst, const void *src, unsigned n) {$/;"	f	file:
remap_mono_to_stereo_sse2	remap_sse.c	/^static void remap_mono_to_stereo_sse2 (pa_remap_t *m, void *dst, const void *src, unsigned n) {$/;"	f	file:
remove_entry	hashmap.c	/^static void remove_entry(pa_hashmap *h, struct hashmap_entry *e) {$/;"	f	file:
remove_entry	idxset.c	/^static void remove_entry(pa_idxset *s, struct idxset_entry *e) {$/;"	f	file:
remove_timeout	dbus-util.c	/^static void remove_timeout(DBusTimeout *timeout, void *data) {$/;"	f	file:
remove_watch	dbus-util.c	/^static void remove_watch(DBusWatch *watch, void *data) {$/;"	f	file:
render_memblockq	sink-input.h	/^        pa_memblockq *render_memblockq;$/;"	m	struct:pa_sink_input::__anon27
render_memblockq_length	protocol-native.c	/^    size_t render_memblockq_length;$/;"	m	struct:playback_stream	file:
reply_info	pdispatch.c	/^struct reply_info {$/;"	s	file:
reply_info_free	pdispatch.c	/^static void reply_info_free(struct reply_info *r) {$/;"	f	file:
reply_new	protocol-native.c	/^static pa_tagstruct *reply_new(uint32_t tag) {$/;"	f	file:
request	protocol-esound.c	/^    esd_proto_t request;$/;"	m	struct:connection	file:
request_rewind	sink.h	/^    void (*request_rewind)(pa_sink *s);        \/* dito *\/$/;"	m	struct:pa_sink
requested	memblockq.c	/^    size_t requested;$/;"	m	struct:pa_memblockq	file:
requested_latency	sink.h	/^        pa_usec_t requested_latency;$/;"	m	struct:pa_sink::__anon36
requested_latency	source.h	/^        pa_usec_t requested_latency;$/;"	m	struct:pa_source::__anon2
requested_latency_valid	sink.h	/^        pa_bool_t requested_latency_valid:1;$/;"	m	struct:pa_sink::__anon36
requested_latency_valid	source.h	/^        pa_bool_t requested_latency_valid:1;$/;"	m	struct:pa_source::__anon2
requested_resample_method	sink-input.h	/^    pa_resample_method_t requested_resample_method, actual_resample_method;$/;"	m	struct:pa_sink_input
requested_resample_method	source-output.h	/^    pa_resample_method_t requested_resample_method, actual_resample_method;$/;"	m	struct:pa_source_output
requested_sink_latency	sink-input.h	/^        pa_usec_t requested_sink_latency;$/;"	m	struct:pa_sink_input::__anon27
requested_source_latency	source-output.h	/^        pa_usec_t requested_source_latency;$/;"	m	struct:pa_source_output::__anon15
resample	resampler.c	/^static pa_memchunk *resample(pa_resampler *r, pa_memchunk *input) {$/;"	f	file:
resample_method	core.h	/^    pa_resample_method_t resample_method;$/;"	m	struct:pa_core
resample_method	sink-input.h	/^    pa_resample_method_t resample_method;$/;"	m	struct:pa_sink_input_new_data
resample_method	source-output.h	/^    pa_resample_method_t resample_method;$/;"	m	struct:pa_source_output_new_data
resample_methods	resampler.c	/^static const char * const resample_methods[] = {$/;"	v	file:
resampler	sink-input.h	/^        pa_resampler *resampler;                     \/* may be NULL *\/$/;"	m	struct:pa_sink_input::__anon27
resampler	source-output.h	/^        pa_resampler* resampler;              \/* may be NULL *\/$/;"	m	struct:pa_source_output::__anon15
reset_all_revents	rtpoll.c	/^static void reset_all_revents(pa_rtpoll *p) {$/;"	f	file:
reset_callbacks	sink-input.c	/^static void reset_callbacks(pa_sink_input *i) {$/;"	f	file:
reset_callbacks	sink.c	/^static void reset_callbacks(pa_sink *s) {$/;"	f	file:
reset_callbacks	source-output.c	/^static void reset_callbacks(pa_source_output *o) {$/;"	f	file:
reset_callbacks	source.c	/^static void reset_callbacks(pa_source *s) {$/;"	f	file:
reset_revents	rtpoll.c	/^static void reset_revents(pa_rtpoll_item *i) {$/;"	f	file:
ret	asyncmsgq.c	/^    int ret;$/;"	m	struct:asyncmsgq_item	file:
revents	poll.h	/^    short int revents;          \/* Types of events that actually occurred.  *\/$/;"	m	struct:pollfd
revoke_callback	pstream.c	/^    pa_pstream_block_id_cb_t revoke_callback;$/;"	m	struct:pa_pstream	file:
revoke_callback_userdata	pstream.c	/^    void *revoke_callback_userdata;$/;"	m	struct:pa_pstream	file:
revoke_cb	memblock.c	/^    pa_memexport_revoke_cb_t revoke_cb;$/;"	m	struct:pa_memexport	file:
rewind_nbytes	sink.h	/^        size_t rewind_nbytes;$/;"	m	struct:pa_sink::__anon36
rewind_requested	sink.h	/^        pa_bool_t rewind_requested;$/;"	m	struct:pa_sink::__anon36
rewrite_flush	sink-input.h	/^        pa_bool_t rewrite_flush:1, dont_rewind_render:1;$/;"	m	struct:pa_sink_input::__anon27
rewrite_nbytes	sink-input.h	/^        size_t rewrite_nbytes;$/;"	m	struct:pa_sink_input::__anon27
right_vol_scale	esound.h	/^    int right_vol_scale;$/;"	m	struct:esd_player_info
right_vol_scale	esound.h	/^    int right_vol_scale;$/;"	m	struct:esd_sample_info
rindex	tagstruct.c	/^    size_t rindex;$/;"	m	struct:pa_tagstruct	file:
rrobin_index	protocol-native.c	/^    uint32_t rrobin_index;$/;"	m	struct:pa_native_connection	file:
rtkit_make_high_priority	rtkit.c	/^int rtkit_make_high_priority(DBusConnection *connection, pid_t thread, int nice_level) {$/;"	f
rtkit_make_realtime	rtkit.c	/^int rtkit_make_realtime(DBusConnection *connection, pid_t thread, int priority) {$/;"	f
rtpoll	rtpoll.c	/^    pa_rtpoll *rtpoll;$/;"	m	struct:pa_rtpoll_item	file:
rtpoll	sink.h	/^        pa_rtpoll *rtpoll;$/;"	m	struct:pa_sink::__anon36
rtpoll	source.h	/^        pa_rtpoll *rtpoll;$/;"	m	struct:pa_source::__anon2
rtpoll_item_destroy	rtpoll.c	/^static void rtpoll_item_destroy(pa_rtpoll_item *i) {$/;"	f	file:
rtpoll_rebuild	rtpoll.c	/^static void rtpoll_rebuild(pa_rtpoll *p) {$/;"	f	file:
run_action	pdispatch.c	/^static void run_action(pa_pdispatch *pd, struct reply_info *r, uint32_t command, pa_tagstruct *ts) {$/;"	f	file:
run_test	sconv_sse.c	/^static void run_test (void) {$/;"	f	file:
run_test	svolume_arm.c	/^static void run_test (void) {$/;"	f	file:
run_test	svolume_mmx.c	/^static void run_test (void) {$/;"	f	file:
run_test	svolume_sse.c	/^static void run_test (void) {$/;"	f	file:
running	rtpoll.c	/^    pa_bool_t running:1;$/;"	m	struct:pa_rtpoll	file:
running	thread-posix.c	/^    pa_atomic_t running;$/;"	m	struct:pa_thread	file:
running_as_daemon	core.h	/^    pa_bool_t running_as_daemon:1;$/;"	m	struct:pa_core
ry	time-smoother.c	/^    pa_usec_t ry;         \/* The original y value for ex *\/$/;"	m	struct:pa_smoother	file:
s16ne_to_s16ne	sconv.c	/^static void s16ne_to_s16ne(unsigned n, const int16_t *a, int16_t *b) {$/;"	f	file:
s16re_to_s16ne	sconv.c	/^static void s16re_to_s16ne(unsigned n, const int16_t *a, int16_t *b) {$/;"	f	file:
sample_id	esound.h	/^    int sample_id;              \/* either a stream fd or sample id *\/$/;"	m	struct:esd_sample_info
sample_list	esound.h	/^    esd_sample_info_t *sample_list;$/;"	m	struct:esd_info
sample_spec	core-scache.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_scache_entry
sample_spec	envelope.c	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_envelope	file:
sample_spec	protocol-esound.c	/^        pa_sample_spec sample_spec;$/;"	m	struct:connection::__anon12	file:
sample_spec	protocol-native.c	/^    pa_sample_spec sample_spec;$/;"	m	struct:upload_stream	file:
sample_spec	protocol-simple.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_simple_options
sample_spec	sink-input.h	/^        pa_sample_spec sample_spec;$/;"	m	struct:pa_sink_input::__anon27
sample_spec	sink-input.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_sink_input
sample_spec	sink-input.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_sink_input_new_data
sample_spec	sink.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_sink
sample_spec	sink.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_sink_new_data
sample_spec	source-output.h	/^        pa_sample_spec sample_spec;$/;"	m	struct:pa_source_output::__anon15
sample_spec	source-output.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_source_output
sample_spec	source-output.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_source_output_new_data
sample_spec	source.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_source
sample_spec	source.h	/^    pa_sample_spec sample_spec;$/;"	m	struct:pa_source_new_data
sample_spec_is_set	sink-input.h	/^    pa_bool_t sample_spec_is_set:1;$/;"	m	struct:pa_sink_input_new_data
sample_spec_is_set	sink.h	/^    pa_bool_t sample_spec_is_set:1;$/;"	m	struct:pa_sink_new_data
sample_spec_is_set	source-output.h	/^    pa_bool_t sample_spec_is_set:1;$/;"	m	struct:pa_source_output_new_data
sample_spec_is_set	source.h	/^    pa_bool_t sample_spec_is_set:1;$/;"	m	struct:pa_source_new_data
save_muted	sink-input.h	/^    pa_bool_t save_sink:1, save_volume:1, save_muted:1;$/;"	m	struct:pa_sink_input
save_muted	sink-input.h	/^    pa_bool_t save_sink:1, save_volume:1, save_muted:1;$/;"	m	struct:pa_sink_input_new_data
save_muted	sink.h	/^    pa_bool_t save_muted:1;$/;"	m	struct:pa_sink
save_muted	sink.h	/^    pa_bool_t save_muted:1;$/;"	m	struct:pa_sink_new_data
save_muted	source.h	/^    pa_bool_t save_muted:1;$/;"	m	struct:pa_source
save_muted	source.h	/^    pa_bool_t save_muted:1;$/;"	m	struct:pa_source_new_data
save_port	sink.h	/^    pa_bool_t save_port:1;$/;"	m	struct:pa_sink
save_port	sink.h	/^    pa_bool_t save_port:1;$/;"	m	struct:pa_sink_new_data
save_port	source.h	/^    pa_bool_t save_port:1;$/;"	m	struct:pa_source
save_port	source.h	/^    pa_bool_t save_port:1;$/;"	m	struct:pa_source_new_data
save_profile	card.h	/^    pa_bool_t save_profile:1;$/;"	m	struct:pa_card
save_profile	card.h	/^    pa_bool_t save_profile:1;$/;"	m	struct:pa_card_new_data
save_sink	sink-input.h	/^    pa_bool_t save_sink:1, save_volume:1, save_muted:1;$/;"	m	struct:pa_sink_input
save_sink	sink-input.h	/^    pa_bool_t save_sink:1, save_volume:1, save_muted:1;$/;"	m	struct:pa_sink_input_new_data
save_source	source-output.h	/^    pa_bool_t save_source:1;$/;"	m	struct:pa_source_output
save_source	source-output.h	/^    pa_bool_t save_source:1;$/;"	m	struct:pa_source_output_new_data
save_volume	sink-input.h	/^    pa_bool_t save_sink:1, save_volume:1, save_muted:1;$/;"	m	struct:pa_sink_input
save_volume	sink-input.h	/^    pa_bool_t save_sink:1, save_volume:1, save_muted:1;$/;"	m	struct:pa_sink_input_new_data
save_volume	sink.h	/^    pa_bool_t save_volume:1;$/;"	m	struct:pa_sink
save_volume	sink.h	/^    pa_bool_t save_volume:1;$/;"	m	struct:pa_sink_new_data
save_volume	source.h	/^    pa_bool_t save_volume:1;$/;"	m	struct:pa_source
save_volume	source.h	/^    pa_bool_t save_volume:1;$/;"	m	struct:pa_source_new_data
scache	core.h	/^    pa_idxset *clients, *cards, *sinks, *sources, *sink_inputs, *source_outputs, *modules, *scache;$/;"	m	struct:pa_core
scache	protocol-esound.c	/^    } scache;$/;"	m	struct:connection	typeref:struct:connection::__anon12	file:
scache_add_item	core-scache.c	/^static pa_scache_entry* scache_add_item(pa_core *c, const char *name) {$/;"	f	file:
scache_auto_unload_event	core.h	/^    pa_time_event *scache_auto_unload_event;$/;"	m	struct:pa_core
scache_fill_tagstruct	protocol-native.c	/^static void scache_fill_tagstruct(pa_native_connection *c, pa_tagstruct *t, pa_scache_entry *e) {$/;"	f	file:
scache_idle_time	core.h	/^    int exit_idle_time, scache_idle_time;$/;"	m	struct:pa_core
scan_for_dead	rtpoll.c	/^    pa_bool_t scan_for_dead:1;$/;"	m	struct:pa_rtpoll	file:
scan_for_lines	ioline.c	/^static void scan_for_lines(pa_ioline *l, size_t skip) {$/;"	f	file:
sched_event	core-subscribe.c	/^static void sched_event(pa_core *c) {$/;"	f	file:
search	g711.c	/^static int16_t search($/;"	f	file:
section	conf-parser.h	/^    const char *section;$/;"	m	struct:pa_config_item
seek_mode	pstream.c	/^    pa_seek_mode_t seek_mode;$/;"	m	struct:item_info	file:
seg_aend	g711.c	/^static int16_t seg_aend[8] = {0x1F, 0x3F, 0x7F, 0xFF,$/;"	v	file:
seg_uend	g711.c	/^static int16_t seg_uend[8] = {0x3F, 0x7F, 0xFF, 0x1FF,$/;"	v	file:
segment	memblock.c	/^            pa_memimport_segment *segment;$/;"	m	struct:pa_memblock::__anon4::__anon6	file:
segment_attach	memblock.c	/^static pa_memimport_segment* segment_attach(pa_memimport *i, uint32_t shm_id) {$/;"	f	file:
segment_detach	memblock.c	/^static void segment_detach(pa_memimport_segment *seg) {$/;"	f	file:
segment_name	shm.c	/^static char *segment_name(char *fn, size_t l, unsigned id) {$/;"	f	file:
segments	memblock.c	/^    pa_hashmap *segments;$/;"	m	struct:pa_memimport	file:
sem	semaphore-posix.c	/^    sem_t sem;$/;"	m	struct:pa_semaphore	file:
sema	semaphore-win32.c	/^    HANDLE sema;$/;"	m	struct:pa_semaphore	file:
semaphore	asyncmsgq.c	/^    pa_semaphore *semaphore;$/;"	m	struct:asyncmsgq_item	file:
semaphore	aupdate.c	/^    pa_semaphore *semaphore;$/;"	m	struct:pa_aupdate	file:
semaphore	envelope.c	/^    pa_semaphore *semaphore;$/;"	m	struct:pa_envelope	file:
semaphore	memblock.c	/^    pa_semaphore *semaphore;$/;"	m	struct:pa_mempool	file:
send_creds_now	pstream.c	/^    pa_bool_t read_creds_valid, send_creds_now;$/;"	m	struct:pa_pstream	file:
send_event	client.h	/^    void (*send_event)(pa_client *c, const char *name, pa_proplist *data);$/;"	m	struct:pa_client
send_event	sink-input.h	/^    void (*send_event)(pa_sink_input *i, const char *event, pa_proplist* data); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
send_event	source-output.h	/^    void (*send_event)(pa_source_output *o, const char *event, pa_proplist* data);$/;"	m	struct:pa_source_output
send_queue	pstream.c	/^    pa_queue *send_queue;$/;"	m	struct:pa_pstream	file:
server	esound.h	/^    esd_server_info_t *server;  \/* the server that contains this sample *\/$/;"	m	struct:esd_sample_info
server	esound.h	/^    esd_server_info_t *server;  \/* the server that contains this stream *\/$/;"	m	struct:esd_player_info
server	esound.h	/^    esd_server_info_t *server;$/;"	m	struct:esd_info
servers	protocol-http.c	/^    pa_strlist *servers;$/;"	m	struct:pa_http_protocol	file:
servers	protocol-native.c	/^    pa_strlist *servers;$/;"	m	struct:pa_native_protocol	file:
set_block	pipe.c	/^static int set_block(int fd, int blocking) {$/;"	f	file:
set_mute	sink.h	/^    void (*set_mute)(pa_sink *s);               \/* dito *\/$/;"	m	struct:pa_sink
set_mute	source.h	/^    void (*set_mute)(pa_source *s);           \/* dito *\/$/;"	m	struct:pa_source
set_nice	core-util.c	/^static int set_nice(int nice_level) {$/;"	f	file:
set_port	sink.h	/^    int (*set_port)(pa_sink *s, pa_device_port *port); \/* dito *\/$/;"	m	struct:pa_sink
set_port	source.h	/^    int (*set_port)(pa_source *s, pa_device_port *port); \/*dito *\/$/;"	m	struct:pa_source
set_profile	card.h	/^    int (*set_profile)(pa_card *c, pa_card_profile *profile);$/;"	m	struct:pa_card
set_real_ratio	sink-input.c	/^static void set_real_ratio(pa_sink_input *i, const pa_cvolume *v) {$/;"	f	file:
set_scheduler	core-util.c	/^static int set_scheduler(int rtprio) {$/;"	f	file:
set_state	sink.h	/^    int (*set_state)(pa_sink *s, pa_sink_state_t state); \/* may be NULL *\/$/;"	m	struct:pa_sink
set_state	source.h	/^    int (*set_state)(pa_source*source, pa_source_state_t state); \/* may be NULL *\/$/;"	m	struct:pa_source
set_volume	sink.h	/^    void (*set_volume)(pa_sink *s);             \/* dito *\/$/;"	m	struct:pa_sink
set_volume	source.h	/^    void (*set_volume)(pa_source *s);         \/* dito *\/$/;"	m	struct:pa_source
shared	core.h	/^    pa_hashmap *namereg, *shared;$/;"	m	struct:pa_core
shared	shm.h	/^    pa_bool_t shared:1;$/;"	m	struct:pa_shm
shared_free	shared.c	/^static void shared_free(pa_shared *p) {$/;"	f	file:
shared_new	shared.c	/^static pa_shared* shared_new(const char *name, void *data) {$/;"	f	file:
shm_info	pstream.c	/^        uint32_t shm_info[PA_PSTREAM_SHM_MAX];$/;"	m	struct:pa_pstream::__anon34	file:
shm_info	pstream.c	/^        uint32_t shm_info[PA_PSTREAM_SHM_MAX];$/;"	m	struct:pa_pstream::__anon35	file:
shm_marker	shm.c	/^struct shm_marker {$/;"	s	file:
show_backtrace	log.c	/^static unsigned show_backtrace = 0, show_backtrace_override = 0, skip_backtrace = 0;$/;"	v	file:
show_backtrace_override	log.c	/^static unsigned show_backtrace = 0, show_backtrace_override = 0, skip_backtrace = 0;$/;"	v	file:
shuffle_down	prioq.c	/^static void shuffle_down(pa_prioq *q, unsigned idx) {$/;"	f	file:
shuffle_up	prioq.c	/^static void shuffle_up(pa_prioq *q, pa_prioq_item *i) {$/;"	f	file:
signal_handler	memtrap.c	/^static void signal_handler(int sig, siginfo_t* si, void *data) {$/;"	f	file:
signalled	fdsem.h	/^    pa_atomic_t signalled;$/;"	m	struct:pa_fdsem_data
sigsafe_error	memtrap.c	/^static void sigsafe_error(const char *s) {$/;"	f	file:
silence	memblockq.c	/^    pa_memchunk silence;$/;"	m	struct:pa_memblockq	file:
silence	sink.h	/^    pa_memchunk silence;$/;"	m	struct:pa_sink
silence	source.h	/^    pa_memchunk silence;$/;"	m	struct:pa_source
silence_byte	sample-util.c	/^static uint8_t silence_byte(pa_sample_format_t format) {$/;"	f	file:
silence_cache	core.h	/^    pa_silence_cache silence_cache;$/;"	m	struct:pa_core
silence_memblock_new	sample-util.c	/^static pa_memblock *silence_memblock_new(pa_mempool *pool, uint8_t c) {$/;"	f	file:
simple_data	database-simple.c	/^typedef struct simple_data {$/;"	s	file:
simple_data	database-simple.c	/^} simple_data;$/;"	t	typeref:struct:simple_data	file:
simple_protocol_new	protocol-simple.c	/^static pa_simple_protocol* simple_protocol_new(pa_core *c) {$/;"	f	file:
sink	sink-input.h	/^    pa_sink *sink; \/* NULL while we are being moved *\/$/;"	m	struct:pa_sink_input
sink	sink-input.h	/^    pa_sink *sink;$/;"	m	struct:pa_sink_input_new_data
sink_fill_tagstruct	protocol-native.c	/^static void sink_fill_tagstruct(pa_native_connection *c, pa_tagstruct *t, pa_sink *sink) {$/;"	f	file:
sink_free	sink.c	/^static void sink_free(pa_object *o) {$/;"	f	file:
sink_input	play-memblockq.c	/^    pa_sink_input *sink_input;$/;"	m	struct:memblockq_stream	file:
sink_input	protocol-esound.c	/^    pa_sink_input *sink_input;$/;"	m	struct:connection	file:
sink_input	protocol-native.c	/^    pa_sink_input *sink_input;$/;"	m	struct:playback_stream	file:
sink_input	protocol-simple.c	/^    pa_sink_input *sink_input;$/;"	m	struct:connection	file:
sink_input	sink-input.h	/^    pa_sink_input *sink_input;$/;"	m	struct:pa_sink_input_send_event_hook_data
sink_input	sound-file-stream.c	/^    pa_sink_input *sink_input;$/;"	m	struct:file_stream	file:
sink_input_fill_tagstruct	protocol-native.c	/^static void sink_input_fill_tagstruct(pa_native_connection *c, pa_tagstruct *t, pa_sink_input *s) {$/;"	f	file:
sink_input_free	sink-input.c	/^static void sink_input_free(pa_object *o) {$/;"	f	file:
sink_input_kill_cb	play-memblockq.c	/^static void sink_input_kill_cb(pa_sink_input *i) {$/;"	f	file:
sink_input_kill_cb	protocol-esound.c	/^static void sink_input_kill_cb(pa_sink_input *i) {$/;"	f	file:
sink_input_kill_cb	protocol-native.c	/^static void sink_input_kill_cb(pa_sink_input *i) {$/;"	f	file:
sink_input_kill_cb	protocol-simple.c	/^static void sink_input_kill_cb(pa_sink_input *i) {$/;"	f	file:
sink_input_kill_cb	sound-file-stream.c	/^static void sink_input_kill_cb(pa_sink_input *i) {$/;"	f	file:
sink_input_moving_cb	protocol-native.c	/^static void sink_input_moving_cb(pa_sink_input *i, pa_sink *dest) {$/;"	f	file:
sink_input_pop_cb	play-memblockq.c	/^static int sink_input_pop_cb(pa_sink_input *i, size_t nbytes, pa_memchunk *chunk) {$/;"	f	file:
sink_input_pop_cb	protocol-esound.c	/^static int sink_input_pop_cb(pa_sink_input *i, size_t length, pa_memchunk *chunk) {$/;"	f	file:
sink_input_pop_cb	protocol-native.c	/^static int sink_input_pop_cb(pa_sink_input *i, size_t nbytes, pa_memchunk *chunk) {$/;"	f	file:
sink_input_pop_cb	protocol-simple.c	/^static int sink_input_pop_cb(pa_sink_input *i, size_t length, pa_memchunk *chunk) {$/;"	f	file:
sink_input_pop_cb	sound-file-stream.c	/^static int sink_input_pop_cb(pa_sink_input *i, size_t length, pa_memchunk *chunk) {$/;"	f	file:
sink_input_process_msg	protocol-esound.c	/^static int sink_input_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
sink_input_process_msg	protocol-native.c	/^static int sink_input_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
sink_input_process_msg	protocol-simple.c	/^static int sink_input_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
sink_input_process_rewind_cb	play-memblockq.c	/^static void sink_input_process_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_process_rewind_cb	protocol-esound.c	/^static void sink_input_process_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_process_rewind_cb	protocol-native.c	/^static void sink_input_process_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_process_rewind_cb	protocol-simple.c	/^static void sink_input_process_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_process_rewind_cb	sound-file-stream.c	/^static void sink_input_process_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_send_event_cb	protocol-native.c	/^static void sink_input_send_event_cb(pa_sink_input *i, const char *event, pa_proplist *pl) {$/;"	f	file:
sink_input_set_state	sink-input.c	/^static void sink_input_set_state(pa_sink_input *i, pa_sink_input_state_t state) {$/;"	f	file:
sink_input_state_change_cb	play-memblockq.c	/^static void sink_input_state_change_cb(pa_sink_input *i, pa_sink_input_state_t state) {$/;"	f	file:
sink_input_state_change_cb	sound-file-stream.c	/^static void sink_input_state_change_cb(pa_sink_input *i, pa_sink_input_state_t state) {$/;"	f	file:
sink_input_suspend_cb	protocol-native.c	/^static void sink_input_suspend_cb(pa_sink_input *i, pa_bool_t suspend) {$/;"	f	file:
sink_input_update_max_request_cb	protocol-native.c	/^static void sink_input_update_max_request_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_update_max_rewind_cb	play-memblockq.c	/^static void sink_input_update_max_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_update_max_rewind_cb	protocol-esound.c	/^static void sink_input_update_max_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_update_max_rewind_cb	protocol-native.c	/^static void sink_input_update_max_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_update_max_rewind_cb	protocol-simple.c	/^static void sink_input_update_max_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_input_update_max_rewind_cb	sound-file-stream.c	/^static void sink_input_update_max_rewind_cb(pa_sink_input *i, size_t nbytes) {$/;"	f	file:
sink_inputs	client.h	/^    pa_idxset *sink_inputs;$/;"	m	struct:pa_client
sink_inputs	core.h	/^    pa_idxset *clients, *cards, *sinks, *sources, *sink_inputs, *source_outputs, *modules, *scache;$/;"	m	struct:pa_core
sink_set_state	sink.c	/^static int sink_set_state(pa_sink *s, pa_sink_state_t state) {$/;"	f	file:
sink_state_to_string	cli-text.c	/^static const char *sink_state_to_string(pa_sink_state_t state) {$/;"	f	file:
sinks	card.h	/^    pa_idxset *sinks;$/;"	m	struct:pa_card
sinks	core.h	/^    pa_idxset *clients, *cards, *sinks, *sources, *sink_inputs, *source_outputs, *modules, *scache;$/;"	m	struct:pa_core
size	asyncq.c	/^    unsigned size;$/;"	m	struct:pa_asyncq	file:
size	auth-cookie.c	/^    size_t size;$/;"	m	struct:pa_auth_cookie	file:
size	database.h	/^    size_t size;$/;"	m	struct:pa_datum
size	flist.c	/^    unsigned size;$/;"	m	struct:pa_flist	file:
size	memtrap.c	/^    size_t size;$/;"	m	struct:pa_memtrap	file:
size	shm.h	/^    size_t size;$/;"	m	struct:pa_shm
skip_backtrace	log.c	/^static unsigned show_backtrace = 0, show_backtrace_override = 0, skip_backtrace = 0;$/;"	v	file:
slept	rtpoll.c	/^    pa_usec_t slept, awake;$/;"	m	struct:pa_rtpoll	file:
slot_free	hook-list.c	/^static void slot_free(pa_hook *hook, pa_hook_slot *slot) {$/;"	f	file:
slots	memblock.c	/^    struct memexport_slot slots[PA_MEMEXPORT_SLOTS_MAX];$/;"	m	struct:pa_memexport	typeref:struct:pa_memexport::memexport_slot	file:
smoothing	time-smoother.c	/^    pa_bool_t smoothing:1; \/* If FALSE we skip the polonyomial interpolation step *\/$/;"	m	struct:pa_smoother	file:
sndfile	sound-file-stream.c	/^    SNDFILE *sndfile;$/;"	m	struct:file_stream	file:
sockaddr_prepare	socket-client.c	/^static int sockaddr_prepare(pa_socket_client *c, const struct sockaddr *sa, size_t salen) {$/;"	f	file:
socket_client_free	socket-client.c	/^static void socket_client_free(pa_socket_client *c) {$/;"	f	file:
socket_client_new	socket-client.c	/^static pa_socket_client* socket_client_new(pa_mainloop_api *m) {$/;"	f	file:
socket_server_free	socket-server.c	/^static void socket_server_free(pa_socket_server*s) {$/;"	f	file:
soft_muted	sink.h	/^        pa_bool_t soft_muted:1;$/;"	m	struct:pa_sink::__anon36
soft_muted	source.h	/^        pa_bool_t soft_muted:1;$/;"	m	struct:pa_source::__anon2
soft_volume	sink-input.h	/^        pa_cvolume soft_volume;$/;"	m	struct:pa_sink_input::__anon27
soft_volume	sink-input.h	/^    pa_cvolume soft_volume;        \/* The internal software volume we apply to all PCM data while it passes through. Usually calculated as real_ratio * volume_factor *\/$/;"	m	struct:pa_sink_input
soft_volume	sink.h	/^        pa_cvolume soft_volume;$/;"	m	struct:pa_sink::__anon36
soft_volume	sink.h	/^    pa_cvolume soft_volume;      \/* The internal software volume we apply to all PCM data while it passes through *\/$/;"	m	struct:pa_sink
soft_volume	source.h	/^        pa_cvolume soft_volume;$/;"	m	struct:pa_source::__anon2
soft_volume	source.h	/^    pa_cvolume volume, soft_volume;$/;"	m	struct:pa_source
soundfilehfoo	sound-file.h	2;"	d
source	source-output.h	/^    pa_source *source; \/* NULL while being moved *\/$/;"	m	struct:pa_source_output
source	source-output.h	/^    pa_source *source;$/;"	m	struct:pa_source_output_new_data
source_fill_tagstruct	protocol-native.c	/^static void source_fill_tagstruct(pa_native_connection *c, pa_tagstruct *t, pa_source *source) {$/;"	f	file:
source_free	source.c	/^static void source_free(pa_object *o) {$/;"	f	file:
source_id	esound.h	/^    int source_id;              \/* either a stream fd or sample id *\/$/;"	m	struct:esd_player_info
source_output	protocol-esound.c	/^    pa_source_output *source_output;$/;"	m	struct:connection	file:
source_output	protocol-http.c	/^    pa_source_output *source_output;$/;"	m	struct:connection	file:
source_output	protocol-native.c	/^    pa_source_output *source_output;$/;"	m	struct:record_stream	file:
source_output	protocol-simple.c	/^    pa_source_output *source_output;$/;"	m	struct:connection	file:
source_output	source-output.h	/^    pa_source_output *source_output;$/;"	m	struct:pa_source_output_send_event_hook_data
source_output_fill_tagstruct	protocol-native.c	/^static void source_output_fill_tagstruct(pa_native_connection *c, pa_tagstruct *t, pa_source_output *s) {$/;"	f	file:
source_output_free	source-output.c	/^static void source_output_free(pa_object* mo) {$/;"	f	file:
source_output_get_latency_cb	protocol-esound.c	/^static pa_usec_t source_output_get_latency_cb(pa_source_output *o) {$/;"	f	file:
source_output_get_latency_cb	protocol-http.c	/^static pa_usec_t source_output_get_latency_cb(pa_source_output *o) {$/;"	f	file:
source_output_get_latency_cb	protocol-native.c	/^static pa_usec_t source_output_get_latency_cb(pa_source_output *o) {$/;"	f	file:
source_output_get_latency_cb	protocol-simple.c	/^static pa_usec_t source_output_get_latency_cb(pa_source_output *o) {$/;"	f	file:
source_output_kill_cb	protocol-esound.c	/^static void source_output_kill_cb(pa_source_output *o) {$/;"	f	file:
source_output_kill_cb	protocol-http.c	/^static void source_output_kill_cb(pa_source_output *o) {$/;"	f	file:
source_output_kill_cb	protocol-native.c	/^static void source_output_kill_cb(pa_source_output *o) {$/;"	f	file:
source_output_kill_cb	protocol-simple.c	/^static void source_output_kill_cb(pa_source_output *o) {$/;"	f	file:
source_output_moving_cb	protocol-native.c	/^static void source_output_moving_cb(pa_source_output *o, pa_source *dest) {$/;"	f	file:
source_output_process_msg	protocol-http.c	/^static int source_output_process_msg(pa_msgobject *m, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
source_output_process_msg	protocol-native.c	/^static int source_output_process_msg(pa_msgobject *_o, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {$/;"	f	file:
source_output_push_cb	protocol-esound.c	/^static void source_output_push_cb(pa_source_output *o, const pa_memchunk *chunk) {$/;"	f	file:
source_output_push_cb	protocol-http.c	/^static void source_output_push_cb(pa_source_output *o, const pa_memchunk *chunk) {$/;"	f	file:
source_output_push_cb	protocol-native.c	/^static void source_output_push_cb(pa_source_output *o, const pa_memchunk *chunk) {$/;"	f	file:
source_output_push_cb	protocol-simple.c	/^static void source_output_push_cb(pa_source_output *o, const pa_memchunk *chunk) {$/;"	f	file:
source_output_send_event_cb	protocol-native.c	/^static void source_output_send_event_cb(pa_source_output *o, const char *event, pa_proplist *pl) {$/;"	f	file:
source_output_set_state	source-output.c	/^static void source_output_set_state(pa_source_output *o, pa_source_output_state_t state) {$/;"	f	file:
source_output_suspend_cb	protocol-native.c	/^static void source_output_suspend_cb(pa_source_output *o, pa_bool_t suspend) {$/;"	f	file:
source_outputs	client.h	/^    pa_idxset *source_outputs;$/;"	m	struct:pa_client
source_outputs	core.h	/^    pa_idxset *clients, *cards, *sinks, *sources, *sink_inputs, *source_outputs, *modules, *scache;$/;"	m	struct:pa_core
source_set_state	source.c	/^static int source_set_state(pa_source *s, pa_source_state_t state) {$/;"	f	file:
source_state_to_string	cli-text.c	/^static const char *source_state_to_string(pa_source_state_t state) {$/;"	f	file:
sources	card.h	/^    pa_idxset *sources;$/;"	m	struct:pa_card
sources	core.h	/^    pa_idxset *clients, *cards, *sinks, *sources, *sink_inputs, *source_outputs, *modules, *scache;$/;"	m	struct:pa_core
speex	resampler.c	/^    } speex;$/;"	m	struct:pa_resampler	typeref:struct:pa_resampler::__anon40	file:
speex_free	resampler.c	/^static void speex_free(pa_resampler *r) {$/;"	f	file:
speex_init	resampler.c	/^static int speex_init(pa_resampler *r) {$/;"	f	file:
speex_resample_float	resampler.c	/^static void speex_resample_float(pa_resampler *r, const pa_memchunk *input, unsigned in_n_frames, pa_memchunk *output, unsigned *out_n_frames) {$/;"	f	file:
speex_resample_int	resampler.c	/^static void speex_resample_int(pa_resampler *r, const pa_memchunk *input, unsigned in_n_frames, pa_memchunk *output, unsigned *out_n_frames) {$/;"	f	file:
speex_reset	resampler.c	/^static void speex_reset(pa_resampler *r) {$/;"	f	file:
speex_update_rates	resampler.c	/^static void speex_update_rates(pa_resampler *r) {$/;"	f	file:
src	resampler.c	/^    } src;$/;"	m	struct:pa_resampler	typeref:struct:pa_resampler::__anon39	file:
src_incr	ffmpeg/resample2.c	/^    int src_incr;$/;"	m	struct:AVResampleContext	file:
st_13linear2alaw	g711.c	/^unsigned char st_13linear2alaw($/;"	f
st_13linear2alaw	g711.h	23;"	d
st_14linear2ulaw	g711.c	/^unsigned char st_14linear2ulaw($/;"	f
st_14linear2ulaw	g711.h	33;"	d
st_alaw2linear16	g711.c	/^int16_t st_alaw2linear16($/;"	f
st_alaw2linear16	g711.h	24;"	d
st_ulaw2linear16	g711.c	/^int16_t st_ulaw2linear16($/;"	f
st_ulaw2linear16	g711.h	34;"	d
start	memtrap.c	/^    void *start;$/;"	m	struct:pa_memtrap	file:
start_thread	lock-autospawn.c	/^static int start_thread(void) {$/;"	f	file:
start_timeout	socket-client.c	/^static void start_timeout(pa_socket_client *c, pa_bool_t use_rtclock) {$/;"	f	file:
start_x	envelope.c	/^    pa_usec_t start_x;$/;"	m	struct:pa_envelope_item	file:
start_y	envelope.c	/^    } start_y;$/;"	m	struct:pa_envelope_item	typeref:union:pa_envelope_item::__anon22	file:
starting_getgr_buflen	usergroup.c	/^static size_t starting_getgr_buflen(void) {$/;"	f	file:
starting_getpw_buflen	usergroup.c	/^static size_t starting_getpw_buflen(void) {$/;"	f	file:
stat	memblock.c	/^    pa_mempool_stat stat;$/;"	m	struct:pa_mempool	file:
stat_add	memblock.c	/^static void stat_add(pa_memblock*b) {$/;"	f	file:
stat_remove	memblock.c	/^static void stat_remove(pa_memblock *b) {$/;"	f	file:
state	core.h	/^    pa_core_state_t state;$/;"	m	struct:pa_core
state	envelope.c	/^    pa_atomic_t state;$/;"	m	struct:pa_envelope	file:
state	lock-autospawn.c	/^} state = STATE_IDLE;$/;"	v	typeref:enum:__anon50	file:
state	protocol-esound.c	/^    esd_client_state_t state;$/;"	m	struct:connection	file:
state	protocol-http.c	/^    enum state state;$/;"	m	struct:connection	typeref:enum:connection::state	file:
state	protocol-http.c	/^enum state {$/;"	g	file:
state	resampler.c	/^        SRC_STATE *state;$/;"	m	struct:pa_resampler::__anon39	file:
state	resampler.c	/^        SpeexResamplerState* state;$/;"	m	struct:pa_resampler::__anon40	file:
state	resampler.c	/^        struct AVResampleContext *state;$/;"	m	struct:pa_resampler::__anon41	typeref:struct:pa_resampler::__anon41::AVResampleContext	file:
state	sink-input.h	/^        pa_sink_input_state_t state;$/;"	m	struct:pa_sink_input::__anon27
state	sink-input.h	/^    pa_sink_input_state_t state;$/;"	m	struct:pa_sink_input
state	sink.h	/^        pa_sink_state_t state;$/;"	m	struct:pa_sink::__anon36
state	sink.h	/^    pa_sink_state_t state;$/;"	m	struct:pa_sink
state	source-output.h	/^        pa_source_output_state_t state;$/;"	m	struct:pa_source_output::__anon15
state	source-output.h	/^    pa_source_output_state_t state;$/;"	m	struct:pa_source_output
state	source.h	/^        pa_source_state_t state;$/;"	m	struct:pa_source::__anon2
state	source.h	/^    pa_source_state_t state;$/;"	m	struct:pa_source
state_change	sink-input.h	/^    void (*state_change) (pa_sink_input *i, pa_sink_input_state_t state); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
state_change	source-output.h	/^    void (*state_change) (pa_source_output *o, pa_source_output_state_t state); \/* may be NULL *\/$/;"	m	struct:pa_source_output
stdio_inuse	sioman.c	/^static pa_atomic_t stdio_inuse = PA_ATOMIC_INIT(0);$/;"	v	file:
strip	conf-parser.c	/^static char *strip(char *s) {$/;"	f	file:
subscription	protocol-native.c	/^    pa_subscription *subscription;$/;"	m	struct:pa_native_connection	file:
subscription_cb	protocol-native.c	/^static void subscription_cb(pa_core *core, pa_subscription_event_type_t e, uint32_t idx, void *userdata) {$/;"	f	file:
subscription_defer_event	core.h	/^    pa_defer_event *subscription_defer_event;$/;"	m	struct:pa_core
subscription_event_last	core.h	/^    pa_subscription_event *subscription_event_last;$/;"	m	struct:pa_core
suseconds_t	winsock.h	/^typedef long suseconds_t;$/;"	t
suspend	sink-input.h	/^    void (*suspend) (pa_sink_input *i, pa_bool_t b);   \/* may be NULL *\/$/;"	m	struct:pa_sink_input
suspend	source-output.h	/^    void (*suspend) (pa_source_output *o, pa_bool_t b);   \/* may be NULL *\/$/;"	m	struct:pa_source_output
suspend_cause	sink.h	/^    pa_suspend_cause_t suspend_cause;$/;"	m	struct:pa_sink
suspend_cause	source.h	/^    pa_suspend_cause_t suspend_cause;$/;"	m	struct:pa_source
suspend_within_thread	sink-input.h	/^    void (*suspend_within_thread) (pa_sink_input *i, pa_bool_t b);   \/* may be NULL *\/$/;"	m	struct:pa_sink_input
suspend_within_thread	source-output.h	/^    void (*suspend_within_thread) (pa_source_output *o, pa_bool_t b);   \/* may be NULL *\/$/;"	m	struct:pa_source_output
swap	prioq.c	/^static void swap(pa_prioq *q, unsigned j, unsigned k) {$/;"	f	file:
swap_byte_order	protocol-esound.c	/^    pa_bool_t authorized, swap_byte_order;$/;"	m	struct:connection	file:
swapped	aupdate.c	/^    pa_bool_t swapped;$/;"	m	struct:pa_aupdate	file:
sync_base	sink-input.h	/^    pa_sink_input *sync_base;$/;"	m	struct:pa_sink_input_new_data
sync_input_volumes_within_thread	sink.c	/^static void sync_input_volumes_within_thread(pa_sink *s) {$/;"	f	file:
sync_next	sink-input.h	/^        pa_sink_input *sync_prev, *sync_next;$/;"	m	struct:pa_sink_input::__anon27
sync_next	sink-input.h	/^    pa_sink_input *sync_prev, *sync_next;$/;"	m	struct:pa_sink_input
sync_prev	sink-input.h	/^        pa_sink_input *sync_prev, *sync_next;$/;"	m	struct:pa_sink_input::__anon27
sync_prev	sink-input.h	/^    pa_sink_input *sync_prev, *sync_next;$/;"	m	struct:pa_sink_input
syncid	protocol-native.c	/^    uint32_t syncid;$/;"	m	struct:playback_stream	file:
tag	pdispatch.c	/^    uint32_t tag;$/;"	m	struct:reply_info	file:
tail	strbuf.c	/^    struct chunk *head, *tail;$/;"	m	struct:pa_strbuf	typeref:struct:pa_strbuf::	file:
target	log.c	/^static pa_log_target_t target = PA_LOG_STDERR, target_override;$/;"	v	file:
target_override	log.c	/^static pa_log_target_t target = PA_LOG_STDERR, target_override;$/;"	v	file:
target_override_set	log.c	/^static pa_bool_t target_override_set = FALSE;$/;"	v	file:
tcpwrap_service	socket-server.c	/^    char *tcpwrap_service;$/;"	m	struct:pa_socket_server	file:
thread	lock-autospawn.c	/^static pa_thread *thread = NULL;$/;"	v	file:
thread	thread-win32.c	/^    HANDLE thread;$/;"	m	struct:pa_thread	file:
thread	thread-win32.c	/^    HANDLE thread;$/;"	m	struct:pa_tls_monitor	file:
thread_free_cb	thread-posix.c	/^static void thread_free_cb(void *p) {$/;"	f	file:
thread_func	lock-autospawn.c	/^static void thread_func(void *u) {$/;"	f	file:
thread_func	thread-posix.c	/^    pa_thread_func_t thread_func;$/;"	m	struct:pa_thread	file:
thread_func	thread-win32.c	/^    pa_thread_func_t thread_func;$/;"	m	struct:pa_thread	file:
thread_info	sink-input.h	/^    } thread_info;$/;"	m	struct:pa_sink_input	typeref:struct:pa_sink_input::__anon27
thread_info	sink.h	/^    } thread_info;$/;"	m	struct:pa_sink	typeref:struct:pa_sink::__anon36
thread_info	source-output.h	/^    } thread_info;$/;"	m	struct:pa_source_output	typeref:struct:pa_source_output::__anon15
thread_info	source.h	/^ } thread_info;$/;"	m	struct:pa_source	typeref:struct:pa_source::__anon2
thread_mq	thread-mq.c	/^PA_STATIC_TLS_DECLARE_NO_FREE(thread_mq);$/;"	v
thread_tls	thread-win32.c	/^static pa_tls *thread_tls;$/;"	v	file:
thread_tls_once	thread-win32.c	/^static pa_once thread_tls_once = PA_ONCE_INIT;$/;"	v	file:
thread_tls_once_func	thread-win32.c	/^static void thread_tls_once_func(void) {$/;"	f	file:
time_event	avahi-wrap.c	/^    pa_time_event *time_event;$/;"	m	struct:AvahiTimeout	file:
time_event	pdispatch.c	/^    pa_time_event *time_event;$/;"	m	struct:reply_info	file:
time_event_destroy_cb	dbus-util.c	/^static void time_event_destroy_cb(pa_mainloop_api *a, pa_time_event *e, void *userdata) {$/;"	f	file:
time_offset	time-smoother.c	/^    pa_usec_t time_offset;$/;"	m	struct:pa_smoother	file:
timeout	dbus-util.c	/^    DBusTimeout *timeout;$/;"	m	struct:timeout_data	file:
timeout_callback	avahi-wrap.c	/^static void timeout_callback(pa_mainloop_api*a, pa_time_event* e, const struct timeval *t, void *userdata) {$/;"	f	file:
timeout_callback	core-scache.c	/^static void timeout_callback(pa_mainloop_api *m, pa_time_event *e, const struct timeval *t, void *userdata) {$/;"	f	file:
timeout_callback	pdispatch.c	/^static void timeout_callback(pa_mainloop_api*m, pa_time_event*e, const struct timeval *t, void *userdata) {$/;"	f	file:
timeout_cb	socket-client.c	/^static void timeout_cb(pa_mainloop_api *m, pa_time_event *e, const struct timeval *t, void *userdata) {$/;"	f	file:
timeout_data	dbus-util.c	/^struct timeout_data {$/;"	s	file:
timeout_event	socket-client.c	/^    pa_time_event *timeout_event;$/;"	m	struct:pa_socket_client	file:
timeout_free	avahi-wrap.c	/^static void timeout_free(AvahiTimeout *t) {$/;"	f	file:
timeout_new	avahi-wrap.c	/^static AvahiTimeout* timeout_new(const AvahiPoll *api, const struct timeval *tv, AvahiTimeoutCallback callback, void *userdata) {$/;"	f	file:
timeout_update	avahi-wrap.c	/^static void timeout_update(AvahiTimeout *t, const struct timeval *tv) {$/;"	f	file:
timer_elapsed	rtpoll.c	/^    pa_bool_t timer_elapsed:1;$/;"	m	struct:pa_rtpoll	file:
timer_enabled	rtpoll.c	/^    pa_bool_t timer_enabled:1;$/;"	m	struct:pa_rtpoll	file:
timestamp	rtpoll.c	/^    pa_usec_t timestamp;$/;"	m	struct:pa_rtpoll	file:
tlength	memblockq.c	/^    size_t maxlength, tlength, base, prebuf, minreq, maxrewind;$/;"	m	struct:pa_memblockq	file:
tmp_filename	database-simple.c	/^    char *tmp_filename;$/;"	m	struct:simple_data	file:
to_float32ne_table	sconv.c	/^static pa_convert_func_t to_float32ne_table[] = {$/;"	v	file:
to_s16ne_table	sconv.c	/^static pa_convert_func_t to_s16ne_table[] = {$/;"	v	file:
to_work_format_func	resampler.c	/^    pa_convert_func_t to_work_format_func;$/;"	m	struct:pa_resampler	file:
toggle_timeout	dbus-util.c	/^static void toggle_timeout(DBusTimeout *timeout, void *data) {$/;"	f	file:
toggle_watch	dbus-util.c	/^static void toggle_watch(DBusWatch *watch, void *data) {$/;"	f	file:
token_free	tokenizer.c	/^static void token_free(void *p, void *userdata) {$/;"	f	file:
translate_error	rtkit.c	/^static int translate_error(const char *name) {$/;"	f	file:
translate_io_flags	avahi-wrap.c	/^static pa_io_event_flags_t translate_io_flags(AvahiWatchEvent e) {$/;"	f	file:
translate_io_flags_back	avahi-wrap.c	/^static AvahiWatchEvent translate_io_flags_back(pa_io_event_flags_t e) {$/;"	f	file:
trap	memblock.c	/^    pa_memtrap *trap;$/;"	m	struct:pa_memimport_segment	file:
trivial	resampler.c	/^    } trivial;$/;"	m	struct:pa_resampler	typeref:struct:pa_resampler::__anon37	file:
trivial_init	resampler.c	/^static int trivial_init(pa_resampler*r) {$/;"	f	file:
trivial_resample	resampler.c	/^static void trivial_resample(pa_resampler *r, const pa_memchunk *input, unsigned in_n_frames, pa_memchunk *output, unsigned *out_n_frames) {$/;"	f	file:
trivial_update_rates_or_reset	resampler.c	/^static void trivial_update_rates_or_reset(pa_resampler *r) {$/;"	f	file:
type	core-subscribe.c	/^    pa_subscription_event_type_t type;$/;"	m	struct:pa_subscription_event	file:
type	memblock.c	/^    pa_memblock_type_t type;$/;"	m	struct:pa_memblock	file:
type	namereg.c	/^    pa_namereg_type_t type;$/;"	m	struct:namereg_entry	file:
type	packet.h	/^    enum { PA_PACKET_APPENDED, PA_PACKET_DYNAMIC } type;$/;"	m	struct:pa_packet	typeref:enum:pa_packet::__anon26
type	parseaddr.h	/^    pa_parsed_address_type_t type;$/;"	m	struct:pa_parsed_address
type	pstream.c	/^    } type;$/;"	m	struct:item_info	typeref:enum:item_info::__anon33	file:
type	socket-server.c	/^    enum { SOCKET_SERVER_GENERIC, SOCKET_SERVER_IPV4, SOCKET_SERVER_UNIX, SOCKET_SERVER_IPV6 } type;$/;"	m	struct:pa_socket_server	typeref:enum:pa_socket_server::__anon48	file:
type_id	object.h	/^    const char *type_id;$/;"	m	struct:pa_object
u	vector.h	/^    uint8_t u[PA_UINT8_VECTOR_SIZE];$/;"	m	union:pa_uint8_vector
u8_from_float32ne	sconv.c	/^static void u8_from_float32ne(unsigned n, const float *a, uint8_t *b) {$/;"	f	file:
u8_from_s16ne	sconv.c	/^static void u8_from_s16ne(unsigned n, const int16_t *a, uint8_t *b) {$/;"	f	file:
u8_to_float32ne	sconv.c	/^static void u8_to_float32ne(unsigned n, const uint8_t *a, float *b) {$/;"	f	file:
u8_to_s16ne	sconv.c	/^static void u8_to_s16ne(unsigned n, const uint8_t *a, int16_t *b) {$/;"	f	file:
uid	creds.h	/^    uid_t uid;$/;"	m	struct:pa_creds
ulaw_from_float32ne	sconv.c	/^static void ulaw_from_float32ne(unsigned n, const float *a, uint8_t *b) {$/;"	f	file:
ulaw_from_s16ne	sconv.c	/^static void ulaw_from_s16ne(unsigned n, const int16_t *a, uint8_t *b) {$/;"	f	file:
ulaw_to_float32ne	sconv.c	/^static void ulaw_to_float32ne(unsigned n, const uint8_t *a, float *b) {$/;"	f	file:
ulaw_to_s16ne	sconv.c	/^static void ulaw_to_s16ne(unsigned n, const uint8_t *a, int16_t *b) {$/;"	f	file:
underrun	protocol-esound.c	/^        pa_bool_t underrun;$/;"	m	struct:connection::__anon11	file:
underrun	protocol-simple.c	/^        pa_bool_t underrun;$/;"	m	struct:connection::__anon8	file:
underrun_for	protocol-native.c	/^    uint64_t playing_for, underrun_for;$/;"	m	struct:playback_stream	file:
underrun_for	sink-input.h	/^        uint64_t underrun_for, playing_for;$/;"	m	struct:pa_sink_input::__anon27
unload_requested	module.h	/^    pa_bool_t unload_requested:1;$/;"	m	struct:pa_module
unref	lock-autospawn.c	/^static void unref(pa_bool_t after_fork) {$/;"	f	file:
update_max_request	sink-input.h	/^    void (*update_max_request) (pa_sink_input *i, size_t nbytes); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
update_max_rewind	sink-input.h	/^    void (*update_max_rewind) (pa_sink_input *i, size_t nbytes); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
update_max_rewind	source-output.h	/^    void (*update_max_rewind) (pa_source_output *o, size_t nbytes); \/* may be NULL *\/$/;"	m	struct:pa_source_output
update_n_corked	sink-input.c	/^static void update_n_corked(pa_sink_input *i, pa_sink_input_state_t state) {$/;"	f	file:
update_n_corked	source-output.c	/^static void update_n_corked(pa_source_output *o, pa_source_output_state_t state) {$/;"	f	file:
update_prebuf	memblockq.c	/^static pa_bool_t update_prebuf(pa_memblockq *bq) {$/;"	f	file:
update_requested_latency	sink.h	/^    void (*update_requested_latency)(pa_sink *s); \/* dito *\/$/;"	m	struct:pa_sink
update_requested_latency	source.h	/^    void (*update_requested_latency)(pa_source *s); \/* dito *\/$/;"	m	struct:pa_source
update_sink_fixed_latency	sink-input.h	/^    void (*update_sink_fixed_latency) (pa_sink_input *i); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
update_sink_latency_range	sink-input.h	/^    void (*update_sink_latency_range) (pa_sink_input *i); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
update_sink_requested_latency	sink-input.h	/^    void (*update_sink_requested_latency) (pa_sink_input *i); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
update_source_fixed_latency	source-output.h	/^    void (*update_source_fixed_latency) (pa_source_output *i); \/* may be NULL *\/$/;"	m	struct:pa_source_output
update_source_latency_range	source-output.h	/^    void (*update_source_latency_range) (pa_source_output *o); \/* may be NULL *\/$/;"	m	struct:pa_source_output
update_source_requested_latency	source-output.h	/^    void (*update_source_requested_latency) (pa_source_output *o); \/* may be NULL *\/$/;"	m	struct:pa_source_output
upload_stream	protocol-native.c	/^typedef struct upload_stream {$/;"	s	file:
upload_stream	protocol-native.c	/^} upload_stream;$/;"	t	typeref:struct:upload_stream	file:
upload_stream_free	protocol-native.c	/^static void upload_stream_free(pa_object *o) {$/;"	f	file:
upload_stream_new	protocol-native.c	/^static upload_stream* upload_stream_new($/;"	f	file:
upload_stream_unlink	protocol-native.c	/^static void upload_stream_unlink(upload_stream *s) {$/;"	f	file:
url	protocol-http.c	/^    char *url;$/;"	m	struct:connection	file:
usage	modinfo.h	/^    char *usage;$/;"	m	struct:pa_modinfo
use_rtclock	dbus-util.c	/^    pa_bool_t use_rtclock:1;$/;"	m	struct:pa_dbus_wrap_connection	file:
use_rtclock	pdispatch.c	/^    pa_bool_t use_rtclock;$/;"	m	struct:pa_pdispatch	file:
use_shm	pstream.c	/^    pa_bool_t use_shm;$/;"	m	struct:pa_pstream	file:
user	memblock.c	/^        } user;$/;"	m	union:pa_memblock::__anon4	typeref:struct:pa_memblock::__anon4::__anon5	file:
userdata	asyncmsgq.c	/^    void *userdata;$/;"	m	struct:asyncmsgq_item	file:
userdata	avahi-wrap.c	/^    void *userdata;$/;"	m	struct:AvahiTimeout	file:
userdata	avahi-wrap.c	/^    void *userdata;$/;"	m	struct:AvahiWatch	file:
userdata	card.h	/^    void *userdata;$/;"	m	struct:pa_card
userdata	cli.c	/^    void *userdata;$/;"	m	struct:pa_cli	file:
userdata	client.h	/^    void *userdata;$/;"	m	struct:pa_client
userdata	core-subscribe.c	/^    void *userdata;$/;"	m	struct:pa_subscription	file:
userdata	iochannel.c	/^    void*userdata;$/;"	m	struct:pa_iochannel	file:
userdata	ioline.c	/^    void *userdata;$/;"	m	struct:pa_ioline	file:
userdata	memblock.c	/^    void *userdata;$/;"	m	struct:pa_memexport	file:
userdata	memblock.c	/^    void *userdata;$/;"	m	struct:pa_memimport	file:
userdata	module.h	/^    void *userdata;$/;"	m	struct:pa_module
userdata	pdispatch.c	/^    void *userdata;$/;"	m	struct:reply_info	file:
userdata	rtpoll.c	/^    void *userdata;$/;"	m	struct:pa_rtpoll_item	file:
userdata	sample-util.h	/^    void *userdata;$/;"	m	struct:pa_mix_info
userdata	sink-input.h	/^    void *userdata;$/;"	m	struct:pa_sink_input
userdata	sink.h	/^    void *userdata;$/;"	m	struct:pa_sink
userdata	socket-client.c	/^    void *userdata;$/;"	m	struct:pa_socket_client	file:
userdata	socket-server.c	/^    void *userdata;$/;"	m	struct:pa_socket_server	file:
userdata	source-output.h	/^    void *userdata;$/;"	m	struct:pa_source_output
userdata	source.h	/^    void *userdata;$/;"	m	struct:pa_source
userdata	thread-posix.c	/^    void *userdata;$/;"	m	struct:pa_thread	file:
userdata	thread-win32.c	/^    void *userdata;$/;"	m	struct:pa_thread	file:
userdata	x11wrap.c	/^    void *userdata;$/;"	m	struct:pa_x11_client	file:
v	vector.h	/^    pa_v16qi v;$/;"	m	union:pa_uint8_vector
v	vector.h	/^    pa_v4sf v;$/;"	m	union:pa_float_vector
v	vector.h	/^    pa_v4si v;$/;"	m	union:pa_int32_vector
v	vector.h	/^    pa_v8hi v;$/;"	m	union:pa_int16_vector
value	atomic.h	/^    volatile AO_t value;$/;"	m	struct:pa_atomic
value	atomic.h	/^    volatile AO_t value;$/;"	m	struct:pa_atomic_ptr
value	atomic.h	/^    volatile int value;$/;"	m	struct:pa_atomic
value	atomic.h	/^    volatile unsigned int value;$/;"	m	struct:pa_atomic
value	atomic.h	/^    volatile unsigned long value;$/;"	m	struct:pa_atomic_ptr
value	atomic.h	/^    volatile void *value;$/;"	m	struct:pa_atomic_ptr
value	hashmap.c	/^    void *value;$/;"	m	struct:hashmap_entry	file:
value	modargs.c	/^    char *key, *value;$/;"	m	struct:entry	file:
value	prioq.c	/^    void *value;$/;"	m	struct:pa_prioq_item	file:
version	esound.h	/^    int version;                \/* server version encoded as an int *\/$/;"	m	struct:esd_server_info
version	modinfo.h	/^    char *version;$/;"	m	struct:pa_modinfo
version	protocol-native.c	/^    uint32_t version;$/;"	m	struct:pa_native_connection	file:
volume	core-scache.h	/^    pa_cvolume volume;$/;"	m	struct:pa_scache_entry
volume	sample-util.h	/^    pa_cvolume volume;$/;"	m	struct:pa_mix_info
volume	sink-input.h	/^    pa_cvolume volume, volume_factor, volume_factor_sink;$/;"	m	struct:pa_sink_input_new_data
volume	sink-input.h	/^    pa_cvolume volume;             \/* The volume clients are informed about *\/$/;"	m	struct:pa_sink_input
volume	sink.h	/^    pa_cvolume volume;$/;"	m	struct:pa_sink_new_data
volume	source.h	/^    pa_cvolume volume, soft_volume;$/;"	m	struct:pa_source
volume	source.h	/^    pa_cvolume volume;$/;"	m	struct:pa_source_new_data
volume_changed	sink-input.h	/^    void (*volume_changed)(pa_sink_input *i); \/* may be NULL *\/$/;"	m	struct:pa_sink_input
volume_factor	sink-input.h	/^    pa_cvolume volume, volume_factor, volume_factor_sink;$/;"	m	struct:pa_sink_input_new_data
volume_factor	sink-input.h	/^    pa_cvolume volume_factor;      \/* An internally used volume factor that can be used by modules to apply effects and suchlike without having that visible to the outside *\/$/;"	m	struct:pa_sink_input
volume_factor_is_set	sink-input.h	/^    pa_bool_t volume_is_set:1, volume_factor_is_set:1, volume_factor_sink_is_set:1;$/;"	m	struct:pa_sink_input_new_data
volume_factor_sink	sink-input.h	/^    pa_cvolume volume, volume_factor, volume_factor_sink;$/;"	m	struct:pa_sink_input_new_data
volume_factor_sink	sink-input.h	/^    pa_cvolume volume_factor_sink; \/* A second volume factor in format of the sink this stream is connected to *\/$/;"	m	struct:pa_sink_input
volume_factor_sink_is_set	sink-input.h	/^    pa_bool_t volume_is_set:1, volume_factor_is_set:1, volume_factor_sink_is_set:1;$/;"	m	struct:pa_sink_input_new_data
volume_is_absolute	sink-input.h	/^    pa_bool_t volume_is_absolute:1;$/;"	m	struct:pa_sink_input_new_data
volume_is_set	core-scache.h	/^    pa_bool_t volume_is_set;$/;"	m	struct:pa_scache_entry
volume_is_set	sink-input.h	/^    pa_bool_t volume_is_set:1, volume_factor_is_set:1, volume_factor_sink_is_set:1;$/;"	m	struct:pa_sink_input_new_data
volume_is_set	sink.h	/^    pa_bool_t volume_is_set:1;$/;"	m	struct:pa_sink_new_data
volume_is_set	source.h	/^    pa_bool_t volume_is_set:1;$/;"	m	struct:pa_source_new_data
volume_val	sample-util.c	/^} volume_val;$/;"	t	typeref:union:__anon7	file:
w_sz	resampler.c	/^    size_t i_fz, o_fz, w_sz;$/;"	m	struct:pa_resampler	file:
wait_events	mutex-win32.c	/^    pa_hashmap *wait_events;$/;"	m	struct:pa_cond	file:
wait_for_ping	lock-autospawn.c	/^static void wait_for_ping(void) {$/;"	f	file:
waiting	fdsem.h	/^    pa_atomic_t waiting;$/;"	m	struct:pa_fdsem_data
waiting_for_post	asyncq.c	/^    pa_bool_t waiting_for_post;$/;"	m	struct:pa_asyncq	file:
wakeup_main	dbus-util.c	/^static void wakeup_main(void *userdata) {$/;"	f	file:
wallclock_from_rtclock	core-rtclock.c	/^static struct timeval* wallclock_from_rtclock(struct timeval *tv) {$/;"	f	file:
watch_callback	avahi-wrap.c	/^static void watch_callback(pa_mainloop_api*a, pa_io_event* e, int fd, pa_io_event_flags_t events, void *userdata) {$/;"	f	file:
watch_free	avahi-wrap.c	/^static void watch_free(AvahiWatch *w) {$/;"	f	file:
watch_get_events	avahi-wrap.c	/^static AvahiWatchEvent watch_get_events(AvahiWatch *w) {$/;"	f	file:
watch_new	avahi-wrap.c	/^static AvahiWatch* watch_new(const AvahiPoll *api, int fd, AvahiWatchEvent event, AvahiWatchCallback callback, void *userdata) {$/;"	f	file:
watch_update	avahi-wrap.c	/^static void watch_update(AvahiWatch *w, AvahiWatchEvent event) {$/;"	f	file:
wbuf	ioline.c	/^    char *wbuf;$/;"	m	struct:pa_ioline	file:
wbuf_index	ioline.c	/^    size_t wbuf_length, wbuf_index, wbuf_valid_length;$/;"	m	struct:pa_ioline	file:
wbuf_length	ioline.c	/^    size_t wbuf_length, wbuf_index, wbuf_valid_length;$/;"	m	struct:pa_ioline	file:
wbuf_valid_length	ioline.c	/^    size_t wbuf_length, wbuf_index, wbuf_valid_length;$/;"	m	struct:pa_ioline	file:
whitespace	cli-command.c	/^static const char whitespace[] = " \\t\\n\\r";$/;"	v	file:
with_creds	pstream.c	/^    pa_bool_t with_creds;$/;"	m	struct:item_info	file:
work	x11wrap.c	/^static void work(pa_x11_wrapper *w) {$/;"	f	file:
work_cb	rtpoll.c	/^    int (*work_cb)(pa_rtpoll_item *i);$/;"	m	struct:pa_rtpoll_item	file:
work_format	resampler.c	/^    pa_sample_format_t work_format;$/;"	m	struct:pa_resampler	file:
wrapper	x11wrap.c	/^    pa_x11_wrapper *wrapper;$/;"	m	struct:pa_x11_client	file:
wrapper	x11wrap.c	/^    pa_x11_wrapper *wrapper;$/;"	m	struct:pa_x11_internal	file:
writable	iochannel.c	/^    pa_bool_t writable;$/;"	m	struct:pa_iochannel	file:
write	pstream.c	/^    } write;$/;"	m	struct:pa_pstream	typeref:struct:pa_pstream::__anon34	file:
write_creds	pstream.c	/^    pa_creds read_creds, write_creds;$/;"	m	struct:pa_pstream	file:
write_data	database-simple.c	/^static int write_data(FILE *f, void *data, const size_t length) {$/;"	f	file:
write_data	protocol-esound.c	/^    void *write_data;$/;"	m	struct:connection	file:
write_data_alloc	protocol-esound.c	/^    size_t write_data_alloc, write_data_index, write_data_length;$/;"	m	struct:connection	file:
write_data_index	protocol-esound.c	/^    size_t write_data_alloc, write_data_index, write_data_length;$/;"	m	struct:connection	file:
write_data_length	protocol-esound.c	/^    size_t write_data_alloc, write_data_index, write_data_length;$/;"	m	struct:connection	file:
write_entry	database-simple.c	/^static int write_entry(FILE *f, const entry *e) {$/;"	f	file:
write_event	thread-mq.h	/^    pa_io_event *read_event, *write_event;$/;"	m	struct:pa_thread_mq
write_fdsem	asyncq.c	/^    pa_fdsem *read_fdsem, *write_fdsem;$/;"	m	struct:pa_asyncq	file:
write_idx	asyncq.c	/^    unsigned write_idx;$/;"	m	struct:pa_asyncq	file:
write_idx	flist.c	/^    pa_atomic_t write_idx;$/;"	m	struct:pa_flist	file:
write_index	memblockq.c	/^    int64_t read_index, write_index;$/;"	m	struct:pa_memblockq	file:
write_index	protocol-native.c	/^    int64_t read_index, write_index;$/;"	m	struct:playback_stream	file:
write_lock	aupdate.c	/^    pa_mutex *write_lock;$/;"	m	struct:pa_aupdate	file:
write_uint	database-simple.c	/^static int write_uint(FILE *f, const uint32_t num) {$/;"	f	file:
x	envelope.c	/^        size_t *x;$/;"	m	struct:pa_envelope::__anon23	file:
x	envelope.c	/^    size_t x;$/;"	m	struct:pa_envelope	file:
x11_internal_add	x11wrap.c	/^static pa_x11_internal* x11_internal_add(pa_x11_wrapper *w, int fd) {$/;"	f	file:
x11_internal_remove	x11wrap.c	/^static void x11_internal_remove(pa_x11_wrapper *w, pa_x11_internal *i) {$/;"	f	file:
x11_watch	x11wrap.c	/^static void x11_watch(Display *display, XPointer userdata, int fd, Bool opening, XPointer *watch_data) {$/;"	f	file:
x11_wrapper_free	x11wrap.c	/^static void x11_wrapper_free(pa_x11_wrapper*w) {$/;"	f	file:
x11_wrapper_new	x11wrap.c	/^static pa_x11_wrapper* x11_wrapper_new(pa_core *c, const char *name, const char *t) {$/;"	f	file:
y	envelope.c	/^        } y;$/;"	m	struct:pa_envelope::__anon23	typeref:union:pa_envelope::__anon23::__anon24	file:
